
atomclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000384  00800200  00001f9e  00002032  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001b96  00800584  00800584  000023b6  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000095a  00000000  00000000  000025d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004219  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000145c  00000000  00000000  00007149  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000266c  00000000  00000000  000085a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005b0  00000000  00000000  0000ac14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bc6  00000000  00000000  0000b1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001828  00000000  00000000  0000bd8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_17>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <__vector_35>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e9       	ldi	r30, 0x9E	; 158
      fc:	ff e1       	ldi	r31, 0x1F	; 31
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 38       	cpi	r26, 0x84	; 132
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	11 e2       	ldi	r17, 0x21	; 33
     110:	a4 e8       	ldi	r26, 0x84	; 132
     112:	b5 e0       	ldi	r27, 0x05	; 5
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 31       	cpi	r26, 0x1A	; 26
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__vector_default>

0000012a <main>:
 * Sets up the AVR hardware resources (system tick timer interrupt) necessary
 * for the OS to be started. Creates an application thread and starts the OS.
 */

int main ( void )
{
     12a:	8f 92       	push	r8
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
    int8_t status;
	sei();
     13c:	78 94       	sei



	SerialInit(MYUBRR);
     13e:	80 e1       	ldi	r24, 0x10	; 16
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 e5 07 	call	0xfca	; 0xfca <USART_Init>
	InitWatch();
     146:	0e 94 b3 07 	call	0xf66	; 0xf66 <InitWatch>
    /**
     * Reuse part of the idle thread's stack for the stack required
     * during this startup function.
     */
    SP = (int)&idle_thread_stack[(IDLE_STACK_SIZE_BYTES/2) - 1];
     14a:	83 ec       	ldi	r24, 0xC3	; 195
     14c:	95 e0       	ldi	r25, 0x05	; 5
     14e:	9e bf       	out	0x3e, r25	; 62
     150:	8d bf       	out	0x3d, r24	; 61
     * checking would overwrite our current stack.
     *
     * If you are not reusing the idle thread's stack during startup then
     * you are free to enable stack-checking here.
     */
    status = atomOSInit(&idle_thread_stack[0], IDLE_STACK_SIZE_BYTES, FALSE);
     152:	cf 97       	sbiw	r24, 0x3f	; 63
     154:	40 e8       	ldi	r20, 0x80	; 128
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	0e 94 ca 09 	call	0x1394	; 0x1394 <atomOSInit>
    if (status == ATOM_OK)
     162:	88 23       	and	r24, r24
     164:	d9 f4       	brne	.+54     	; 0x19c <main+0x72>
    {

        /* Enable the system tick timer */
        avrInitSystemTickTimer();
     166:	0e 94 34 07 	call	0xe68	; 0xe68 <avrInitSystemTickTimer>

        /* Create the main thread */
        status = atomThreadCreate(&main_tcb,
     16a:	84 e0       	ldi	r24, 0x04	; 4
     16c:	96 e0       	ldi	r25, 0x06	; 6
     16e:	60 e1       	ldi	r22, 0x10	; 16
     170:	4c e1       	ldi	r20, 0x1C	; 28
     172:	51 e0       	ldi	r21, 0x01	; 1
     174:	00 e0       	ldi	r16, 0x00	; 0
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	e5 e1       	ldi	r30, 0x15	; 21
     17e:	ee 2e       	mov	r14, r30
     180:	e6 e0       	ldi	r30, 0x06	; 6
     182:	fe 2e       	mov	r15, r30
     184:	7c ec       	ldi	r23, 0xCC	; 204
     186:	a7 2e       	mov	r10, r23
     188:	b1 2c       	mov	r11, r1
     18a:	c1 2c       	mov	r12, r1
     18c:	d1 2c       	mov	r13, r1
     18e:	88 24       	eor	r8, r8
     190:	0e 94 5e 09 	call	0x12bc	; 0x12bc <atomThreadCreate>
                     MAIN_THREAD_PRIO, main_thread_func, 0,
                     &main_thread_stack[0],
                     MAIN_STACK_SIZE_BYTES,
                     FALSE);
        if (status == ATOM_OK)
     194:	88 23       	and	r24, r24
     196:	11 f4       	brne	.+4      	; 0x19c <main+0x72>
             *
             * Note that interrupts are still disabled at this point.
             * They will be enabled as we restore and execute our first
             * thread in archFirstThreadRestore().
             */
            atomOSStart();
     198:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <atomOSStart>

        }
    }
    while (1)
	{
		atomTimerDelay (2 * SYSTEM_TICKS_PER_SEC); // wait 2 sec
     19c:	68 ec       	ldi	r22, 0xC8	; 200
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 22 0c 	call	0x1844	; 0x1844 <atomTimerDelay>
     1a8:	f9 cf       	rjmp	.-14     	; 0x19c <main+0x72>

000001aa <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	18 2f       	mov	r17, r24
     1b2:	eb 01       	movw	r28, r22

  /* Block on private access to the UART */
  if (atomMutexGet(&uart_mutex, 0) == ATOM_OK)
     1b4:	81 ee       	ldi	r24, 0xE1	; 225
     1b6:	96 e0       	ldi	r25, 0x06	; 6
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	0e 94 b7 0a 	call	0x156e	; 0x156e <atomMutexGet>
     1c4:	88 23       	and	r24, r24
     1c6:	81 f4       	brne	.+32     	; 0x1e8 <uart_putchar+0x3e>
  {
    /* Convert \n to \r\n */
    if (c == '\n')
     1c8:	1a 30       	cpi	r17, 0x0A	; 10
     1ca:	21 f4       	brne	.+8      	; 0x1d4 <uart_putchar+0x2a>
      uart_putchar('\r', stream);
     1cc:	8d e0       	ldi	r24, 0x0D	; 13
     1ce:	be 01       	movw	r22, r28
     1d0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <uart_putchar>

    /* Wait until the UART is ready then send the character out */
    loop_until_bit_is_set(REG_UCSRA, BIT_UDRE);
     1d4:	80 91 30 01 	lds	r24, 0x0130
     1d8:	85 ff       	sbrs	r24, 5
     1da:	fc cf       	rjmp	.-8      	; 0x1d4 <uart_putchar+0x2a>
    REG_UDR = c;
     1dc:	10 93 36 01 	sts	0x0136, r17

    /* Return mutex access */
    atomMutexPut(&uart_mutex);
     1e0:	81 ee       	ldi	r24, 0xE1	; 225
     1e2:	96 e0       	ldi	r25, 0x06	; 6
     1e4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <atomMutexPut>
  }

  return 0;
}
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	08 95       	ret

000001f4 <uart_init>:
/*
 * Initialize the UART to requested baudrate, tx/rx, 8N1.
 */
int
uart_init(uint32_t baudrate)
{
     1f4:	9b 01       	movw	r18, r22
     1f6:	ac 01       	movw	r20, r24
  /* Set up the UART device with the selected baudrate */
#if AVR_CPU_HZ < 2000000UL && defined(U2X)
  REG_UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
  REG_UBRRL = (AVR_CPU_HZ / (8UL * baudrate)) - 1;
#else
  REG_UBRRL = (AVR_CPU_HZ / (16UL * baudrate)) - 1;
     1f8:	84 e0       	ldi	r24, 0x04	; 4
     1fa:	22 0f       	add	r18, r18
     1fc:	33 1f       	adc	r19, r19
     1fe:	44 1f       	adc	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	8a 95       	dec	r24
     204:	d1 f7       	brne	.-12     	; 0x1fa <uart_init+0x6>
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	74 e2       	ldi	r23, 0x24	; 36
     20a:	84 ef       	ldi	r24, 0xF4	; 244
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__udivmodsi4>
     212:	21 50       	subi	r18, 0x01	; 1
     214:	20 93 34 01 	sts	0x0134, r18
#endif
  REG_UCSRB = _BV(BIT_TXEN) | _BV(BIT_RXEN); /* tx/rx enable */
     218:	88 e1       	ldi	r24, 0x18	; 24
     21a:	80 93 31 01 	sts	0x0131, r24

  /* Create a mutex for single-threaded putchar() access */
  if (atomMutexCreate (&uart_mutex) != ATOM_OK)
     21e:	81 ee       	ldi	r24, 0xE1	; 225
     220:	96 e0       	ldi	r25, 0x06	; 6
     222:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <atomMutexCreate>
     226:	88 23       	and	r24, r24
     228:	19 f4       	brne	.+6      	; 0x230 <uart_init+0x3c>
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	02 c0       	rjmp	.+4      	; 0x234 <uart_init+0x40>
     230:	2f ef       	ldi	r18, 0xFF	; 255
     232:	3f ef       	ldi	r19, 0xFF	; 255
    status = 0;
  }

  /* Finished */
  return (status);
}
     234:	c9 01       	movw	r24, r18
     236:	08 95       	ret

00000238 <main_thread_func>:
 * @param[in] data Unused (optional thread entry parameter)
 *
 * @return None
 */
void main_thread_func (uint32_t data)
{
     238:	8f 92       	push	r8
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
    int8_t status = 0;
	int8_t lcd_status=0;
	/* Create a mutex for single-threaded access to global clock variables */
	status = atomMutexCreate (&clock_mutex);
     24a:	8e ed       	ldi	r24, 0xDE	; 222
     24c:	90 e2       	ldi	r25, 0x20	; 32
     24e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <atomMutexCreate>
     252:	18 2f       	mov	r17, r24
	lcd_status=atomMutexCreate(&lcd_mutex);
     254:	83 ee       	ldi	r24, 0xE3	; 227
     256:	90 e2       	ldi	r25, 0x20	; 32
     258:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <atomMutexCreate>

    stdout = &uart_stdout;
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	90 93 17 21 	sts	0x2117, r25
     264:	80 93 16 21 	sts	0x2116, r24

	if (status == ATOM_OK)
     268:	11 23       	and	r17, r17
     26a:	09 f0       	breq	.+2      	; 0x26e <main_thread_func+0x36>
     26c:	5a c0       	rjmp	.+180    	; 0x322 <main_thread_func+0xea>
	{
		// Create the clock display thread
	    status = atomThreadCreate(&clock_disp_tcb,
     26e:	89 ee       	ldi	r24, 0xE9	; 233
     270:	96 e0       	ldi	r25, 0x06	; 6
     272:	62 e1       	ldi	r22, 0x12	; 18
     274:	48 e9       	ldi	r20, 0x98	; 152
     276:	51 e0       	ldi	r21, 0x01	; 1
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	10 e0       	ldi	r17, 0x00	; 0
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	7e e3       	ldi	r23, 0x3E	; 62
     282:	e7 2e       	mov	r14, r23
     284:	77 e0       	ldi	r23, 0x07	; 7
     286:	f7 2e       	mov	r15, r23
     288:	bc ec       	ldi	r27, 0xCC	; 204
     28a:	ab 2e       	mov	r10, r27
     28c:	b1 2c       	mov	r11, r1
     28e:	c1 2c       	mov	r12, r1
     290:	d1 2c       	mov	r13, r1
     292:	88 24       	eor	r8, r8
     294:	0e 94 5e 09 	call	0x12bc	; 0x12bc <atomThreadCreate>
	                 CLOCK_DISP_PRIO, clock_disp_func, 0,
	                 &clock_disp_stack[0],
	                 STACK_SIZE_BYTES,
	                 FALSE);
	}
	if (status == ATOM_OK)
     298:	88 23       	and	r24, r24
     29a:	09 f0       	breq	.+2      	; 0x29e <main_thread_func+0x66>
     29c:	42 c0       	rjmp	.+132    	; 0x322 <main_thread_func+0xea>
	{
		// Create the clock update thread
	    status = atomThreadCreate(&clock_update_tcb,
     29e:	8a ef       	ldi	r24, 0xFA	; 250
     2a0:	96 e0       	ldi	r25, 0x06	; 6
     2a2:	61 e1       	ldi	r22, 0x11	; 17
     2a4:	4e e3       	ldi	r20, 0x3E	; 62
     2a6:	54 e0       	ldi	r21, 0x04	; 4
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	aa e0       	ldi	r26, 0x0A	; 10
     2b2:	ea 2e       	mov	r14, r26
     2b4:	a8 e0       	ldi	r26, 0x08	; 8
     2b6:	fa 2e       	mov	r15, r26
     2b8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <atomThreadCreate>
	                 CLOCK_UPDATE_PRIO, clock_update_func, 0,
	                 &clock_update_stack[0],
	                 STACK_SIZE_BYTES,
	                 FALSE);
	}
    if (status == ATOM_OK)
     2bc:	88 23       	and	r24, r24
     2be:	89 f5       	brne	.+98     	; 0x322 <main_thread_func+0xea>
    {
			status = atomThreadCreate(&button_tcb,
     2c0:	8c e1       	ldi	r24, 0x1C	; 28
     2c2:	97 e0       	ldi	r25, 0x07	; 7
     2c4:	60 e1       	ldi	r22, 0x10	; 16
     2c6:	44 ec       	ldi	r20, 0xC4	; 196
     2c8:	54 e0       	ldi	r21, 0x04	; 4
     2ca:	01 e0       	ldi	r16, 0x01	; 1
     2cc:	10 e0       	ldi	r17, 0x00	; 0
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f2 ea       	ldi	r31, 0xA2	; 162
     2d4:	ef 2e       	mov	r14, r31
     2d6:	f9 e0       	ldi	r31, 0x09	; 9
     2d8:	ff 2e       	mov	r15, r31
     2da:	0e 94 5e 09 	call	0x12bc	; 0x12bc <atomThreadCreate>
                     STACK_SIZE_BYTES,
                     FALSE);			

    }

	if(status==ATOM_OK)
     2de:	88 23       	and	r24, r24
     2e0:	01 f5       	brne	.+64     	; 0x322 <main_thread_func+0xea>
	{
		status = atomThreadCreate(&graphics_tcb,
     2e2:	8b e0       	ldi	r24, 0x0B	; 11
     2e4:	97 e0       	ldi	r25, 0x07	; 7
     2e6:	63 e1       	ldi	r22, 0x13	; 19
     2e8:	4b e0       	ldi	r20, 0x0B	; 11
     2ea:	52 e0       	ldi	r21, 0x02	; 2
     2ec:	00 e0       	ldi	r16, 0x00	; 0
     2ee:	10 e0       	ldi	r17, 0x00	; 0
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	e6 ed       	ldi	r30, 0xD6	; 214
     2f6:	ee 2e       	mov	r14, r30
     2f8:	e8 e0       	ldi	r30, 0x08	; 8
     2fa:	fe 2e       	mov	r15, r30
     2fc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <atomThreadCreate>
                     GRAPHICS_THREAD_PRIO, graphics_thread_func, 0,
                     &graphics_stack[0],
                     STACK_SIZE_BYTES,
                     FALSE);
	}
	if(status==ATOM_OK)
     300:	88 23       	and	r24, r24
     302:	79 f4       	brne	.+30     	; 0x322 <main_thread_func+0xea>
	{
		status = atomThreadCreate(&SC_tcb,
     304:	8d e2       	ldi	r24, 0x2D	; 45
     306:	97 e0       	ldi	r25, 0x07	; 7
     308:	6a ef       	ldi	r22, 0xFA	; 250
     30a:	4d e2       	ldi	r20, 0x2D	; 45
     30c:	55 e0       	ldi	r21, 0x05	; 5
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	7e e6       	ldi	r23, 0x6E	; 110
     318:	e7 2e       	mov	r14, r23
     31a:	7a e0       	ldi	r23, 0x0A	; 10
     31c:	f7 2e       	mov	r15, r23
     31e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <atomThreadCreate>
                     FALSE);
	}
	// All threads created ok: run the main loop of the main thread
	while (1)
	{
		atomTimerDelay (2 * SYSTEM_TICKS_PER_SEC); // wait 2 sec
     322:	68 ec       	ldi	r22, 0xC8	; 200
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 22 0c 	call	0x1844	; 0x1844 <atomTimerDelay>
     32e:	f9 cf       	rjmp	.-14     	; 0x322 <main_thread_func+0xea>

00000330 <clock_disp_func>:

#include "st7565r.h"
#include "lab4.h"

void clock_disp_func (uint32_t data)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
//	TaskArrived(clock_disp_func);
	char *hello = "AtomClock v1.0";
	// Initialize LCD
	lcd_init();
     334:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_init>
	lcd_clear();
     338:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_clear>

	// First draw title line at top row
	lcd_moveto(0,10);
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	6a e0       	ldi	r22, 0x0A	; 10
     340:	0e 94 0f 04 	call	0x81e	; 0x81e <lcd_moveto>
     344:	ce e0       	ldi	r28, 0x0E	; 14
     346:	d2 e0       	ldi	r29, 0x02	; 2
     348:	02 c0       	rjmp	.+4      	; 0x34e <clock_disp_func+0x1e>
	for (int i = 0 ; hello[i] != 0 ; i++)
		lcd_putc(hello[i]);
     34a:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
	lcd_init();
	lcd_clear();

	// First draw title line at top row
	lcd_moveto(0,10);
	for (int i = 0 ; hello[i] != 0 ; i++)
     34e:	89 91       	ld	r24, Y+
     350:	88 23       	and	r24, r24
     352:	d9 f7       	brne	.-10     	; 0x34a <clock_disp_func+0x1a>
	{
	

		// Read global clock variables (protected by mutex lock)
		
		if (atomMutexGet(&clock_mutex, 0) == ATOM_OK) 
     354:	8e ed       	ldi	r24, 0xDE	; 222
     356:	90 e2       	ldi	r25, 0x20	; 32
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	50 e0       	ldi	r21, 0x00	; 0
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	0e 94 b7 0a 	call	0x156e	; 0x156e <atomMutexGet>
     364:	88 23       	and	r24, r24
     366:	09 f0       	breq	.+2      	; 0x36a <clock_disp_func+0x3a>
     368:	4b c0       	rjmp	.+150    	; 0x400 <clock_disp_func+0xd0>
		{
			if(atomMutexGet(&lcd_mutex,0)==ATOM_OK)
     36a:	83 ee       	ldi	r24, 0xE3	; 227
     36c:	90 e2       	ldi	r25, 0x20	; 32
     36e:	40 e0       	ldi	r20, 0x00	; 0
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	0e 94 b7 0a 	call	0x156e	; 0x156e <atomMutexGet>
     37a:	88 23       	and	r24, r24
     37c:	e9 f5       	brne	.+122    	; 0x3f8 <clock_disp_func+0xc8>
			{
				lcd_moveto(2,30);
     37e:	82 e0       	ldi	r24, 0x02	; 2
     380:	6e e1       	ldi	r22, 0x1E	; 30
     382:	0e 94 0f 04 	call	0x81e	; 0x81e <lcd_moveto>
				lcd_putc('0' + g_hour / 10);
     386:	80 91 e6 06 	lds	r24, 0x06E6
     38a:	6a e0       	ldi	r22, 0x0A	; 10
     38c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodqi4>
     390:	80 5d       	subi	r24, 0xD0	; 208
     392:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
				lcd_putc('0' + g_hour % 10);
     396:	80 91 e6 06 	lds	r24, 0x06E6
     39a:	6a e0       	ldi	r22, 0x0A	; 10
     39c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodqi4>
     3a0:	89 2f       	mov	r24, r25
     3a2:	80 5d       	subi	r24, 0xD0	; 208
     3a4:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
				lcd_putc(':');
     3a8:	8a e3       	ldi	r24, 0x3A	; 58
     3aa:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
				lcd_putc('0' + g_min / 10);
     3ae:	80 91 e7 06 	lds	r24, 0x06E7
     3b2:	6a e0       	ldi	r22, 0x0A	; 10
     3b4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodqi4>
     3b8:	80 5d       	subi	r24, 0xD0	; 208
     3ba:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
				lcd_putc('0' + g_min % 10);
     3be:	80 91 e7 06 	lds	r24, 0x06E7
     3c2:	6a e0       	ldi	r22, 0x0A	; 10
     3c4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodqi4>
     3c8:	89 2f       	mov	r24, r25
     3ca:	80 5d       	subi	r24, 0xD0	; 208
     3cc:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
				lcd_putc(':');
     3d0:	8a e3       	ldi	r24, 0x3A	; 58
     3d2:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
				lcd_putc('0' + g_sec / 10);
     3d6:	80 91 e8 06 	lds	r24, 0x06E8
     3da:	6a e0       	ldi	r22, 0x0A	; 10
     3dc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodqi4>
     3e0:	80 5d       	subi	r24, 0xD0	; 208
     3e2:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
				lcd_putc('0' + g_sec % 10);
     3e6:	80 91 e8 06 	lds	r24, 0x06E8
     3ea:	6a e0       	ldi	r22, 0x0A	; 10
     3ec:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodqi4>
     3f0:	89 2f       	mov	r24, r25
     3f2:	80 5d       	subi	r24, 0xD0	; 208
     3f4:	0e 94 ed 03 	call	0x7da	; 0x7da <lcd_putc>
			}
			atomMutexPut(&lcd_mutex);
     3f8:	83 ee       	ldi	r24, 0xE3	; 227
     3fa:	90 e2       	ldi	r25, 0x20	; 32
     3fc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <atomMutexPut>
		}
		atomMutexPut(&clock_mutex);
     400:	8e ed       	ldi	r24, 0xDE	; 222
     402:	90 e2       	ldi	r25, 0x20	; 32
     404:	0e 94 3c 0a 	call	0x1478	; 0x1478 <atomMutexPut>
		atomTimerDelay(10);
     408:	6a e0       	ldi	r22, 0x0A	; 10
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 22 0c 	call	0x1844	; 0x1844 <atomTimerDelay>
     414:	9f cf       	rjmp	.-194    	; 0x354 <clock_disp_func+0x24>

00000416 <graphics_thread_func>:
#include "lab4.h"

// Thread to draw a moving bar below the clock

void graphics_thread_func (uint32_t data)
{
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	10 e0       	ldi	r17, 0x00	; 0
     422:	c8 e2       	ldi	r28, 0x28	; 40
     424:	d0 e0       	ldi	r29, 0x00	; 0
	int c0 = 0;   // clear at this position
	int c1 = 40;  // fill at this position
	//atomTimerDelay(1000); // wait 1 sec to let clock_disp initialize LCD

	while(1) {
		if(atomMutexGet(&lcd_mutex,0)==ATOM_OK){
     426:	83 ee       	ldi	r24, 0xE3	; 227
     428:	90 e2       	ldi	r25, 0x20	; 32
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	0e 94 b7 0a 	call	0x156e	; 0x156e <atomMutexGet>
     436:	88 23       	and	r24, r24
     438:	d9 f4       	brne	.+54     	; 0x470 <graphics_thread_func+0x5a>
			lcd_moveto(4,c0);
     43a:	84 e0       	ldi	r24, 0x04	; 4
     43c:	60 2f       	mov	r22, r16
     43e:	0e 94 0f 04 	call	0x81e	; 0x81e <lcd_moveto>
			lcd_write(0);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	0e 94 89 02 	call	0x512	; 0x512 <lcd_write>
			lcd_moveto(4,c1);
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	6c 2f       	mov	r22, r28
     44c:	0e 94 0f 04 	call	0x81e	; 0x81e <lcd_moveto>
			lcd_write(0xff);
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	0e 94 89 02 	call	0x512	; 0x512 <lcd_write>

			c0++;
     456:	0f 5f       	subi	r16, 0xFF	; 255
     458:	1f 4f       	sbci	r17, 0xFF	; 255
			if (c0 > 127)
     45a:	00 38       	cpi	r16, 0x80	; 128
     45c:	11 05       	cpc	r17, r1
     45e:	14 f0       	brlt	.+4      	; 0x464 <graphics_thread_func+0x4e>
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	10 e0       	ldi	r17, 0x00	; 0
				c0 = 0;
			c1++;
     464:	21 96       	adiw	r28, 0x01	; 1
			if (c1 > 127)
     466:	c0 38       	cpi	r28, 0x80	; 128
     468:	d1 05       	cpc	r29, r1
     46a:	14 f0       	brlt	.+4      	; 0x470 <graphics_thread_func+0x5a>
     46c:	c0 e0       	ldi	r28, 0x00	; 0
     46e:	d0 e0       	ldi	r29, 0x00	; 0
				c1 = 0;
	//		_delay_ms(50); // busy wait 50 ms
	        
		}
		atomMutexPut(&lcd_mutex);		
     470:	83 ee       	ldi	r24, 0xE3	; 227
     472:	90 e2       	ldi	r25, 0x20	; 32
     474:	0e 94 3c 0a 	call	0x1478	; 0x1478 <atomMutexPut>
		atomTimerDelay (5);  // wait 50 ms
     478:	65 e0       	ldi	r22, 0x05	; 5
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 22 0c 	call	0x1844	; 0x1844 <atomTimerDelay>
     484:	d0 cf       	rjmp	.-96     	; 0x426 <graphics_thread_func+0x10>

00000486 <lcd_background_light>:
	lcd_cmd(DISPLAY_ON);
	LCD_CMD = LCD_CMD | LI; // background light on
}

void lcd_background_light(int on) {
	LCD_CMD = (on ? LCD_CMD | LI : LCD_CMD & ~LI);
     486:	89 2b       	or	r24, r25
     488:	19 f0       	breq	.+6      	; 0x490 <lcd_background_light+0xa>
     48a:	82 b1       	in	r24, 0x02	; 2
     48c:	80 62       	ori	r24, 0x20	; 32
     48e:	02 c0       	rjmp	.+4      	; 0x494 <lcd_background_light+0xe>
     490:	82 b1       	in	r24, 0x02	; 2
     492:	8f 7d       	andi	r24, 0xDF	; 223
     494:	82 b9       	out	0x02, r24	; 2
}
     496:	08 95       	ret

00000498 <lcd_cmd>:

void lcd_cmd(uint8_t cmd) {

	LCD_DATA_IODIR = 0xFF;
     498:	9f ef       	ldi	r25, 0xFF	; 255
     49a:	97 b9       	out	0x07, r25	; 7

	LCD_CMD = LCD_CMD & ~RS; // control data
     49c:	12 98       	cbi	0x02, 2	; 2
	LCD_CMD = LCD_CMD & ~RW; // write
     49e:	13 98       	cbi	0x02, 3	; 2
	LCD_CMD = LCD_CMD & ~CS; // accept data/commands
     4a0:	10 98       	cbi	0x02, 0	; 2
	LCD_CMD = LCD_CMD | E;
     4a2:	14 9a       	sbi	0x02, 4	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4a4:	95 e0       	ldi	r25, 0x05	; 5
     4a6:	29 2f       	mov	r18, r25
     4a8:	2a 95       	dec	r18
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <lcd_cmd+0x10>
	_delay_us(1); // 180 ns would be save (see page 62)
	LCD_DATA = cmd;
     4ac:	88 b9       	out	0x08, r24	; 8
     4ae:	9a 95       	dec	r25
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <lcd_cmd+0x16>
	_delay_us(1); // 40 ns would be save (see page 62)
	LCD_CMD = LCD_CMD & ~E;
     4b2:	14 98       	cbi	0x02, 4	; 2
	LCD_DATA = 0x00; // default state
     4b4:	18 b8       	out	0x08, r1	; 8
	LCD_CMD = LCD_CMD | CS; // do not accept further data/commands
     4b6:	10 9a       	sbi	0x02, 0	; 2
	LCD_CMD = LCD_CMD | RW; // read
     4b8:	13 9a       	sbi	0x02, 3	; 2
	LCD_CMD = LCD_CMD | RS; // display data
     4ba:	12 9a       	sbi	0x02, 2	; 2

	LCD_DATA_IODIR = 0x00;
     4bc:	17 b8       	out	0x07, r1	; 7
}
     4be:	08 95       	ret

000004c0 <lcd_init>:


void lcd_init() {

	/* Port A set to output (high impedance) */
	LCD_CMD_IODIR = 0xFF;
     4c0:	8f ef       	ldi	r24, 0xFF	; 255
     4c2:	81 b9       	out	0x01, r24	; 1

	/* Predefine state after hardware reset */
	LCD_CMD = LCD_CMD & ~LI; // background light off
     4c4:	15 98       	cbi	0x02, 5	; 2
	LCD_CMD = LCD_CMD | PS; // parallel
     4c6:	17 9a       	sbi	0x02, 7	; 2
	LCD_CMD = LCD_CMD | CS; // do not accept data/commands
     4c8:	10 9a       	sbi	0x02, 0	; 2
	LCD_CMD = LCD_CMD | MI; // 6800 MPU interface
     4ca:	16 9a       	sbi	0x02, 6	; 2
	LCD_CMD = LCD_CMD & ~E; // impulse is low
     4cc:	14 98       	cbi	0x02, 4	; 2

	/* Hardware reset */
	LCD_CMD = LCD_CMD & ~RST;
     4ce:	11 98       	cbi	0x02, 1	; 2
     4d0:	8a e0       	ldi	r24, 0x0A	; 10
     4d2:	98 2f       	mov	r25, r24
     4d4:	9a 95       	dec	r25
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <lcd_init+0x14>
	_delay_us(2);
	LCD_CMD = LCD_CMD | RST;
     4d8:	11 9a       	sbi	0x02, 1	; 2
     4da:	8a 95       	dec	r24
     4dc:	f1 f7       	brne	.-4      	; 0x4da <lcd_init+0x1a>
	_delay_us(2); // 2 us are save (see page 65)

	/* Display settings */
	lcd_cmd(ADC_NORMAL);
     4de:	80 ea       	ldi	r24, 0xA0	; 160
     4e0:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
	lcd_cmd(BIAS_1_9);
     4e4:	82 ea       	ldi	r24, 0xA2	; 162
     4e6:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
	lcd_cmd(SCAN_DIR_REVERSE);
     4ea:	88 ec       	ldi	r24, 0xC8	; 200
     4ec:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>

	/* Contrast settings */
	lcd_cmd(INTERNAL_RRATIO | (INTERNAL_RRATIO_MASK & 0x07));
     4f0:	87 e2       	ldi	r24, 0x27	; 39
     4f2:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
	lcd_cmd(INTERNAL_RRATIO_MOD);
     4f6:	81 e8       	ldi	r24, 0x81	; 129
     4f8:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
	lcd_cmd(INTERNAL_RRATIO_VOL | (INTERNAL_RRATIO_VOL_MASK & 0x00));
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>

	/* Power supply settings */
	lcd_cmd(INTERNAL_POWER | (INTERNAL_POWER_MASK & 0x07));
     502:	8f e2       	ldi	r24, 0x2F	; 47
     504:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>

	lcd_cmd(DISPLAY_ON);
     508:	8f ea       	ldi	r24, 0xAF	; 175
     50a:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
	LCD_CMD = LCD_CMD | LI; // background light on
     50e:	15 9a       	sbi	0x02, 5	; 2
}
     510:	08 95       	ret

00000512 <lcd_write>:
	LCD_DATA_IODIR = 0x00;
}

void lcd_write(uint8_t data) {

	LCD_DATA_IODIR = 0xFF; // configure LCD_DATA IOs as output
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	97 b9       	out	0x07, r25	; 7

	LCD_CMD = LCD_CMD | RS; // display data
     516:	12 9a       	sbi	0x02, 2	; 2
	LCD_CMD = LCD_CMD & ~RW; // write
     518:	13 98       	cbi	0x02, 3	; 2
	LCD_CMD = LCD_CMD & ~CS; // accept data/commands
     51a:	10 98       	cbi	0x02, 0	; 2
	LCD_CMD = LCD_CMD | E;
     51c:	14 9a       	sbi	0x02, 4	; 2
     51e:	95 e0       	ldi	r25, 0x05	; 5
     520:	29 2f       	mov	r18, r25
     522:	2a 95       	dec	r18
     524:	f1 f7       	brne	.-4      	; 0x522 <lcd_write+0x10>
	_delay_us(1); // 180 ns would be save (see page 62)
	LCD_DATA = data;
     526:	88 b9       	out	0x08, r24	; 8
     528:	9a 95       	dec	r25
     52a:	f1 f7       	brne	.-4      	; 0x528 <lcd_write+0x16>
	_delay_us(1); // 40 ns would be save (see page 62)
	LCD_CMD = LCD_CMD & ~E;
     52c:	14 98       	cbi	0x02, 4	; 2
	LCD_DATA = 0x00; // default state
     52e:	18 b8       	out	0x08, r1	; 8
	LCD_CMD = LCD_CMD | CS; // do not accept further data/commands
     530:	10 9a       	sbi	0x02, 0	; 2
	LCD_CMD = LCD_CMD | RW; // read
     532:	13 9a       	sbi	0x02, 3	; 2
	LCD_CMD = LCD_CMD | RS; // display data
     534:	12 9a       	sbi	0x02, 2	; 2

	LCD_DATA_IODIR = 0x00; // configure LCD_DATA IOs as intput
     536:	17 b8       	out	0x07, r1	; 7
}
     538:	08 95       	ret

0000053a <lcd_read_dummy>:

void lcd_read_dummy(void) {

	//lcd_set_port_read(  );
	LCD_DATA_IODIR = 0x00;
     53a:	17 b8       	out	0x07, r1	; 7

  	LCD_CMD = LCD_CMD | RS; // display data
     53c:	12 9a       	sbi	0x02, 2	; 2
  	LCD_CMD = LCD_CMD | RW; // read
     53e:	13 9a       	sbi	0x02, 3	; 2
  	LCD_CMD = LCD_CMD & ~CS; // accept data/commands
     540:	10 98       	cbi	0x02, 0	; 2
  	LCD_CMD = LCD_CMD | E;
     542:	14 9a       	sbi	0x02, 4	; 2
  //	_delay_us(1); // 140 ns would be save (see page 62)
  	LCD_CMD = LCD_CMD & ~E;
     544:	14 98       	cbi	0x02, 4	; 2
  //	_delay_us(1); // 40 ns would be save (see page 62)

  	LCD_CMD = LCD_CMD | CS; // do not accept further data/commands
     546:	10 9a       	sbi	0x02, 0	; 2
  	LCD_CMD = LCD_CMD | RW; // read
     548:	13 9a       	sbi	0x02, 3	; 2
  	LCD_CMD = LCD_CMD | RS; // display data
     54a:	12 9a       	sbi	0x02, 2	; 2
}
     54c:	08 95       	ret

0000054e <lcd_read>:

uint8_t lcd_read() {

	uint8_t data = 0x00;

	lcd_read_dummy();
     54e:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_read_dummy>

	LCD_DATA = 0xFF;
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	88 b9       	out	0x08, r24	; 8
    LCD_DATA_IODIR  = 0x00;
     556:	17 b8       	out	0x07, r1	; 7

	LCD_CMD = LCD_CMD | RS; // display data
     558:	12 9a       	sbi	0x02, 2	; 2
	LCD_CMD = LCD_CMD | RW; // read
     55a:	13 9a       	sbi	0x02, 3	; 2
	LCD_CMD = LCD_CMD & ~CS; // accept data/commands
     55c:	10 98       	cbi	0x02, 0	; 2
	LCD_CMD = LCD_CMD | E;
     55e:	14 9a       	sbi	0x02, 4	; 2
//	_delay_us(1); // 140 ns would be save (see page 62)

	LCD_CMD = LCD_CMD & ~E;
     560:	14 98       	cbi	0x02, 4	; 2

//	_delay_us(1); // 40 ns would be save (see page 62)
	data = LCD_DATA_IN;// LCD_DATA;
     562:	86 b1       	in	r24, 0x06	; 6
	LCD_CMD = LCD_CMD | CS; // do not accept further data/commands
     564:	10 9a       	sbi	0x02, 0	; 2
	LCD_CMD = LCD_CMD | RW; // read
     566:	13 9a       	sbi	0x02, 3	; 2
	LCD_CMD = LCD_CMD | RS; // display data
     568:	12 9a       	sbi	0x02, 2	; 2

	LCD_DATA = 0x00;
     56a:	18 b8       	out	0x08, r1	; 8

	return data;
}
     56c:	08 95       	ret

0000056e <lcd_status>:

uint8_t lcd_status() {

	return 0;
}
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 95       	ret

00000572 <show_icon>:
void show_icon(const uint8_t *bitmap,
					 uint8_t w,
					 uint8_t h,
					 uint8_t x,
					 uint8_t y,
					 uint8_t mode) {
     572:	2f 92       	push	r2
     574:	3f 92       	push	r3
     576:	4f 92       	push	r4
     578:	5f 92       	push	r5
     57a:	6f 92       	push	r6
     57c:	7f 92       	push	r7
     57e:	8f 92       	push	r8
     580:	9f 92       	push	r9
     582:	af 92       	push	r10
     584:	bf 92       	push	r11
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	2e 97       	sbiw	r28, 0x0e	; 14
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	fc 01       	movw	r30, r24
     5a8:	6b 87       	std	Y+11, r22	; 0x0b
     5aa:	2c 87       	std	Y+12, r18	; 0x0c
	uint8_t j = 0u;

	uint8_t pageloops = 0u;

	//wenn y nicht ganzahlig teilbar durch 8
	offset_top = (uint8_t) (y % 8u);
     5ac:	20 2f       	mov	r18, r16
     5ae:	27 70       	andi	r18, 0x07	; 7
     5b0:	28 87       	std	Y+8, r18	; 0x08

	//
	offset_bottom = 8u-(y+h)%8u;
     5b2:	80 2f       	mov	r24, r16
     5b4:	84 0f       	add	r24, r20
     5b6:	87 70       	andi	r24, 0x07	; 7
     5b8:	58 e0       	ldi	r21, 0x08	; 8
     5ba:	d5 2e       	mov	r13, r21
     5bc:	d8 1a       	sub	r13, r24
	if (offset_bottom == 8u)
     5be:	38 e0       	ldi	r19, 0x08	; 8
     5c0:	d3 16       	cp	r13, r19
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <show_icon+0x54>
     5c4:	dd 24       	eor	r13, r13
	{
		offset_bottom = 0u;
	}

	//calculate loop, how many pages are needed
	pageloops = (uint8_t) (h/8u);
     5c6:	84 2f       	mov	r24, r20
     5c8:	86 95       	lsr	r24
     5ca:	86 95       	lsr	r24
     5cc:	86 95       	lsr	r24
     5ce:	89 83       	std	Y+1, r24	; 0x01
	hi8 = (uint8_t) (h/8u);

	if ((h%8u)!=0u)
     5d0:	84 2f       	mov	r24, r20
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	87 70       	andi	r24, 0x07	; 7
     5d6:	90 70       	andi	r25, 0x00	; 0
     5d8:	89 2b       	or	r24, r25
     5da:	19 f4       	brne	.+6      	; 0x5e2 <show_icon+0x70>
     5dc:	99 81       	ldd	r25, Y+1	; 0x01
     5de:	9e 83       	std	Y+6, r25	; 0x06
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <show_icon+0x76>
	{
		pageloops++;
     5e2:	a9 81       	ldd	r26, Y+1	; 0x01
     5e4:	af 5f       	subi	r26, 0xFF	; 255
     5e6:	ae 83       	std	Y+6, r26	; 0x06
	}
	//calculate loop inc
	if ((y%8)!=0u)
     5e8:	20 2f       	mov	r18, r16
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	27 70       	andi	r18, 0x07	; 7
     5ee:	30 70       	andi	r19, 0x00	; 0
     5f0:	21 15       	cp	r18, r1
     5f2:	31 05       	cpc	r19, r1
     5f4:	51 f0       	breq	.+20     	; 0x60a <show_icon+0x98>
	{
		if ((y%8)>(h%8))
     5f6:	84 2f       	mov	r24, r20
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	87 70       	andi	r24, 0x07	; 7
     5fc:	90 70       	andi	r25, 0x00	; 0
     5fe:	82 17       	cp	r24, r18
     600:	93 07       	cpc	r25, r19
     602:	1c f4       	brge	.+6      	; 0x60a <show_icon+0x98>
		{
			pageloops++;
     604:	be 81       	ldd	r27, Y+6	; 0x06
     606:	bf 5f       	subi	r27, 0xFF	; 255
     608:	be 83       	std	Y+6, r27	; 0x06
				//addressierung evtl. rausziehbar, da beim naechsten lesen naechste spalte ist
				lcd_cmd(COLUMN_ADDRESS_LOW | (COLUMN_ADDRESS_MASK & (uint8_t)(x+j)));  //column offset lower
				lcd_cmd(COLUMN_ADDRESS_HIGH | (COLUMN_ADDRESS_MASK & (uint8_t)(uint8_t)((x+j)>>4))); //column offset higher

				//nehme n bits von page (y / 8u)+i
				lcd_cmd(PAGE_ADDRESS | (PAGE_ADDRESS_MASK & ((y/8u)+i)));		//row in 8th
     60a:	06 95       	lsr	r16
     60c:	06 95       	lsr	r16
     60e:	06 95       	lsr	r16
     610:	0a 87       	std	Y+10, r16	; 0x0a
     612:	20 2f       	mov	r18, r16
     614:	2f 70       	andi	r18, 0x0F	; 15
     616:	20 6b       	ori	r18, 0xB0	; 176
     618:	29 87       	std	Y+9, r18	; 0x09
     61a:	9b 85       	ldd	r25, Y+11	; 0x0b
     61c:	89 2f       	mov	r24, r25
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	9b 83       	std	Y+3, r25	; 0x03
     622:	8a 83       	std	Y+2, r24	; 0x02
     624:	df 01       	movw	r26, r30
     626:	a8 1b       	sub	r26, r24
     628:	b9 0b       	sbc	r27, r25
     62a:	bd 83       	std	Y+5, r27	; 0x05
     62c:	ac 83       	std	Y+4, r26	; 0x04
     62e:	1f 01       	movw	r2, r30
     630:	ee 24       	eor	r14, r14
     632:	ff 24       	eor	r15, r15
			if (i==0u)
			{

				//addressierung evtl. rausziehbar, da beim naechsten lesen naechste spalte ist
				lcd_cmd(COLUMN_ADDRESS_LOW | (COLUMN_ADDRESS_MASK & (uint8_t)(x+j)));  //column offset lower
				lcd_cmd(COLUMN_ADDRESS_HIGH | (COLUMN_ADDRESS_MASK & (uint8_t)(uint8_t)((x+j)>>4))); //column offset higher
     634:	bc 85       	ldd	r27, Y+12	; 0x0c
     636:	6b 2e       	mov	r6, r27
     638:	77 24       	eor	r7, r7

		currentByte |= currentByteTop; //add top part

		if (offset_bottom != 0u) {
			//if it is last page
			if (i == (pageloops-1u))
     63a:	ee 81       	ldd	r30, Y+6	; 0x06
     63c:	4e 2e       	mov	r4, r30
     63e:	55 24       	eor	r5, r5
     640:	08 94       	sec
     642:	41 08       	sbc	r4, r1
     644:	51 08       	sbc	r5, r1
     646:	a0 c0       	rjmp	.+320    	; 0x788 <show_icon+0x216>
	  //j for width
      for (j = 0u; j<w; j++)
      {
    	  currentByte = 0u;
    	  currentByteTop = 0u;
		if (offset_top != 0u) {
     648:	f8 85       	ldd	r31, Y+8	; 0x08
     64a:	ff 23       	and	r31, r31
     64c:	11 f4       	brne	.+4      	; 0x652 <show_icon+0xe0>
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	2b c0       	rjmp	.+86     	; 0x6a8 <show_icon+0x136>
			//wenn es die erste zeile ist, die zu zeichnen ist
			if (i==0u)
     652:	2f 81       	ldd	r18, Y+7	; 0x07
     654:	22 23       	and	r18, r18
     656:	f1 f4       	brne	.+60     	; 0x694 <show_icon+0x122>
			{

				//addressierung evtl. rausziehbar, da beim naechsten lesen naechste spalte ist
				lcd_cmd(COLUMN_ADDRESS_LOW | (COLUMN_ADDRESS_MASK & (uint8_t)(x+j)));  //column offset lower
     658:	8c 2d       	mov	r24, r12
     65a:	8f 70       	andi	r24, 0x0F	; 15
     65c:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
				lcd_cmd(COLUMN_ADDRESS_HIGH | (COLUMN_ADDRESS_MASK & (uint8_t)(uint8_t)((x+j)>>4))); //column offset higher
     660:	8d 85       	ldd	r24, Y+13	; 0x0d
     662:	9e 85       	ldd	r25, Y+14	; 0x0e
     664:	86 0d       	add	r24, r6
     666:	97 1d       	adc	r25, r7
     668:	44 e0       	ldi	r20, 0x04	; 4
     66a:	95 95       	asr	r25
     66c:	87 95       	ror	r24
     66e:	4a 95       	dec	r20
     670:	e1 f7       	brne	.-8      	; 0x66a <show_icon+0xf8>
     672:	8f 70       	andi	r24, 0x0F	; 15
     674:	80 61       	ori	r24, 0x10	; 16
     676:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>

				//nehme n bits von page (y / 8u)+i
				lcd_cmd(PAGE_ADDRESS | (PAGE_ADDRESS_MASK & ((y/8u)+i)));		//row in 8th
     67a:	89 85       	ldd	r24, Y+9	; 0x09
     67c:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
				currentByteTop = lcd_read();
     680:	0e 94 a7 02 	call	0x54e	; 0x54e <lcd_read>

				//zero new pixel for merge
				currentByteTop = (uint8_t) (currentByteTop << offset_bottom);
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0d 2c       	mov	r0, r13
     688:	02 c0       	rjmp	.+4      	; 0x68e <show_icon+0x11c>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	0a 94       	dec	r0
     690:	e2 f7       	brpl	.-8      	; 0x68a <show_icon+0x118>
     692:	02 c0       	rjmp	.+4      	; 0x698 <show_icon+0x126>

			}
			else
			{
			//else use pixel of bitmap's previous pageline
			currentByteTop = (uint8_t)((bitmap[(i-1u)*w+j]) >> offset_bottom);
     694:	d5 01       	movw	r26, r10
     696:	8c 91       	ld	r24, X
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0d 2c       	mov	r0, r13
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <show_icon+0x130>
     69e:	95 95       	asr	r25
     6a0:	87 95       	ror	r24
     6a2:	0a 94       	dec	r0
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <show_icon+0x12c>
     6a6:	98 2f       	mov	r25, r24
			}
		}

		//if not overflow pageloop
		if (i!=hi8)
     6a8:	bf 81       	ldd	r27, Y+7	; 0x07
     6aa:	e9 81       	ldd	r30, Y+1	; 0x01
     6ac:	be 17       	cp	r27, r30
     6ae:	11 f4       	brne	.+4      	; 0x6b4 <show_icon+0x142>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	07 c0       	rjmp	.+14     	; 0x6c2 <show_icon+0x150>
		{   //use byte of bitmap and shift with offset_top
			currentByte = (uint8_t)(bitmap[(i)*w+j]);
			currentByte = (uint8_t)(currentByte << offset_top);
     6b4:	d4 01       	movw	r26, r8
     6b6:	8c 91       	ld	r24, X
     6b8:	08 84       	ldd	r0, Y+8	; 0x08
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <show_icon+0x14c>
     6bc:	88 0f       	add	r24, r24
     6be:	0a 94       	dec	r0
     6c0:	ea f7       	brpl	.-6      	; 0x6bc <show_icon+0x14a>
		}

		currentByte |= currentByteTop; //add top part
     6c2:	18 2f       	mov	r17, r24
     6c4:	19 2b       	or	r17, r25

		if (offset_bottom != 0u) {
     6c6:	dd 20       	and	r13, r13
     6c8:	31 f1       	breq	.+76     	; 0x716 <show_icon+0x1a4>
			//if it is last page
			if (i == (pageloops-1u))
     6ca:	e4 14       	cp	r14, r4
     6cc:	f5 04       	cpc	r15, r5
     6ce:	19 f5       	brne	.+70     	; 0x716 <show_icon+0x1a4>
			{

			// use pixel of last page
			lcd_cmd(COLUMN_ADDRESS_LOW | (COLUMN_ADDRESS_MASK & (uint8_t)(x+j)));  //column offset lower
     6d0:	8c 2d       	mov	r24, r12
     6d2:	8f 70       	andi	r24, 0x0F	; 15
     6d4:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
			lcd_cmd(COLUMN_ADDRESS_HIGH | (COLUMN_ADDRESS_MASK & (uint8_t)(uint8_t)((x+j)>>4))); //column offset higher
     6d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     6da:	9e 85       	ldd	r25, Y+14	; 0x0e
     6dc:	86 0d       	add	r24, r6
     6de:	97 1d       	adc	r25, r7
     6e0:	34 e0       	ldi	r19, 0x04	; 4
     6e2:	95 95       	asr	r25
     6e4:	87 95       	ror	r24
     6e6:	3a 95       	dec	r19
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <show_icon+0x170>
     6ea:	8f 70       	andi	r24, 0x0F	; 15
     6ec:	80 61       	ori	r24, 0x10	; 16
     6ee:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
			lcd_cmd(PAGE_ADDRESS | (PAGE_ADDRESS_MASK & ((y/8u)+i)));		//row in 8th
     6f2:	80 2f       	mov	r24, r16
     6f4:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
			pageByte = lcd_read();
     6f8:	0e 94 a7 02 	call	0x54e	; 0x54e <lcd_read>

			//loesche offset_top bits
             pageByte = (uint8_t) (pageByte >> offset_top);  //shift down bits
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	08 84       	ldd	r0, Y+8	; 0x08
     700:	02 c0       	rjmp	.+4      	; 0x706 <show_icon+0x194>
     702:	95 95       	asr	r25
     704:	87 95       	ror	r24
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <show_icon+0x190>
             pageByte = (uint8_t) (pageByte << offset_top);  //shift up bits and fill with zero
     70a:	08 84       	ldd	r0, Y+8	; 0x08
     70c:	01 c0       	rjmp	.+2      	; 0x710 <show_icon+0x19e>
     70e:	88 0f       	add	r24, r24
     710:	0a 94       	dec	r0
     712:	ea f7       	brpl	.-6      	; 0x70e <show_icon+0x19c>

             //merge with currentByte
             currentByte |= pageByte;
     714:	18 2b       	or	r17, r24
			}

		}

		//write to display
		lcd_cmd(COLUMN_ADDRESS_LOW | (COLUMN_ADDRESS_MASK & (uint8_t)(x+j)));
     716:	8c 2d       	mov	r24, r12
     718:	8f 70       	andi	r24, 0x0F	; 15
     71a:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
		lcd_cmd(COLUMN_ADDRESS_HIGH | (COLUMN_ADDRESS_MASK & (uint8_t)((x+j)>>4)));
     71e:	8d 85       	ldd	r24, Y+13	; 0x0d
     720:	9e 85       	ldd	r25, Y+14	; 0x0e
     722:	86 0d       	add	r24, r6
     724:	97 1d       	adc	r25, r7
     726:	24 e0       	ldi	r18, 0x04	; 4
     728:	95 95       	asr	r25
     72a:	87 95       	ror	r24
     72c:	2a 95       	dec	r18
     72e:	e1 f7       	brne	.-8      	; 0x728 <show_icon+0x1b6>
     730:	8f 70       	andi	r24, 0x0F	; 15
     732:	80 61       	ori	r24, 0x10	; 16
     734:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>

		lcd_cmd(PAGE_ADDRESS | (PAGE_ADDRESS_MASK & ((y/8u)+i)));
     738:	80 2f       	mov	r24, r16
     73a:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
		lcd_write(currentByte);
     73e:	81 2f       	mov	r24, r17
     740:	0e 94 89 02 	call	0x512	; 0x512 <lcd_write>
     744:	ed 85       	ldd	r30, Y+13	; 0x0d
     746:	fe 85       	ldd	r31, Y+14	; 0x0e
     748:	31 96       	adiw	r30, 0x01	; 1
     74a:	fe 87       	std	Y+14, r31	; 0x0e
     74c:	ed 87       	std	Y+13, r30	; 0x0d
     74e:	c3 94       	inc	r12
     750:	08 94       	sec
     752:	81 1c       	adc	r8, r1
     754:	91 1c       	adc	r9, r1
     756:	08 94       	sec
     758:	a1 1c       	adc	r10, r1
     75a:	b1 1c       	adc	r11, r1

	//i for pages
	for (i = 0u; (i < 8u) && (i < pageloops); i++)
	{
	  //j for width
      for (j = 0u; j<w; j++)
     75c:	fb 85       	ldd	r31, Y+11	; 0x0b
     75e:	2d 85       	ldd	r18, Y+13	; 0x0d
     760:	2f 17       	cp	r18, r31
     762:	08 f4       	brcc	.+2      	; 0x766 <show_icon+0x1f4>
     764:	71 cf       	rjmp	.-286    	; 0x648 <show_icon+0xd6>
     766:	08 94       	sec
     768:	e1 1c       	adc	r14, r1
     76a:	f1 1c       	adc	r15, r1
     76c:	8c 81       	ldd	r24, Y+4	; 0x04
     76e:	9d 81       	ldd	r25, Y+5	; 0x05
     770:	aa 81       	ldd	r26, Y+2	; 0x02
     772:	bb 81       	ldd	r27, Y+3	; 0x03
     774:	8a 0f       	add	r24, r26
     776:	9b 1f       	adc	r25, r27
     778:	9d 83       	std	Y+5, r25	; 0x05
     77a:	8c 83       	std	Y+4, r24	; 0x04
     77c:	2a 0e       	add	r2, r26
     77e:	3b 1e       	adc	r3, r27
			pageloops++;
		}
	}

	//i for pages
	for (i = 0u; (i < 8u) && (i < pageloops); i++)
     780:	b8 e0       	ldi	r27, 0x08	; 8
     782:	eb 16       	cp	r14, r27
     784:	f1 04       	cpc	r15, r1
     786:	81 f0       	breq	.+32     	; 0x7a8 <show_icon+0x236>
     788:	ef 82       	std	Y+7, r14	; 0x07
     78a:	fe 81       	ldd	r31, Y+6	; 0x06
     78c:	ef 16       	cp	r14, r31
     78e:	60 f4       	brcc	.+24     	; 0x7a8 <show_icon+0x236>
			{

			// use pixel of last page
			lcd_cmd(COLUMN_ADDRESS_LOW | (COLUMN_ADDRESS_MASK & (uint8_t)(x+j)));  //column offset lower
			lcd_cmd(COLUMN_ADDRESS_HIGH | (COLUMN_ADDRESS_MASK & (uint8_t)(uint8_t)((x+j)>>4))); //column offset higher
			lcd_cmd(PAGE_ADDRESS | (PAGE_ADDRESS_MASK & ((y/8u)+i)));		//row in 8th
     790:	0e 2d       	mov	r16, r14
     792:	2a 85       	ldd	r18, Y+10	; 0x0a
     794:	02 0f       	add	r16, r18
     796:	0f 70       	andi	r16, 0x0F	; 15
     798:	00 6b       	ori	r16, 0xB0	; 176
     79a:	cc 84       	ldd	r12, Y+12	; 0x0c
     79c:	41 01       	movw	r8, r2
     79e:	ac 80       	ldd	r10, Y+4	; 0x04
     7a0:	bd 80       	ldd	r11, Y+5	; 0x05
     7a2:	1e 86       	std	Y+14, r1	; 0x0e
     7a4:	1d 86       	std	Y+13, r1	; 0x0d
     7a6:	da cf       	rjmp	.-76     	; 0x75c <show_icon+0x1ea>
		lcd_cmd(PAGE_ADDRESS | (PAGE_ADDRESS_MASK & ((y/8u)+i)));
		lcd_write(currentByte);

      }
	}
}
     7a8:	2e 96       	adiw	r28, 0x0e	; 14
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	cf 91       	pop	r28
     7b6:	df 91       	pop	r29
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	08 95       	ret

000007da <lcd_putc>:

void lcd_putc(uint8_t c) {
     7da:	0f 93       	push	r16
     7dc:	1f 93       	push	r17
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29

	uint8_t column = 0;

	if (c < 32)
     7e2:	80 32       	cpi	r24, 0x20	; 32
     7e4:	b8 f0       	brcs	.+46     	; 0x814 <lcd_putc+0x3a>
		return;
	else if (c > 126)
     7e6:	8f 37       	cpi	r24, 0x7F	; 127
     7e8:	a8 f4       	brcc	.+42     	; 0x814 <lcd_putc+0x3a>
		return;
	else {
		c = c - 32;
     7ea:	80 52       	subi	r24, 0x20	; 32
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	73 e0       	ldi	r23, 0x03	; 3
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	7a 95       	dec	r23
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <lcd_putc+0x16>
     7f8:	8c 01       	movw	r16, r24
     7fa:	03 5e       	subi	r16, 0xE3	; 227
     7fc:	1d 4f       	sbci	r17, 0xFD	; 253
		for (column = 0; column < sizeof(font[0]); column++) {
     7fe:	ec 01       	movw	r28, r24
     800:	cb 5d       	subi	r28, 0xDB	; 219
     802:	dd 4f       	sbci	r29, 0xFD	; 253
			lcd_write(font[c][column]);
     804:	f8 01       	movw	r30, r16
     806:	81 91       	ld	r24, Z+
     808:	8f 01       	movw	r16, r30
     80a:	0e 94 89 02 	call	0x512	; 0x512 <lcd_write>
		return;
	else if (c > 126)
		return;
	else {
		c = c - 32;
		for (column = 0; column < sizeof(font[0]); column++) {
     80e:	0c 17       	cp	r16, r28
     810:	1d 07       	cpc	r17, r29
     812:	c1 f7       	brne	.-16     	; 0x804 <lcd_putc+0x2a>
			lcd_write(font[c][column]);
		}
	}
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <lcd_moveto>:

void lcd_moveto(uint8_t row, uint8_t col)
{
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	08 2f       	mov	r16, r24
     824:	16 2f       	mov	r17, r22
	lcd_cmd(COLUMN_ADDRESS_LOW | (COLUMN_ADDRESS_MASK & col));
     826:	86 2f       	mov	r24, r22
     828:	8f 70       	andi	r24, 0x0F	; 15
     82a:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
	lcd_cmd(COLUMN_ADDRESS_HIGH | (COLUMN_ADDRESS_MASK & (col >> 4)));
     82e:	12 95       	swap	r17
     830:	1f 70       	andi	r17, 0x0F	; 15
     832:	81 2f       	mov	r24, r17
     834:	80 61       	ori	r24, 0x10	; 16
     836:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
	lcd_cmd(PAGE_ADDRESS | (PAGE_ADDRESS_MASK & row));
     83a:	0f 70       	andi	r16, 0x0F	; 15
     83c:	80 2f       	mov	r24, r16
     83e:	80 6b       	ori	r24, 0xB0	; 176
     840:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
}
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <lcd_clear>:

void lcd_clear(void)
{
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
	uint8_t column = 0;
	uint8_t page = 0;

	lcd_cmd(START_LINE | (START_LINE_MASK & 0x00));
     84e:	80 e4       	ldi	r24, 0x40	; 64
     850:	0e 94 4c 02 	call	0x498	; 0x498 <lcd_cmd>
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	0d c0       	rjmp	.+26     	; 0x872 <lcd_clear+0x28>

	for(page = 0; page < 9; page++) {
		for(column = 0; column < 128; column++)
			lcd_write(0x00);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 89 02 	call	0x512	; 0x512 <lcd_write>
	uint8_t page = 0;

	lcd_cmd(START_LINE | (START_LINE_MASK & 0x00));

	for(page = 0; page < 9; page++) {
		for(column = 0; column < 128; column++)
     85e:	1f 5f       	subi	r17, 0xFF	; 255
     860:	10 38       	cpi	r17, 0x80	; 128
     862:	d1 f7       	brne	.-12     	; 0x858 <lcd_clear+0xe>
			lcd_write(0x00);
		lcd_moveto(page, 0x00);
     864:	80 2f       	mov	r24, r16
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	0e 94 0f 04 	call	0x81e	; 0x81e <lcd_moveto>
	uint8_t column = 0;
	uint8_t page = 0;

	lcd_cmd(START_LINE | (START_LINE_MASK & 0x00));

	for(page = 0; page < 9; page++) {
     86c:	0f 5f       	subi	r16, 0xFF	; 255
     86e:	09 30       	cpi	r16, 0x09	; 9
     870:	11 f0       	breq	.+4      	; 0x876 <lcd_clear+0x2c>
     872:	10 e0       	ldi	r17, 0x00	; 0
     874:	f1 cf       	rjmp	.-30     	; 0x858 <lcd_clear+0xe>
		for(column = 0; column < 128; column++)
			lcd_write(0x00);
		lcd_moveto(page, 0x00);
	}
}
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <clock_update_func>:

void clock_update_func (uint32_t data)
{
	while(1) {
		// Increment time (global variables protected by mutex lock)
		if (atomMutexGet(&clock_mutex, 0) == ATOM_OK) {
     87c:	8e ed       	ldi	r24, 0xDE	; 222
     87e:	90 e2       	ldi	r25, 0x20	; 32
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	0e 94 b7 0a 	call	0x156e	; 0x156e <atomMutexGet>
     88c:	88 23       	and	r24, r24
     88e:	d9 f4       	brne	.+54     	; 0x8c6 <clock_update_func+0x4a>

			g_sec++;
     890:	80 91 e8 06 	lds	r24, 0x06E8
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	80 93 e8 06 	sts	0x06E8, r24
			if (g_sec > 59) {
     89a:	8c 33       	cpi	r24, 0x3C	; 60
     89c:	a0 f0       	brcs	.+40     	; 0x8c6 <clock_update_func+0x4a>
				g_sec = 0;
     89e:	10 92 e8 06 	sts	0x06E8, r1
				g_min++;
     8a2:	80 91 e7 06 	lds	r24, 0x06E7
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 e7 06 	sts	0x06E7, r24
				if (g_min > 59) {
     8ac:	8c 33       	cpi	r24, 0x3C	; 60
     8ae:	58 f0       	brcs	.+22     	; 0x8c6 <clock_update_func+0x4a>
					g_min = 0;
     8b0:	10 92 e7 06 	sts	0x06E7, r1
					g_hour++;
     8b4:	80 91 e6 06 	lds	r24, 0x06E6
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	80 93 e6 06 	sts	0x06E6, r24
					if (g_hour > 23)
     8be:	88 31       	cpi	r24, 0x18	; 24
     8c0:	10 f0       	brcs	.+4      	; 0x8c6 <clock_update_func+0x4a>
						g_hour = 0;
     8c2:	10 92 e6 06 	sts	0x06E6, r1
				}
			}
			
		}
		atomMutexPut(&clock_mutex);
     8c6:	8e ed       	ldi	r24, 0xDE	; 222
     8c8:	90 e2       	ldi	r25, 0x20	; 32
     8ca:	0e 94 3c 0a 	call	0x1478	; 0x1478 <atomMutexPut>
		atomTimerDelay(100);
     8ce:	64 e6       	ldi	r22, 0x64	; 100
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 22 0c 	call	0x1844	; 0x1844 <atomTimerDelay>
     8da:	d0 cf       	rjmp	.-96     	; 0x87c <clock_update_func>

000008dc <UpdateMin>:
	}
}

void UpdateMin()
{
	g_min++;
     8dc:	80 91 e7 06 	lds	r24, 0x06E7
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 93 e7 06 	sts	0x06E7, r24
	if (g_min > 59)
     8e6:	8c 33       	cpi	r24, 0x3C	; 60
     8e8:	10 f0       	brcs	.+4      	; 0x8ee <UpdateMin+0x12>
	{
		g_min = 0;
     8ea:	10 92 e7 06 	sts	0x06E7, r1
     8ee:	08 95       	ret

000008f0 <UpdateSec>:
	}
}

void UpdateSec()
{
		g_sec++;
     8f0:	80 91 e8 06 	lds	r24, 0x06E8
     8f4:	8f 5f       	subi	r24, 0xFF	; 255
     8f6:	80 93 e8 06 	sts	0x06E8, r24
		if (g_sec > 59) 
     8fa:	8c 33       	cpi	r24, 0x3C	; 60
     8fc:	10 f0       	brcs	.+4      	; 0x902 <UpdateSec+0x12>
		{
			g_sec = 0;
     8fe:	10 92 e8 06 	sts	0x06E8, r1
     902:	08 95       	ret

00000904 <UpdateHour>:
		}
}

void UpdateHour()
{
	g_hour++;
     904:	80 91 e6 06 	lds	r24, 0x06E6
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	80 93 e6 06 	sts	0x06E6, r24
	if (g_hour > 23)
     90e:	88 31       	cpi	r24, 0x18	; 24
     910:	10 f0       	brcs	.+4      	; 0x916 <UpdateHour+0x12>
		g_hour = 0;
     912:	10 92 e6 06 	sts	0x06E6, r1
     916:	08 95       	ret

00000918 <Update>:
}

void Update(uint8_t button,uint8_t data)
{
	if((button&0x01)==0&&data==1)
     918:	80 fd       	sbrc	r24, 0
     91a:	0c c0       	rjmp	.+24     	; 0x934 <Update+0x1c>
     91c:	61 30       	cpi	r22, 0x01	; 1
     91e:	51 f4       	brne	.+20     	; 0x934 <Update+0x1c>
		}
}

void UpdateHour()
{
	g_hour++;
     920:	80 91 e6 06 	lds	r24, 0x06E6
     924:	8f 5f       	subi	r24, 0xFF	; 255
     926:	80 93 e6 06 	sts	0x06E6, r24
	if (g_hour > 23)
     92a:	88 31       	cpi	r24, 0x18	; 24
     92c:	f0 f0       	brcs	.+60     	; 0x96a <Update+0x52>
		g_hour = 0;
     92e:	10 92 e6 06 	sts	0x06E6, r1
     932:	08 95       	ret
{
	if((button&0x01)==0&&data==1)
	{
		UpdateHour();
	}
	else if((button&0x02)==0&&data==2)
     934:	81 fd       	sbrc	r24, 1
     936:	0c c0       	rjmp	.+24     	; 0x950 <Update+0x38>
     938:	62 30       	cpi	r22, 0x02	; 2
     93a:	51 f4       	brne	.+20     	; 0x950 <Update+0x38>
	}
}

void UpdateMin()
{
	g_min++;
     93c:	80 91 e7 06 	lds	r24, 0x06E7
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	80 93 e7 06 	sts	0x06E7, r24
	if (g_min > 59)
     946:	8c 33       	cpi	r24, 0x3C	; 60
     948:	80 f0       	brcs	.+32     	; 0x96a <Update+0x52>
	{
		g_min = 0;
     94a:	10 92 e7 06 	sts	0x06E7, r1
     94e:	08 95       	ret
	}
	else if((button&0x02)==0&&data==2)
	{
		UpdateMin();
	}
	else if((button&0x04)==0&&data==4)
     950:	82 fd       	sbrc	r24, 2
     952:	0b c0       	rjmp	.+22     	; 0x96a <Update+0x52>
     954:	64 30       	cpi	r22, 0x04	; 4
     956:	49 f4       	brne	.+18     	; 0x96a <Update+0x52>
	}
}

void UpdateSec()
{
		g_sec++;
     958:	80 91 e8 06 	lds	r24, 0x06E8
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	80 93 e8 06 	sts	0x06E8, r24
		if (g_sec > 59) 
     962:	8c 33       	cpi	r24, 0x3C	; 60
     964:	10 f0       	brcs	.+4      	; 0x96a <Update+0x52>
		{
			g_sec = 0;
     966:	10 92 e8 06 	sts	0x06E8, r1
     96a:	08 95       	ret

0000096c <ButtonDown>:
	}
}

uint8_t ButtonDown(uint8_t button)
{
	if((button & 0x01)==0||(button & 0x02)==0||(button & 0x04)==0)
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	80 ff       	sbrs	r24, 0
     970:	09 c0       	rjmp	.+18     	; 0x984 <ButtonDown+0x18>
     972:	81 ff       	sbrs	r24, 1
     974:	07 c0       	rjmp	.+14     	; 0x984 <ButtonDown+0x18>
     976:	96 95       	lsr	r25
     978:	87 95       	ror	r24
     97a:	96 95       	lsr	r25
     97c:	87 95       	ror	r24
     97e:	80 95       	com	r24
     980:	81 70       	andi	r24, 0x01	; 1
     982:	08 95       	ret
     984:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	return 0;
}
     986:	08 95       	ret

00000988 <button_thread_func>:
#define Button (0.1*SYSTEM_TICKS_PER_SEC) // update clock on LCD 10 times/sec
void UpdateMin();
void Update(uint8_t button,uint8_t data);
uint8_t ButtonDown(uint8_t button);
void button_thread_func(uint32_t data)
{
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	e6 2e       	mov	r14, r22
	DDRK = 0x00; // port K (buttons) marked as inputs
     992:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0xff; // enable pull-up on port K
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	80 93 08 01 	sts	0x0108, r24
	DDRL = 0xff; // port L (leds) marked as outputs
     99c:	80 93 0a 01 	sts	0x010A, r24
     9a0:	10 e0       	ldi	r17, 0x00	; 0
     9a2:	07 e5       	ldi	r16, 0x57	; 87
	char state = 'W'; // W = waiting, D = down, C = confirmed, R=repeated
	// loop forever serving button presses
	while (1) {


		button=PINK;
     9a4:	f0 90 06 01 	lds	r15, 0x0106
		switch (state)
     9a8:	04 34       	cpi	r16, 0x44	; 68
     9aa:	89 f0       	breq	.+34     	; 0x9ce <button_thread_func+0x46>
     9ac:	05 34       	cpi	r16, 0x45	; 69
     9ae:	18 f4       	brcc	.+6      	; 0x9b6 <button_thread_func+0x2e>
     9b0:	03 34       	cpi	r16, 0x43	; 67
     9b2:	b9 f5       	brne	.+110    	; 0xa22 <button_thread_func+0x9a>
     9b4:	1c c0       	rjmp	.+56     	; 0x9ee <button_thread_func+0x66>
     9b6:	02 35       	cpi	r16, 0x52	; 82
     9b8:	29 f1       	breq	.+74     	; 0xa04 <button_thread_func+0x7c>
     9ba:	07 35       	cpi	r16, 0x57	; 87
     9bc:	91 f5       	brne	.+100    	; 0xa22 <button_thread_func+0x9a>
		{
			case 'W':
			{	
				if (ButtonDown(button)==1) 
     9be:	8f 2d       	mov	r24, r15
     9c0:	0e 94 b6 04 	call	0x96c	; 0x96c <ButtonDown>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	69 f5       	brne	.+90     	; 0xa22 <button_thread_func+0x9a>
     9c8:	10 e0       	ldi	r17, 0x00	; 0
     9ca:	04 e4       	ldi	r16, 0x44	; 68
     9cc:	2a c0       	rjmp	.+84     	; 0xa22 <button_thread_func+0x9a>
				}

			}break;
			case 'D':
			{
				timeout++;
     9ce:	1f 5f       	subi	r17, 0xFF	; 255
				if (ButtonDown(button)==0) 
     9d0:	8f 2d       	mov	r24, r15
     9d2:	0e 94 b6 04 	call	0x96c	; 0x96c <ButtonDown>
     9d6:	88 23       	and	r24, r24
     9d8:	09 f4       	brne	.+2      	; 0x9dc <button_thread_func+0x54>
     9da:	07 e5       	ldi	r16, 0x57	; 87
				{
					state = 'W';
				}
				if (timeout==2) {
     9dc:	12 30       	cpi	r17, 0x02	; 2
     9de:	09 f5       	brne	.+66     	; 0xa22 <button_thread_func+0x9a>
				 	state = 'C';
					Update(button,data);
     9e0:	8f 2d       	mov	r24, r15
     9e2:	6e 2d       	mov	r22, r14
     9e4:	0e 94 8c 04 	call	0x918	; 0x918 <Update>
     9e8:	10 e0       	ldi	r17, 0x00	; 0
     9ea:	03 e4       	ldi	r16, 0x43	; 67
     9ec:	1a c0       	rjmp	.+52     	; 0xa22 <button_thread_func+0x9a>
					timeout=0;
				}	
			}break;
			case 'C':
			{
				timeout++;
     9ee:	1f 5f       	subi	r17, 0xFF	; 255
				if (ButtonDown(button)==0) 
     9f0:	8f 2d       	mov	r24, r15
     9f2:	0e 94 b6 04 	call	0x96c	; 0x96c <ButtonDown>
     9f6:	88 23       	and	r24, r24
     9f8:	99 f0       	breq	.+38     	; 0xa20 <button_thread_func+0x98>
				{
					state = 'W';
				}			
				else if(timeout==80)
     9fa:	10 35       	cpi	r17, 0x50	; 80
     9fc:	91 f4       	brne	.+36     	; 0xa22 <button_thread_func+0x9a>
     9fe:	10 e0       	ldi	r17, 0x00	; 0
     a00:	02 e5       	ldi	r16, 0x52	; 82
     a02:	0f c0       	rjmp	.+30     	; 0xa22 <button_thread_func+0x9a>
					timeout=0;
				}
			}break;
			case 'R':
			{
				timeout++;
     a04:	1f 5f       	subi	r17, 0xFF	; 255
				if(timeout==20)
     a06:	14 31       	cpi	r17, 0x14	; 20
     a08:	31 f4       	brne	.+12     	; 0xa16 <button_thread_func+0x8e>
				{
					timeout=0;
					Update(button,data);
     a0a:	8f 2d       	mov	r24, r15
     a0c:	6e 2d       	mov	r22, r14
     a0e:	0e 94 8c 04 	call	0x918	; 0x918 <Update>
     a12:	10 e0       	ldi	r17, 0x00	; 0
     a14:	06 c0       	rjmp	.+12     	; 0xa22 <button_thread_func+0x9a>
				}			
				else if (ButtonDown(button)==0) 
     a16:	8f 2d       	mov	r24, r15
     a18:	0e 94 b6 04 	call	0x96c	; 0x96c <ButtonDown>
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <button_thread_func+0x9a>
     a20:	07 e5       	ldi	r16, 0x57	; 87
			}break;

		
		}

		atomTimerDelay(1);		
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 22 0c 	call	0x1844	; 0x1844 <atomTimerDelay>
     a2e:	ba cf       	rjmp	.-140    	; 0x9a4 <button_thread_func+0x1c>

00000a30 <ClearTask>:
#include "lab4.h"
#include "SerialManager.h"

void ClearTask(int i)
{
	TaskBuffer[i]=NULL;
     a30:	fc 01       	movw	r30, r24
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	e8 51       	subi	r30, 0x18	; 24
     a38:	ff 4d       	sbci	r31, 0xDF	; 223
     a3a:	11 82       	std	Z+1, r1	; 0x01
     a3c:	10 82       	st	Z, r1
}
     a3e:	08 95       	ret

00000a40 <ClearEvent>:
void ClearEvent(int i)
{
	EventBuffer[i].event=Empty;
     a40:	2b e0       	ldi	r18, 0x0B	; 11
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	82 9f       	mul	r24, r18
     a46:	f0 01       	movw	r30, r0
     a48:	83 9f       	mul	r24, r19
     a4a:	f0 0d       	add	r31, r0
     a4c:	92 9f       	mul	r25, r18
     a4e:	f0 0d       	add	r31, r0
     a50:	11 24       	eor	r1, r1
     a52:	e0 5a       	subi	r30, 0xA0	; 160
     a54:	f4 4f       	sbci	r31, 0xF4	; 244
     a56:	14 82       	std	Z+4, r1	; 0x04
}
     a58:	08 95       	ret

00000a5a <SC_fun>:

void SC_fun(uint32_t data)
{
     a5a:	2f 92       	push	r2
     a5c:	3f 92       	push	r3
     a5e:	4f 92       	push	r4
     a60:	5f 92       	push	r5
     a62:	6f 92       	push	r6
     a64:	7f 92       	push	r7
     a66:	8f 92       	push	r8
     a68:	9f 92       	push	r9
     a6a:	af 92       	push	r10
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	aa 24       	eor	r10, r10
     a80:	bb 24       	eor	r11, r11
     a82:	cc 24       	eor	r12, r12
     a84:	dd 24       	eor	r13, r13
			
			uint8_t Priority=TaskBuffer[i]->priority;
			uart_print("nT %p -p %ud\n",Address,Priority);
			ClearTask(i);	
		}
		switch(EventBuffer[j].event)
     a86:	7b e0       	ldi	r23, 0x0B	; 11
     a88:	87 2e       	mov	r8, r23
     a8a:	91 2c       	mov	r9, r1
				uint32_t MutexAddress=EventBuffer[j].arg1;
			//	MutexAddress*=2;
				uint32_t JobAddress=((TASK *)(EventBuffer[j].arg2))->entry_point;
				JobAddress*=2;
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				uart_print("p %ul RM %p %p\n",TimeStamp,MutexAddress,JobAddress);
     a8c:	64 e7       	ldi	r22, 0x74	; 116
     a8e:	26 2e       	mov	r2, r22
     a90:	65 e0       	ldi	r22, 0x05	; 5
     a92:	36 2e       	mov	r3, r22
  			case ETaskResumed:
			{
				uint32_t Address=((TASK *)(EventBuffer[j].arg1))->entry_point;
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				Address*=2;
				uart_print("p %ul JR %p\n",TimeStamp,Address);
     a94:	53 e4       	ldi	r21, 0x43	; 67
     a96:	45 2e       	mov	r4, r21
     a98:	55 e0       	ldi	r21, 0x05	; 5
     a9a:	55 2e       	mov	r5, r21
				uint32_t OldAddress=((TASK *)(EventBuffer[j].arg1))->entry_point;
				uint32_t NewAddress=((TASK *)(EventBuffer[j].arg2))->entry_point;
				OldAddress*=2;
				NewAddress*=2;
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				uart_print("p %ul JP %p -t %p\n",TimeStamp,OldAddress,NewAddress);
     a9c:	43 e2       	ldi	r20, 0x23	; 35
     a9e:	64 2e       	mov	r6, r20
     aa0:	45 e0       	ldi	r20, 0x05	; 5
     aa2:	74 2e       	mov	r7, r20
	unsigned int i=0;
	unsigned int j=0;
	while(1)
	{

		if(TaskBuffer[i]!=NULL && i<MAX_TASKS)
     aa4:	85 01       	movw	r16, r10
     aa6:	00 0f       	add	r16, r16
     aa8:	11 1f       	adc	r17, r17
     aaa:	08 51       	subi	r16, 0x18	; 24
     aac:	1f 4d       	sbci	r17, 0xDF	; 223
     aae:	d8 01       	movw	r26, r16
     ab0:	cd 91       	ld	r28, X+
     ab2:	dc 91       	ld	r29, X
     ab4:	20 97       	sbiw	r28, 0x00	; 0
     ab6:	99 f1       	breq	.+102    	; 0xb1e <SC_fun+0xc4>
     ab8:	ba e0       	ldi	r27, 0x0A	; 10
     aba:	ab 16       	cp	r10, r27
     abc:	b1 04       	cpc	r11, r1
     abe:	78 f5       	brcc	.+94     	; 0xb1e <SC_fun+0xc4>
		{
			uint32_t Address=TaskBuffer[i]->entry_point;
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	9c 81       	ldd	r25, Y+4	; 0x04
     ac4:	aa 27       	eor	r26, r26
     ac6:	97 fd       	sbrc	r25, 7
     ac8:	a0 95       	com	r26
     aca:	ba 2f       	mov	r27, r26
			
			//Convert the address
			Address*=2;
			
			uint8_t Priority=TaskBuffer[i]->priority;
			uart_print("nT %p -p %ud\n",Address,Priority);
     acc:	ed b7       	in	r30, 0x3d	; 61
     ace:	fe b7       	in	r31, 0x3e	; 62
     ad0:	38 97       	sbiw	r30, 0x08	; 8
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	fe bf       	out	0x3e, r31	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	ed bf       	out	0x3d, r30	; 61
     adc:	4d b7       	in	r20, 0x3d	; 61
     ade:	5e b7       	in	r21, 0x3e	; 62
     ae0:	4f 5f       	subi	r20, 0xFF	; 255
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255
     ae4:	25 e1       	ldi	r18, 0x15	; 21
     ae6:	35 e0       	ldi	r19, 0x05	; 5
     ae8:	32 83       	std	Z+2, r19	; 0x02
     aea:	21 83       	std	Z+1, r18	; 0x01
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	aa 1f       	adc	r26, r26
     af2:	bb 1f       	adc	r27, r27
     af4:	fa 01       	movw	r30, r20
     af6:	82 83       	std	Z+2, r24	; 0x02
     af8:	93 83       	std	Z+3, r25	; 0x03
     afa:	a4 83       	std	Z+4, r26	; 0x04
     afc:	b5 83       	std	Z+5, r27	; 0x05
     afe:	8a 81       	ldd	r24, Y+2	; 0x02
     b00:	86 83       	std	Z+6, r24	; 0x06
     b02:	17 82       	std	Z+7, r1	; 0x07
     b04:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <uart_print>
#include "lab4.h"
#include "SerialManager.h"

void ClearTask(int i)
{
	TaskBuffer[i]=NULL;
     b08:	d8 01       	movw	r26, r16
     b0a:	1d 92       	st	X+, r1
     b0c:	1c 92       	st	X, r1
     b0e:	ed b7       	in	r30, 0x3d	; 61
     b10:	fe b7       	in	r31, 0x3e	; 62
     b12:	38 96       	adiw	r30, 0x08	; 8
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	fe bf       	out	0x3e, r31	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	ed bf       	out	0x3d, r30	; 61
			
			uint8_t Priority=TaskBuffer[i]->priority;
			uart_print("nT %p -p %ud\n",Address,Priority);
			ClearTask(i);	
		}
		switch(EventBuffer[j].event)
     b1e:	c8 9c       	mul	r12, r8
     b20:	e0 01       	movw	r28, r0
     b22:	c9 9c       	mul	r12, r9
     b24:	d0 0d       	add	r29, r0
     b26:	d8 9c       	mul	r13, r8
     b28:	d0 0d       	add	r29, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	c0 5a       	subi	r28, 0xA0	; 160
     b2e:	d4 4f       	sbci	r29, 0xF4	; 244
     b30:	8c 81       	ldd	r24, Y+4	; 0x04
     b32:	84 30       	cpi	r24, 0x04	; 4
     b34:	09 f4       	brne	.+2      	; 0xb38 <SC_fun+0xde>
     b36:	8b c0       	rjmp	.+278    	; 0xc4e <SC_fun+0x1f4>
     b38:	85 30       	cpi	r24, 0x05	; 5
     b3a:	50 f4       	brcc	.+20     	; 0xb50 <SC_fun+0xf6>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	09 f4       	brne	.+2      	; 0xb42 <SC_fun+0xe8>
     b40:	43 c0       	rjmp	.+134    	; 0xbc8 <SC_fun+0x16e>
     b42:	83 30       	cpi	r24, 0x03	; 3
     b44:	08 f0       	brcs	.+2      	; 0xb48 <SC_fun+0xee>
     b46:	56 c0       	rjmp	.+172    	; 0xbf4 <SC_fun+0x19a>
     b48:	81 30       	cpi	r24, 0x01	; 1
     b4a:	09 f0       	breq	.+2      	; 0xb4e <SC_fun+0xf4>
     b4c:	4a c1       	rjmp	.+660    	; 0xde2 <SC_fun+0x388>
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <SC_fun+0x10a>
     b50:	86 30       	cpi	r24, 0x06	; 6
     b52:	09 f4       	brne	.+2      	; 0xb56 <SC_fun+0xfc>
     b54:	cb c0       	rjmp	.+406    	; 0xcec <SC_fun+0x292>
     b56:	86 30       	cpi	r24, 0x06	; 6
     b58:	08 f4       	brcc	.+2      	; 0xb5c <SC_fun+0x102>
     b5a:	aa c0       	rjmp	.+340    	; 0xcb0 <SC_fun+0x256>
     b5c:	87 30       	cpi	r24, 0x07	; 7
     b5e:	09 f0       	breq	.+2      	; 0xb62 <SC_fun+0x108>
     b60:	40 c1       	rjmp	.+640    	; 0xde2 <SC_fun+0x388>
     b62:	04 c1       	rjmp	.+520    	; 0xd6c <SC_fun+0x312>
		{
			case ETaskPreempted:
			{
				uint32_t OldAddress=((TASK *)(EventBuffer[j].arg1))->entry_point;
     b64:	ed 81       	ldd	r30, Y+5	; 0x05
     b66:	fe 81       	ldd	r31, Y+6	; 0x06
     b68:	e3 80       	ldd	r14, Z+3	; 0x03
     b6a:	f4 80       	ldd	r15, Z+4	; 0x04
     b6c:	00 27       	eor	r16, r16
     b6e:	f7 fc       	sbrc	r15, 7
     b70:	00 95       	com	r16
     b72:	10 2f       	mov	r17, r16
				uint32_t NewAddress=((TASK *)(EventBuffer[j].arg2))->entry_point;
     b74:	ef 81       	ldd	r30, Y+7	; 0x07
     b76:	f8 85       	ldd	r31, Y+8	; 0x08
     b78:	23 81       	ldd	r18, Z+3	; 0x03
     b7a:	34 81       	ldd	r19, Z+4	; 0x04
     b7c:	44 27       	eor	r20, r20
     b7e:	37 fd       	sbrc	r19, 7
     b80:	40 95       	com	r20
     b82:	54 2f       	mov	r21, r20
				OldAddress*=2;
				NewAddress*=2;
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				uart_print("p %ul JP %p -t %p\n",TimeStamp,OldAddress,NewAddress);
     b84:	8d b7       	in	r24, 0x3d	; 61
     b86:	9e b7       	in	r25, 0x3e	; 62
     b88:	0e 97       	sbiw	r24, 0x0e	; 14
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	9e bf       	out	0x3e, r25	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	8d bf       	out	0x3d, r24	; 61
     b94:	ed b7       	in	r30, 0x3d	; 61
     b96:	fe b7       	in	r31, 0x3e	; 62
     b98:	31 96       	adiw	r30, 0x01	; 1
     b9a:	ad b7       	in	r26, 0x3d	; 61
     b9c:	be b7       	in	r27, 0x3e	; 62
     b9e:	12 96       	adiw	r26, 0x02	; 2
     ba0:	7c 92       	st	X, r7
     ba2:	6e 92       	st	-X, r6
     ba4:	11 97       	sbiw	r26, 0x01	; 1
     ba6:	88 81       	ld	r24, Y
     ba8:	99 81       	ldd	r25, Y+1	; 0x01
     baa:	aa 81       	ldd	r26, Y+2	; 0x02
     bac:	bb 81       	ldd	r27, Y+3	; 0x03
     bae:	82 83       	std	Z+2, r24	; 0x02
     bb0:	93 83       	std	Z+3, r25	; 0x03
     bb2:	a4 83       	std	Z+4, r26	; 0x04
     bb4:	b5 83       	std	Z+5, r27	; 0x05
     bb6:	ee 0c       	add	r14, r14
     bb8:	ff 1c       	adc	r15, r15
     bba:	00 1f       	adc	r16, r16
     bbc:	11 1f       	adc	r17, r17
     bbe:	e6 82       	std	Z+6, r14	; 0x06
     bc0:	f7 82       	std	Z+7, r15	; 0x07
     bc2:	00 87       	std	Z+8, r16	; 0x08
     bc4:	11 87       	std	Z+9, r17	; 0x09
     bc6:	fb c0       	rjmp	.+502    	; 0xdbe <SC_fun+0x364>
				
			}break;
			case  ETaskArrived:
			{
				uint32_t Address=((TASK *)(EventBuffer[j].arg1))->entry_point;
     bc8:	ed 81       	ldd	r30, Y+5	; 0x05
     bca:	fe 81       	ldd	r31, Y+6	; 0x06
     bcc:	23 81       	ldd	r18, Z+3	; 0x03
     bce:	34 81       	ldd	r19, Z+4	; 0x04
     bd0:	44 27       	eor	r20, r20
     bd2:	37 fd       	sbrc	r19, 7
     bd4:	40 95       	com	r20
     bd6:	54 2f       	mov	r21, r20
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				Address*=2;
				uart_print("p %ul JA %p\n",TimeStamp,Address);
     bd8:	8d b7       	in	r24, 0x3d	; 61
     bda:	9e b7       	in	r25, 0x3e	; 62
     bdc:	0a 97       	sbiw	r24, 0x0a	; 10
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	9e bf       	out	0x3e, r25	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	8d bf       	out	0x3d, r24	; 61
     be8:	ed b7       	in	r30, 0x3d	; 61
     bea:	fe b7       	in	r31, 0x3e	; 62
     bec:	31 96       	adiw	r30, 0x01	; 1
     bee:	86 e3       	ldi	r24, 0x36	; 54
     bf0:	95 e0       	ldi	r25, 0x05	; 5
     bf2:	42 c0       	rjmp	.+132    	; 0xc78 <SC_fun+0x21e>
			}break;
  			case ETaskResumed:
			{
				uint32_t Address=((TASK *)(EventBuffer[j].arg1))->entry_point;
     bf4:	ed 81       	ldd	r30, Y+5	; 0x05
     bf6:	fe 81       	ldd	r31, Y+6	; 0x06
     bf8:	23 81       	ldd	r18, Z+3	; 0x03
     bfa:	34 81       	ldd	r19, Z+4	; 0x04
     bfc:	44 27       	eor	r20, r20
     bfe:	37 fd       	sbrc	r19, 7
     c00:	40 95       	com	r20
     c02:	54 2f       	mov	r21, r20
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				Address*=2;
				uart_print("p %ul JR %p\n",TimeStamp,Address);
     c04:	ed b7       	in	r30, 0x3d	; 61
     c06:	fe b7       	in	r31, 0x3e	; 62
     c08:	3a 97       	sbiw	r30, 0x0a	; 10
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	fe bf       	out	0x3e, r31	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	ed bf       	out	0x3d, r30	; 61
     c14:	31 96       	adiw	r30, 0x01	; 1
     c16:	ad b7       	in	r26, 0x3d	; 61
     c18:	be b7       	in	r27, 0x3e	; 62
     c1a:	12 96       	adiw	r26, 0x02	; 2
     c1c:	5c 92       	st	X, r5
     c1e:	4e 92       	st	-X, r4
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	88 81       	ld	r24, Y
     c24:	99 81       	ldd	r25, Y+1	; 0x01
     c26:	aa 81       	ldd	r26, Y+2	; 0x02
     c28:	bb 81       	ldd	r27, Y+3	; 0x03
     c2a:	82 83       	std	Z+2, r24	; 0x02
     c2c:	93 83       	std	Z+3, r25	; 0x03
     c2e:	a4 83       	std	Z+4, r26	; 0x04
     c30:	b5 83       	std	Z+5, r27	; 0x05
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	26 83       	std	Z+6, r18	; 0x06
     c3c:	37 83       	std	Z+7, r19	; 0x07
     c3e:	40 87       	std	Z+8, r20	; 0x08
     c40:	51 87       	std	Z+9, r21	; 0x09
     c42:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <uart_print>
     c46:	ed b7       	in	r30, 0x3d	; 61
     c48:	fe b7       	in	r31, 0x3e	; 62
     c4a:	3a 96       	adiw	r30, 0x0a	; 10
     c4c:	c5 c0       	rjmp	.+394    	; 0xdd8 <SC_fun+0x37e>
			}break;
  			case ETaskCompleted:
			{
				uint32_t Address=((TASK *)(EventBuffer[j].arg1))->entry_point;
     c4e:	ed 81       	ldd	r30, Y+5	; 0x05
     c50:	fe 81       	ldd	r31, Y+6	; 0x06
     c52:	23 81       	ldd	r18, Z+3	; 0x03
     c54:	34 81       	ldd	r19, Z+4	; 0x04
     c56:	44 27       	eor	r20, r20
     c58:	37 fd       	sbrc	r19, 7
     c5a:	40 95       	com	r20
     c5c:	54 2f       	mov	r21, r20
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				Address*=2;
				uart_print("p %ul JC %p\n",TimeStamp,Address);
     c5e:	8d b7       	in	r24, 0x3d	; 61
     c60:	9e b7       	in	r25, 0x3e	; 62
     c62:	0a 97       	sbiw	r24, 0x0a	; 10
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	9e bf       	out	0x3e, r25	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	8d bf       	out	0x3d, r24	; 61
     c6e:	ed b7       	in	r30, 0x3d	; 61
     c70:	fe b7       	in	r31, 0x3e	; 62
     c72:	31 96       	adiw	r30, 0x01	; 1
     c74:	80 e5       	ldi	r24, 0x50	; 80
     c76:	95 e0       	ldi	r25, 0x05	; 5
     c78:	ad b7       	in	r26, 0x3d	; 61
     c7a:	be b7       	in	r27, 0x3e	; 62
     c7c:	12 96       	adiw	r26, 0x02	; 2
     c7e:	9c 93       	st	X, r25
     c80:	8e 93       	st	-X, r24
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	88 81       	ld	r24, Y
     c86:	99 81       	ldd	r25, Y+1	; 0x01
     c88:	aa 81       	ldd	r26, Y+2	; 0x02
     c8a:	bb 81       	ldd	r27, Y+3	; 0x03
     c8c:	82 83       	std	Z+2, r24	; 0x02
     c8e:	93 83       	std	Z+3, r25	; 0x03
     c90:	a4 83       	std	Z+4, r26	; 0x04
     c92:	b5 83       	std	Z+5, r27	; 0x05
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	44 1f       	adc	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	26 83       	std	Z+6, r18	; 0x06
     c9e:	37 83       	std	Z+7, r19	; 0x07
     ca0:	40 87       	std	Z+8, r20	; 0x08
     ca2:	51 87       	std	Z+9, r21	; 0x09
     ca4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <uart_print>
     ca8:	ad b7       	in	r26, 0x3d	; 61
     caa:	be b7       	in	r27, 0x3e	; 62
     cac:	1a 96       	adiw	r26, 0x0a	; 10
     cae:	58 c0       	rjmp	.+176    	; 0xd60 <SC_fun+0x306>
			}break;
			case EMutexCreated:
			{
				uint32_t MutexAddress=EventBuffer[j].arg1;
			//	MutexAddress*=2;
				uart_print("nM %p\n",MutexAddress);
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <SC_fun+0x258>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <SC_fun+0x25a>
     cb4:	2d e5       	ldi	r18, 0x5D	; 93
     cb6:	35 e0       	ldi	r19, 0x05	; 5
     cb8:	ed b7       	in	r30, 0x3d	; 61
     cba:	fe b7       	in	r31, 0x3e	; 62
     cbc:	32 83       	std	Z+2, r19	; 0x02
     cbe:	21 83       	std	Z+1, r18	; 0x01
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	aa 27       	eor	r26, r26
     cc6:	97 fd       	sbrc	r25, 7
     cc8:	a0 95       	com	r26
     cca:	ba 2f       	mov	r27, r26
     ccc:	83 83       	std	Z+3, r24	; 0x03
     cce:	94 83       	std	Z+4, r25	; 0x04
     cd0:	a5 83       	std	Z+5, r26	; 0x05
     cd2:	b6 83       	std	Z+6, r27	; 0x06
     cd4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <uart_print>
     cd8:	2d b7       	in	r18, 0x3d	; 61
     cda:	3e b7       	in	r19, 0x3e	; 62
     cdc:	2a 5f       	subi	r18, 0xFA	; 250
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	3e bf       	out	0x3e, r19	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	2d bf       	out	0x3d, r18	; 61
     cea:	7b c0       	rjmp	.+246    	; 0xde2 <SC_fun+0x388>
			}break;
			case EMutexGetted:
			{
				uint32_t MutexAddress=EventBuffer[j].arg1;
			//	MutexAddress*=2;
				uint32_t JobAddress=((TASK *)(EventBuffer[j].arg2))->entry_point;
     cec:	ef 81       	ldd	r30, Y+7	; 0x07
     cee:	f8 85       	ldd	r31, Y+8	; 0x08
     cf0:	23 81       	ldd	r18, Z+3	; 0x03
     cf2:	34 81       	ldd	r19, Z+4	; 0x04
     cf4:	44 27       	eor	r20, r20
     cf6:	37 fd       	sbrc	r19, 7
     cf8:	40 95       	com	r20
     cfa:	54 2f       	mov	r21, r20
				JobAddress*=2;
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				uart_print("p %ul AM %p %p\n",TimeStamp,MutexAddress,JobAddress);
     cfc:	8d b7       	in	r24, 0x3d	; 61
     cfe:	9e b7       	in	r25, 0x3e	; 62
     d00:	0e 97       	sbiw	r24, 0x0e	; 14
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	9e bf       	out	0x3e, r25	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	8d bf       	out	0x3d, r24	; 61
     d0c:	ed b7       	in	r30, 0x3d	; 61
     d0e:	fe b7       	in	r31, 0x3e	; 62
     d10:	31 96       	adiw	r30, 0x01	; 1
     d12:	84 e6       	ldi	r24, 0x64	; 100
     d14:	95 e0       	ldi	r25, 0x05	; 5
     d16:	ad b7       	in	r26, 0x3d	; 61
     d18:	be b7       	in	r27, 0x3e	; 62
     d1a:	12 96       	adiw	r26, 0x02	; 2
     d1c:	9c 93       	st	X, r25
     d1e:	8e 93       	st	-X, r24
     d20:	11 97       	sbiw	r26, 0x01	; 1
     d22:	88 81       	ld	r24, Y
     d24:	99 81       	ldd	r25, Y+1	; 0x01
     d26:	aa 81       	ldd	r26, Y+2	; 0x02
     d28:	bb 81       	ldd	r27, Y+3	; 0x03
     d2a:	82 83       	std	Z+2, r24	; 0x02
     d2c:	93 83       	std	Z+3, r25	; 0x03
     d2e:	a4 83       	std	Z+4, r26	; 0x04
     d30:	b5 83       	std	Z+5, r27	; 0x05
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	aa 27       	eor	r26, r26
     d38:	97 fd       	sbrc	r25, 7
     d3a:	a0 95       	com	r26
     d3c:	ba 2f       	mov	r27, r26
     d3e:	86 83       	std	Z+6, r24	; 0x06
     d40:	97 83       	std	Z+7, r25	; 0x07
     d42:	a0 87       	std	Z+8, r26	; 0x08
     d44:	b1 87       	std	Z+9, r27	; 0x09
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	44 1f       	adc	r20, r20
     d4c:	55 1f       	adc	r21, r21
     d4e:	22 87       	std	Z+10, r18	; 0x0a
     d50:	33 87       	std	Z+11, r19	; 0x0b
     d52:	44 87       	std	Z+12, r20	; 0x0c
     d54:	55 87       	std	Z+13, r21	; 0x0d
     d56:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <uart_print>
     d5a:	ad b7       	in	r26, 0x3d	; 61
     d5c:	be b7       	in	r27, 0x3e	; 62
     d5e:	1e 96       	adiw	r26, 0x0e	; 14
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	be bf       	out	0x3e, r27	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	ad bf       	out	0x3d, r26	; 61
     d6a:	3b c0       	rjmp	.+118    	; 0xde2 <SC_fun+0x388>
			}break;
			case EMutexPutted:
			{
				uint32_t MutexAddress=EventBuffer[j].arg1;
			//	MutexAddress*=2;
				uint32_t JobAddress=((TASK *)(EventBuffer[j].arg2))->entry_point;
     d6c:	ef 81       	ldd	r30, Y+7	; 0x07
     d6e:	f8 85       	ldd	r31, Y+8	; 0x08
     d70:	23 81       	ldd	r18, Z+3	; 0x03
     d72:	34 81       	ldd	r19, Z+4	; 0x04
     d74:	44 27       	eor	r20, r20
     d76:	37 fd       	sbrc	r19, 7
     d78:	40 95       	com	r20
     d7a:	54 2f       	mov	r21, r20
				JobAddress*=2;
				uint32_t TimeStamp=EventBuffer[j].timestamp;
				uart_print("p %ul RM %p %p\n",TimeStamp,MutexAddress,JobAddress);
     d7c:	ed b7       	in	r30, 0x3d	; 61
     d7e:	fe b7       	in	r31, 0x3e	; 62
     d80:	3e 97       	sbiw	r30, 0x0e	; 14
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	fe bf       	out	0x3e, r31	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	ed bf       	out	0x3d, r30	; 61
     d8c:	31 96       	adiw	r30, 0x01	; 1
     d8e:	ad b7       	in	r26, 0x3d	; 61
     d90:	be b7       	in	r27, 0x3e	; 62
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	3c 92       	st	X, r3
     d96:	2e 92       	st	-X, r2
     d98:	11 97       	sbiw	r26, 0x01	; 1
     d9a:	88 81       	ld	r24, Y
     d9c:	99 81       	ldd	r25, Y+1	; 0x01
     d9e:	aa 81       	ldd	r26, Y+2	; 0x02
     da0:	bb 81       	ldd	r27, Y+3	; 0x03
     da2:	82 83       	std	Z+2, r24	; 0x02
     da4:	93 83       	std	Z+3, r25	; 0x03
     da6:	a4 83       	std	Z+4, r26	; 0x04
     da8:	b5 83       	std	Z+5, r27	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	aa 27       	eor	r26, r26
     db0:	97 fd       	sbrc	r25, 7
     db2:	a0 95       	com	r26
     db4:	ba 2f       	mov	r27, r26
     db6:	86 83       	std	Z+6, r24	; 0x06
     db8:	97 83       	std	Z+7, r25	; 0x07
     dba:	a0 87       	std	Z+8, r26	; 0x08
     dbc:	b1 87       	std	Z+9, r27	; 0x09
     dbe:	22 0f       	add	r18, r18
     dc0:	33 1f       	adc	r19, r19
     dc2:	44 1f       	adc	r20, r20
     dc4:	55 1f       	adc	r21, r21
     dc6:	22 87       	std	Z+10, r18	; 0x0a
     dc8:	33 87       	std	Z+11, r19	; 0x0b
     dca:	44 87       	std	Z+12, r20	; 0x0c
     dcc:	55 87       	std	Z+13, r21	; 0x0d
     dce:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <uart_print>
     dd2:	ed b7       	in	r30, 0x3d	; 61
     dd4:	fe b7       	in	r31, 0x3e	; 62
     dd6:	3e 96       	adiw	r30, 0x0e	; 14
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	fe bf       	out	0x3e, r31	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	ed bf       	out	0x3d, r30	; 61
{
	TaskBuffer[i]=NULL;
}
void ClearEvent(int i)
{
	EventBuffer[i].event=Empty;
     de2:	c8 9c       	mul	r12, r8
     de4:	f0 01       	movw	r30, r0
     de6:	c9 9c       	mul	r12, r9
     de8:	f0 0d       	add	r31, r0
     dea:	d8 9c       	mul	r13, r8
     dec:	f0 0d       	add	r31, r0
     dee:	11 24       	eor	r1, r1
     df0:	e0 5a       	subi	r30, 0xA0	; 160
     df2:	f4 4f       	sbci	r31, 0xF4	; 244
     df4:	14 82       	std	Z+4, r1	; 0x04
				
			}break;

		}
		ClearEvent(j);
		i++;
     df6:	08 94       	sec
     df8:	a1 1c       	adc	r10, r1
     dfa:	b1 1c       	adc	r11, r1
		j++;
     dfc:	08 94       	sec
     dfe:	c1 1c       	adc	r12, r1
     e00:	d1 1c       	adc	r13, r1

		if(i==MAX_TASKS)
     e02:	fa e0       	ldi	r31, 0x0A	; 10
     e04:	af 16       	cp	r10, r31
     e06:	b1 04       	cpc	r11, r1
     e08:	11 f4       	brne	.+4      	; 0xe0e <SC_fun+0x3b4>
     e0a:	aa 24       	eor	r10, r10
     e0c:	bb 24       	eor	r11, r11
		{
			i=0;
		}
		if(j>=MAX_EVENT)
     e0e:	24 ef       	ldi	r18, 0xF4	; 244
     e10:	c2 16       	cp	r12, r18
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	d2 06       	cpc	r13, r18
     e16:	10 f0       	brcs	.+4      	; 0xe1c <SC_fun+0x3c2>
     e18:	cc 24       	eor	r12, r12
     e1a:	dd 24       	eor	r13, r13
		{
			j=0;
		}
		atomTimerDelay(1);
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 22 0c 	call	0x1844	; 0x1844 <atomTimerDelay>
     e28:	3d ce       	rjmp	.-902    	; 0xaa4 <SC_fun+0x4a>

00000e2a <archThreadContextInit>:
 * @param[in] entry_param Parameter to be passed to the thread entry point
 *
 * @return None
 */
void archThreadContextInit (ATOM_TCB *tcb_ptr, void *stack_top, void (*entry_point)(uint32_t), uint32_t entry_param)
{
     e2a:	dc 01       	movw	r26, r24
    uint8_t *stack_ptr;

    /** Start at stack top */
    stack_ptr = (uint8_t *)stack_top;
     e2c:	fb 01       	movw	r30, r22
     * and call it directly from the thread restore routines.
     *
     * Because we are filling the stack from top to bottom, this goes
     * on the stack first (at the top).
     */
    *stack_ptr-- = (uint8_t)((uint16_t)thread_shell & 0xFF);
     e2e:	88 e7       	ldi	r24, 0x78	; 120
     e30:	97 e0       	ldi	r25, 0x07	; 7
     e32:	80 83       	st	Z, r24
    *stack_ptr-- = (uint8_t)(((uint16_t)thread_shell >> 8) & 0xFF);
     e34:	92 93       	st	-Z, r25
     * This means that the thread_shell() function must be located
     * in the bottom 128KB. You may need to modify linker scripts to
     * force this.
     */
#ifdef __AVR_3_BYTE_PC__
    *stack_ptr-- = 0;
     e36:	12 92       	st	-Z, r1
     */

    /**
     * Store starting register values for R2-R17, R28-R29
     */
    *stack_ptr-- = 0x00;    /* R2 */
     e38:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R3 */
     e3a:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R4 */
     e3c:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R5 */
     e3e:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R6 */
     e40:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R7 */
     e42:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R8 */
     e44:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R9 */
     e46:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R10 */
     e48:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R11 */
     e4a:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R12 */
     e4c:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R13 */
     e4e:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R14 */
     e50:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R15 */
     e52:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R16 */
     e54:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R17 */
     e56:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R28 */
     e58:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* R29 */
     e5a:	12 92       	st	-Z, r1

    /**
     * On devices with large program space we also context switch RAMPZ, EIND.
     */
#ifdef __AVR_3_BYTE_PC__
    *stack_ptr-- = 0x00;    /* RAMPZ */
     e5c:	12 92       	st	-Z, r1
    *stack_ptr-- = 0x00;    /* EIND */
     e5e:	12 92       	st	-Z, r1
    /**
     * All thread context has now been initialised. Save the current
     * stack pointer to the thread's TCB so it knows where to start
     * looking when the thread is started.
     */
    tcb_ptr->sp_save_ptr = stack_ptr;
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	ed 93       	st	X+, r30
     e64:	fc 93       	st	X, r31

}
     e66:	08 95       	ret

00000e68 <avrInitSystemTickTimer>:
{
    /* Set timer 1 compare match value for configured system tick,
     * with a prescaler of 256. We will get a compare match 1A
     * interrupt on every system tick, in which we must call the
     * OS's system tick handler. */
    OCR1A = (AVR_CPU_HZ / 256 / SYSTEM_TICKS_PER_SEC);
     e68:	81 e7       	ldi	r24, 0x71	; 113
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	90 93 89 00 	sts	0x0089, r25
     e70:	80 93 88 00 	sts	0x0088, r24

    /* Enable compare match 1A interrupt */
#ifdef TIMSK
    TIMSK = _BV(OCIE1A);
#else
    TIMSK1 = _BV(OCIE1A);
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	80 93 6f 00 	sts	0x006F, r24
#endif

    /* Set prescaler 256 */
    TCCR1B = _BV(CS12) | _BV(WGM12);
     e7a:	8c e0       	ldi	r24, 0x0C	; 12
     e7c:	80 93 81 00 	sts	0x0081, r24
}
     e80:	08 95       	ret

00000e82 <__vector_default>:
 * tick interrupt.
 *
 * @return None
 */
ISR (BADISR_vect)
{
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
    /* Empty */
}
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_17>:
 * in case the interrupt handler makes more than one thread ready.
 *
 * @return None
 */
ISR (TIMER1_COMPA_vect)
{
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	0b b6       	in	r0, 0x3b	; 59
     ea0:	0f 92       	push	r0
     ea2:	11 24       	eor	r1, r1
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
	//StartWatch();
    /* Call the interrupt entry routine */
    atomIntEnter();
     ebc:	0e 94 f8 07 	call	0xff0	; 0xff0 <atomIntEnter>

    /* Call the OS system tick handler */
    atomTimerTick();
     ec0:	0e 94 cd 0b 	call	0x179a	; 0x179a <atomTimerTick>

    /* Call the interrupt exit routine */
    atomIntExit(TRUE);
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <atomIntExit>
	// Add(StopWatch());
}
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0b be       	out	0x3b, r0	; 59
     ee6:	0f 90       	pop	r0
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	0f 90       	pop	r0
     eec:	1f 90       	pop	r1
     eee:	18 95       	reti

00000ef0 <thread_shell>:
static void thread_shell (void)
{
    ATOM_TCB *curr_tcb;

    /* Get the TCB of the thread being started */
    curr_tcb = atomCurrentContext();
     ef0:	0e 94 02 08 	call	0x1004	; 0x1004 <atomCurrentContext>
     ef4:	fc 01       	movw	r30, r24

    /**
     * Enable interrupts - these will not be enabled when a thread
     * is first restored.
     */
    sei();
     ef6:	78 94       	sei

    /* Call the thread entry point */
    if (curr_tcb && curr_tcb->entry_point)
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	59 f0       	breq	.+22     	; 0xf12 <thread_shell+0x22>
     efc:	23 81       	ldd	r18, Z+3	; 0x03
     efe:	34 81       	ldd	r19, Z+4	; 0x04
     f00:	21 15       	cp	r18, r1
     f02:	31 05       	cpc	r19, r1
     f04:	31 f0       	breq	.+12     	; 0xf12 <thread_shell+0x22>
    {
        curr_tcb->entry_point(curr_tcb->entry_param);
     f06:	65 81       	ldd	r22, Z+5	; 0x05
     f08:	76 81       	ldd	r23, Z+6	; 0x06
     f0a:	87 81       	ldd	r24, Z+7	; 0x07
     f0c:	90 85       	ldd	r25, Z+8	; 0x08
     f0e:	f9 01       	movw	r30, r18
     f10:	19 95       	eicall
     f12:	08 95       	ret

00000f14 <__vector_35>:
#include <avr/interrupt.h>
#include "StopWatch.h"

static unsigned long Overflow_Time=0;
ISR(TIMER3_OVF_vect)
{
     f14:	1f 92       	push	r1
     f16:	0f 92       	push	r0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	0f 92       	push	r0
     f1c:	11 24       	eor	r1, r1
     f1e:	8f 93       	push	r24
     f20:	9f 93       	push	r25
     f22:	af 93       	push	r26
     f24:	bf 93       	push	r27
	Overflow_Time++;
     f26:	80 91 3a 0b 	lds	r24, 0x0B3A
     f2a:	90 91 3b 0b 	lds	r25, 0x0B3B
     f2e:	a0 91 3c 0b 	lds	r26, 0x0B3C
     f32:	b0 91 3d 0b 	lds	r27, 0x0B3D
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	a1 1d       	adc	r26, r1
     f3a:	b1 1d       	adc	r27, r1
     f3c:	80 93 3a 0b 	sts	0x0B3A, r24
     f40:	90 93 3b 0b 	sts	0x0B3B, r25
     f44:	a0 93 3c 0b 	sts	0x0B3C, r26
     f48:	b0 93 3d 0b 	sts	0x0B3D, r27
	TCNT3=0x0000;
     f4c:	10 92 95 00 	sts	0x0095, r1
     f50:	10 92 94 00 	sts	0x0094, r1
}
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	0f 90       	pop	r0
     f62:	1f 90       	pop	r1
     f64:	18 95       	reti

00000f66 <InitWatch>:
 
void InitWatch()
{
	TIMSK3=(1<<TOIE3);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	80 93 71 00 	sts	0x0071, r24
	TCCR3B=(1<<CS31);//f=2MHZ     0.5us each
     f6c:	e1 e9       	ldi	r30, 0x91	; 145
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	80 83       	st	Z, r24
//	TCCR3B=(0<<CS31)|(1<<CS32)|(1<<CS30);//f=1024/16MHZ 64us each
	TCCR3B|=1<<WGM32;
     f74:	80 81       	ld	r24, Z
     f76:	88 60       	ori	r24, 0x08	; 8
     f78:	80 83       	st	Z, r24

}
     f7a:	08 95       	ret

00000f7c <GetTime>:
unsigned long GetTime()
{
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
	uint16_t t=TCNT3;
     f84:	e0 90 94 00 	lds	r14, 0x0094
     f88:	f0 90 95 00 	lds	r15, 0x0095
     f8c:	00 e0       	ldi	r16, 0x00	; 0
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	60 91 3a 0b 	lds	r22, 0x0B3A
     f94:	70 91 3b 0b 	lds	r23, 0x0B3B
     f98:	80 91 3c 0b 	lds	r24, 0x0B3C
     f9c:	90 91 3d 0b 	lds	r25, 0x0B3D
     fa0:	2f ef       	ldi	r18, 0xFF	; 255
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__mulsi3>
     fac:	e6 0e       	add	r14, r22
     fae:	f7 1e       	adc	r15, r23
     fb0:	08 1f       	adc	r16, r24
     fb2:	19 1f       	adc	r17, r25
     fb4:	16 95       	lsr	r17
     fb6:	07 95       	ror	r16
     fb8:	f7 94       	ror	r15
     fba:	e7 94       	ror	r14
	unsigned long result=0;
	result=(Overflow_Time*65535+t)/2;
	return result;

}
     fbc:	b7 01       	movw	r22, r14
     fbe:	c8 01       	movw	r24, r16
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	08 95       	ret

00000fca <USART_Init>:



void USART_Init( unsigned int ubrr){
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
     fca:	90 93 cd 00 	sts	0x00CD, r25
	UBRR1L = (unsigned char)ubrr;
     fce:	80 93 cc 00 	sts	0x00CC, r24
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     fd2:	88 e1       	ldi	r24, 0x18	; 24
     fd4:	80 93 c9 00 	sts	0x00C9, r24
	/* Set frame format: 8data,  */
	UCSR1C = (3<<UCSZ10);
     fd8:	86 e0       	ldi	r24, 0x06	; 6
     fda:	80 93 ca 00 	sts	0x00CA, r24
} // USART_Init
     fde:	08 95       	ret

00000fe0 <USART_Transmit>:


void USART_Transmit(unsigned char data)
{
     fe0:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     fe2:	80 91 c8 00 	lds	r24, 0x00C8
     fe6:	85 ff       	sbrs	r24, 5
     fe8:	fc cf       	rjmp	.-8      	; 0xfe2 <USART_Transmit+0x2>
		;
	/* Put data into buffer, sends the data */
	UDR1 = data;
     fea:	90 93 ce 00 	sts	0x00CE, r25
}
     fee:	08 95       	ret

00000ff0 <atomIntEnter>:
 * @return None
 */
void atomIntEnter (void)
{
    /* Increment the interrupt count */
    atomIntCnt++;
     ff0:	80 91 43 0b 	lds	r24, 0x0B43
     ff4:	90 91 44 0b 	lds	r25, 0x0B44
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	90 93 44 0b 	sts	0x0B44, r25
     ffe:	80 93 43 0b 	sts	0x0B43, r24
}
    1002:	08 95       	ret

00001004 <atomCurrentContext>:
 * @retval Pointer to current thread's TCB, NULL if in interrupt context
 */
ATOM_TCB *atomCurrentContext (void)
{
    /* Return the current thread's TCB or NULL if in interrupt context */
    if (atomIntCnt == 0)
    1004:	80 91 43 0b 	lds	r24, 0x0B43
    1008:	90 91 44 0b 	lds	r25, 0x0B44
    100c:	89 2b       	or	r24, r25
    100e:	19 f0       	breq	.+6      	; 0x1016 <atomCurrentContext+0x12>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	04 c0       	rjmp	.+8      	; 0x101e <atomCurrentContext+0x1a>
        return (curr_tcb);
    1016:	20 91 41 0b 	lds	r18, 0x0B41
    101a:	30 91 42 0b 	lds	r19, 0x0B42
    else
        return (NULL);
}
    101e:	c9 01       	movw	r24, r18
    1020:	08 95       	ret

00001022 <atomIdleThread>:
 * @param[in] param Unused (optional thread entry parameter)
 *
 * @return None
 */
static void atomIdleThread (uint32_t param)
{
    1022:	ff cf       	rjmp	.-2      	; 0x1022 <atomIdleThread>

00001024 <tcbEnqueuePriority>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t tcbEnqueuePriority (ATOM_TCB **tcb_queue_ptr, ATOM_TCB *tcb_ptr)
{
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	8c 01       	movw	r16, r24
    102e:	db 01       	movw	r26, r22
    uint8_t status;
    ATOM_TCB *prev_ptr, *next_ptr;

    /* Parameter check */
    if ((tcb_queue_ptr == NULL) || (tcb_ptr == NULL))
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	a1 f1       	breq	.+104    	; 0x109c <tcbEnqueuePriority+0x78>
    1034:	61 15       	cp	r22, r1
    1036:	71 05       	cpc	r23, r1
    1038:	89 f1       	breq	.+98     	; 0x109c <tcbEnqueuePriority+0x78>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Walk the list and enqueue at the end of the TCBs at this priority */
        prev_ptr = next_ptr = *tcb_queue_ptr;
    103a:	ec 01       	movw	r28, r24
    103c:	48 81       	ld	r20, Y
    103e:	59 81       	ldd	r21, Y+1	; 0x01
    1040:	ea 01       	movw	r28, r20
    1042:	fa 01       	movw	r30, r20
        {
            /* Insert if:
             *   next_ptr = NULL (we're at the head of an empty queue or at the tail)
             *   the next TCB in the list is lower priority than the one we're enqueuing.
             */
            if ((next_ptr == NULL) || (next_ptr->priority > tcb_ptr->priority))
    1044:	30 97       	sbiw	r30, 0x00	; 0
    1046:	31 f0       	breq	.+12     	; 0x1054 <tcbEnqueuePriority+0x30>
    1048:	92 81       	ldd	r25, Z+2	; 0x02
    104a:	12 96       	adiw	r26, 0x02	; 2
    104c:	8c 91       	ld	r24, X
    104e:	12 97       	sbiw	r26, 0x02	; 2
    1050:	89 17       	cp	r24, r25
    1052:	f0 f4       	brcc	.+60     	; 0x1090 <tcbEnqueuePriority+0x6c>
            {
                /* Make this TCB the new listhead */
                if (next_ptr == *tcb_queue_ptr)
    1054:	e4 17       	cp	r30, r20
    1056:	f5 07       	cpc	r31, r21
    1058:	61 f4       	brne	.+24     	; 0x1072 <tcbEnqueuePriority+0x4e>
                {
                    *tcb_queue_ptr = tcb_ptr;
    105a:	e8 01       	movw	r28, r16
    105c:	b9 83       	std	Y+1, r27	; 0x01
    105e:	a8 83       	st	Y, r26
                    tcb_ptr->prev_tcb = NULL;
    1060:	1a 96       	adiw	r26, 0x0a	; 10
    1062:	1c 92       	st	X, r1
    1064:	1e 92       	st	-X, r1
    1066:	19 97       	sbiw	r26, 0x09	; 9
                    tcb_ptr->next_tcb = next_ptr;
    1068:	1c 96       	adiw	r26, 0x0c	; 12
    106a:	fc 93       	st	X, r31
    106c:	ee 93       	st	-X, r30
    106e:	1b 97       	sbiw	r26, 0x0b	; 11
    1070:	0a c0       	rjmp	.+20     	; 0x1086 <tcbEnqueuePriority+0x62>
                        next_ptr->prev_tcb = tcb_ptr;
                }
                /* Insert between two TCBs or at the tail */
                else
                {
                    tcb_ptr->prev_tcb = prev_ptr;
    1072:	1a 96       	adiw	r26, 0x0a	; 10
    1074:	dc 93       	st	X, r29
    1076:	ce 93       	st	-X, r28
    1078:	19 97       	sbiw	r26, 0x09	; 9
                    tcb_ptr->next_tcb = next_ptr;
    107a:	1c 96       	adiw	r26, 0x0c	; 12
    107c:	fc 93       	st	X, r31
    107e:	ee 93       	st	-X, r30
    1080:	1b 97       	sbiw	r26, 0x0b	; 11
                    prev_ptr->next_tcb = tcb_ptr;
    1082:	bc 87       	std	Y+12, r27	; 0x0c
    1084:	ab 87       	std	Y+11, r26	; 0x0b
                    if (next_ptr)
    1086:	30 97       	sbiw	r30, 0x00	; 0
    1088:	59 f0       	breq	.+22     	; 0x10a0 <tcbEnqueuePriority+0x7c>
                        next_ptr->prev_tcb = tcb_ptr;
    108a:	b2 87       	std	Z+10, r27	; 0x0a
    108c:	a1 87       	std	Z+9, r26	; 0x09
    108e:	08 c0       	rjmp	.+16     	; 0x10a0 <tcbEnqueuePriority+0x7c>
            }
            else
            {
                /* Not inserting here, try the next one */
                prev_ptr = next_ptr;
                next_ptr = next_ptr->next_tcb;
    1090:	ef 01       	movw	r28, r30
    1092:	83 85       	ldd	r24, Z+11	; 0x0b
    1094:	94 85       	ldd	r25, Z+12	; 0x0c
    1096:	9c 01       	movw	r18, r24
    1098:	f9 01       	movw	r30, r18
    109a:	d4 cf       	rjmp	.-88     	; 0x1044 <tcbEnqueuePriority+0x20>
    109c:	89 ec       	ldi	r24, 0xC9	; 201
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <tcbEnqueuePriority+0x7e>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
        /* Successful */
        status = ATOM_OK;
    }

    return (status);
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	08 95       	ret

000010ac <tcbDequeueHead>:
 * @param[in,out] tcb_queue_ptr Pointer to TCB queue head pointer
 *
 * @return Pointer to highest priority TCB on queue, or NULL if queue empty
 */
ATOM_TCB *tcbDequeueHead (ATOM_TCB **tcb_queue_ptr)
{
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    ATOM_TCB *ret_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	19 f4       	brne	.+6      	; 0x10bc <tcbDequeueHead+0x10>
    10b6:	e0 e0       	ldi	r30, 0x00	; 0
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	12 c0       	rjmp	.+36     	; 0x10e0 <tcbDequeueHead+0x34>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
    10bc:	e8 81       	ld	r30, Y
    10be:	f9 81       	ldd	r31, Y+1	; 0x01
    10c0:	30 97       	sbiw	r30, 0x00	; 0
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <tcbDequeueHead+0x34>
    }
    /* Remove and return the listhead */
    else
    {
        ret_ptr = *tcb_queue_ptr;
        *tcb_queue_ptr = ret_ptr->next_tcb;
    10c4:	a3 85       	ldd	r26, Z+11	; 0x0b
    10c6:	b4 85       	ldd	r27, Z+12	; 0x0c
    10c8:	b9 83       	std	Y+1, r27	; 0x01
    10ca:	a8 83       	st	Y, r26
        if (*tcb_queue_ptr)
    10cc:	10 97       	sbiw	r26, 0x00	; 0
    10ce:	21 f0       	breq	.+8      	; 0x10d8 <tcbDequeueHead+0x2c>
            (*tcb_queue_ptr)->prev_tcb = NULL;
    10d0:	1a 96       	adiw	r26, 0x0a	; 10
    10d2:	1c 92       	st	X, r1
    10d4:	1e 92       	st	-X, r1
    10d6:	19 97       	sbiw	r26, 0x09	; 9
        ret_ptr->next_tcb = ret_ptr->prev_tcb = NULL;
    10d8:	12 86       	std	Z+10, r1	; 0x0a
    10da:	11 86       	std	Z+9, r1	; 0x09
    10dc:	14 86       	std	Z+12, r1	; 0x0c
    10de:	13 86       	std	Z+11, r1	; 0x0b
    }
    return (ret_ptr);
}
    10e0:	cf 01       	movw	r24, r30
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <tcbDequeueEntry>:
 * @param[in] tcb_ptr Pointer to TCB to dequeue
 *
 * @return Pointer to the dequeued TCB, or NULL if entry wasn't found
 */
ATOM_TCB *tcbDequeueEntry (ATOM_TCB **tcb_queue_ptr, ATOM_TCB *tcb_ptr)
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ac 01       	movw	r20, r24
    10ee:	db 01       	movw	r26, r22
    ATOM_TCB *ret_ptr, *prev_ptr, *next_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	a9 f1       	breq	.+106    	; 0x115e <tcbDequeueEntry+0x76>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
    10f4:	ec 01       	movw	r28, r24
    10f6:	88 81       	ld	r24, Y
    10f8:	99 81       	ldd	r25, Y+1	; 0x01
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	81 f1       	breq	.+96     	; 0x115e <tcbDequeueEntry+0x76>
    10fe:	ec 01       	movw	r28, r24
    1100:	fc 01       	movw	r30, r24
        ret_ptr = NULL;
        prev_ptr = next_ptr = *tcb_queue_ptr;
        while (next_ptr)
        {
            /* Is this entry the one we're looking for? */
            if (next_ptr == tcb_ptr)
    1102:	ea 17       	cp	r30, r26
    1104:	fb 07       	cpc	r31, r27
    1106:	19 f5       	brne	.+70     	; 0x114e <tcbDequeueEntry+0x66>
    1108:	1b 96       	adiw	r26, 0x0b	; 11
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	1c 97       	sbiw	r26, 0x0c	; 12
            {
                if (next_ptr == *tcb_queue_ptr)
    1110:	a8 17       	cp	r26, r24
    1112:	b9 07       	cpc	r27, r25
    1114:	41 f4       	brne	.+16     	; 0x1126 <tcbDequeueEntry+0x3e>
                {
                    /* We're removing the list head */
                    *tcb_queue_ptr = next_ptr->next_tcb;
    1116:	ea 01       	movw	r28, r20
    1118:	f9 83       	std	Y+1, r31	; 0x01
    111a:	e8 83       	st	Y, r30
                    if (*tcb_queue_ptr)
    111c:	30 97       	sbiw	r30, 0x00	; 0
    111e:	69 f0       	breq	.+26     	; 0x113a <tcbDequeueEntry+0x52>
                        (*tcb_queue_ptr)->prev_tcb = NULL;
    1120:	12 86       	std	Z+10, r1	; 0x0a
    1122:	11 86       	std	Z+9, r1	; 0x09
    1124:	0a c0       	rjmp	.+20     	; 0x113a <tcbDequeueEntry+0x52>
                }
                else
                {
                    /* We're removing a mid or tail TCB */
                    prev_ptr->next_tcb = next_ptr->next_tcb;
    1126:	fc 87       	std	Y+12, r31	; 0x0c
    1128:	eb 87       	std	Y+11, r30	; 0x0b
                    if (next_ptr->next_tcb)
    112a:	1b 96       	adiw	r26, 0x0b	; 11
    112c:	ed 91       	ld	r30, X+
    112e:	fc 91       	ld	r31, X
    1130:	1c 97       	sbiw	r26, 0x0c	; 12
    1132:	30 97       	sbiw	r30, 0x00	; 0
    1134:	11 f0       	breq	.+4      	; 0x113a <tcbDequeueEntry+0x52>
                        next_ptr->next_tcb->prev_tcb = prev_ptr;
    1136:	d2 87       	std	Z+10, r29	; 0x0a
    1138:	c1 87       	std	Z+9, r28	; 0x09
                }
                ret_ptr = next_ptr;
                ret_ptr->prev_tcb = ret_ptr->next_tcb = NULL;
    113a:	1c 96       	adiw	r26, 0x0c	; 12
    113c:	1c 92       	st	X, r1
    113e:	1e 92       	st	-X, r1
    1140:	1b 97       	sbiw	r26, 0x0b	; 11
    1142:	1a 96       	adiw	r26, 0x0a	; 10
    1144:	1c 92       	st	X, r1
    1146:	1e 92       	st	-X, r1
    1148:	19 97       	sbiw	r26, 0x09	; 9
    114a:	bd 01       	movw	r22, r26
    114c:	0a c0       	rjmp	.+20     	; 0x1162 <tcbDequeueEntry+0x7a>
                break;
            }

            /* Move on to the next in the list */
            prev_ptr = next_ptr;
            next_ptr = next_ptr->next_tcb;
    114e:	23 85       	ldd	r18, Z+11	; 0x0b
    1150:	34 85       	ldd	r19, Z+12	; 0x0c
    1152:	ef 01       	movw	r28, r30
    /* Find and remove/return the specified entry */
    else
    {
        ret_ptr = NULL;
        prev_ptr = next_ptr = *tcb_queue_ptr;
        while (next_ptr)
    1154:	21 15       	cp	r18, r1
    1156:	31 05       	cpc	r19, r1
    1158:	11 f0       	breq	.+4      	; 0x115e <tcbDequeueEntry+0x76>
    115a:	f9 01       	movw	r30, r18
    115c:	d2 cf       	rjmp	.-92     	; 0x1102 <tcbDequeueEntry+0x1a>
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
            prev_ptr = next_ptr;
            next_ptr = next_ptr->next_tcb;
        }
    }
    return (ret_ptr);
}
    1162:	cb 01       	movw	r24, r22
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	08 95       	ret

0000116a <tcbDequeuePriority>:
 * @param[in] priority Minimum priority to qualify for dequeue
 *
 * @return Pointer to the dequeued TCB, or NULL if none found within priority
 */
ATOM_TCB *tcbDequeuePriority (ATOM_TCB **tcb_queue_ptr, uint8_t priority)
{
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ec 01       	movw	r28, r24
    ATOM_TCB *ret_ptr;

    /* Parameter check */
    if (tcb_queue_ptr == NULL)
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	c1 f0       	breq	.+48     	; 0x11a4 <tcbDequeuePriority+0x3a>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check for an empty queue */
    else if (*tcb_queue_ptr == NULL)
    1174:	a8 81       	ld	r26, Y
    1176:	b9 81       	ldd	r27, Y+1	; 0x01
    1178:	10 97       	sbiw	r26, 0x00	; 0
    117a:	b1 f0       	breq	.+44     	; 0x11a8 <tcbDequeuePriority+0x3e>
    {
        /* Return NULL */
        ret_ptr = NULL;
    }
    /* Check if the list head priority is within our range */
    else if ((*tcb_queue_ptr)->priority <= priority)
    117c:	12 96       	adiw	r26, 0x02	; 2
    117e:	8c 91       	ld	r24, X
    1180:	12 97       	sbiw	r26, 0x02	; 2
    1182:	68 17       	cp	r22, r24
    1184:	78 f0       	brcs	.+30     	; 0x11a4 <tcbDequeuePriority+0x3a>
    {
       /* Remove the list head */
        ret_ptr = *tcb_queue_ptr;
        *tcb_queue_ptr = (*tcb_queue_ptr)->next_tcb;
    1186:	1b 96       	adiw	r26, 0x0b	; 11
    1188:	ed 91       	ld	r30, X+
    118a:	fc 91       	ld	r31, X
    118c:	1c 97       	sbiw	r26, 0x0c	; 12
    118e:	f9 83       	std	Y+1, r31	; 0x01
    1190:	e8 83       	st	Y, r30
        if (*tcb_queue_ptr)
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	49 f0       	breq	.+18     	; 0x11a8 <tcbDequeuePriority+0x3e>
        {
            (*tcb_queue_ptr)->prev_tcb = NULL;
    1196:	12 86       	std	Z+10, r1	; 0x0a
    1198:	11 86       	std	Z+9, r1	; 0x09
            ret_ptr->next_tcb = NULL;
    119a:	1c 96       	adiw	r26, 0x0c	; 12
    119c:	1c 92       	st	X, r1
    119e:	1e 92       	st	-X, r1
    11a0:	1b 97       	sbiw	r26, 0x0b	; 11
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <tcbDequeuePriority+0x3e>
    11a4:	a0 e0       	ldi	r26, 0x00	; 0
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    {
        /* No higher priority ready threads found */
        ret_ptr = NULL;
    }
    return (ret_ptr);
}
    11a8:	cd 01       	movw	r24, r26
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <atomOSStart>:
    /**
     * Enable the OS started flag. This stops routines like atomThreadCreate()
     * attempting to schedule in a newly-created thread until the scheduler is
     * up and running.
     */
    atomOSStarted = TRUE;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 40 0b 	sts	0x0B40, r24
     * thread to the ready queue. Take the highest priority one off and
     * schedule it in. If no threads were created, the OS will simply start
     * the idle thread (the lowest priority allowed to be scheduled is the
     * idle thread's priority, 255).
     */
    new_tcb = tcbDequeuePriority (&tcbReadyQ, 255);
    11b6:	8e e3       	ldi	r24, 0x3E	; 62
    11b8:	9b e0       	ldi	r25, 0x0B	; 11
    11ba:	6f ef       	ldi	r22, 0xFF	; 255
    11bc:	0e 94 b5 08 	call	0x116a	; 0x116a <tcbDequeuePriority>
    if (new_tcb)
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <atomOSStart+0x20>
    {
        /* Set the new currently-running thread pointer */
        curr_tcb = new_tcb;
    11c4:	90 93 42 0b 	sts	0x0B42, r25
    11c8:	80 93 41 0b 	sts	0x0B41, r24

        /* Restore and run the first thread */
        archFirstThreadRestore (new_tcb);
    11cc:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <archFirstThreadRestore>
    11d0:	08 95       	ret

000011d2 <atomThreadSwitch>:
 * @param[in] new_tcb Pointer to TCB for thread being scheduled in
 *
 * @return None
 */
static void atomThreadSwitch(ATOM_TCB *old_tcb, ATOM_TCB *new_tcb)
{
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
    11dc:	8b 01       	movw	r16, r22
     * Check if the new thread is actually the current one, in which
     * case we don't need to do any context switch. This can happen
     * if a thread goes into suspend but is unsuspended again before
     * it is fully scheduled out.
     */
    if (old_tcb != new_tcb)
    11de:	86 17       	cp	r24, r22
    11e0:	97 07       	cpc	r25, r23
    11e2:	e1 f0       	breq	.+56     	; 0x121c <atomThreadSwitch+0x4a>
    {
        /* Set the new currently-running thread pointer */
        curr_tcb = new_tcb;
    11e4:	70 93 42 0b 	sts	0x0B42, r23
    11e8:	60 93 41 0b 	sts	0x0B41, r22
		if(ResumedTask==NULL)
    11ec:	80 91 dc 20 	lds	r24, 0x20DC
    11f0:	90 91 dd 20 	lds	r25, 0x20DD
    11f4:	89 2b       	or	r24, r25
    11f6:	19 f4       	brne	.+6      	; 0x11fe <atomThreadSwitch+0x2c>
		{
			TaskResumed(old_tcb);
    11f8:	ce 01       	movw	r24, r28
    11fa:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <TaskResumed>
		}		
		TaskPreempted(old_tcb,new_tcb);
    11fe:	ce 01       	movw	r24, r28
    1200:	b8 01       	movw	r22, r16
    1202:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <TaskPreempted>
		if(old_tcb->priority!=250)
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	8a 3f       	cpi	r24, 0xFA	; 250
    120a:	21 f0       	breq	.+8      	; 0x1214 <atomThreadSwitch+0x42>
		{

			ResumedTask=new_tcb;
    120c:	10 93 dd 20 	sts	0x20DD, r17
    1210:	00 93 dc 20 	sts	0x20DC, r16
		}

        /* Call the architecture-specific context switch */
        archContextSwitch (old_tcb, new_tcb);
    1214:	ce 01       	movw	r24, r28
    1216:	b8 01       	movw	r22, r16
    1218:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <archContextSwitch>
     * The context switch shifted execution to a different thread. By the time
     * we get back here, we are running in old_tcb context again. Clear its
     * suspend status now that we're back.
     */

     old_tcb->suspended = FALSE;
    121c:	1d 86       	std	Y+13, r1	; 0x0d

}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <atomSched>:
 * @param[in] timer_tick Should be TRUE when called from the system tick
 *
 * @return None
 */
void atomSched (uint8_t timer_tick)
{
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	98 2f       	mov	r25, r24
    /**
     * Check the OS has actually started. As long as the proper initialisation
     * sequence is followed there should be no calls here until the OS is
     * started, but we check to handle badly-behaved ports.
     */
    if (atomOSStarted == FALSE)
    1234:	80 91 40 0b 	lds	r24, 0x0B40
    1238:	88 23       	and	r24, r24
    123a:	69 f1       	breq	.+90     	; 0x1296 <atomSched+0x6e>
        /* Don't schedule anything in until the OS is started */
        return;
    }

    /* Enter critical section */
    CRITICAL_START ();
    123c:	ff b6       	in	r15, 0x3f	; 63
    123e:	f8 94       	cli

    /**
     * If the current thread is going into suspension, then
     * unconditionally dequeue the next thread for execution.
     */
    if (curr_tcb->suspended == TRUE)
    1240:	c0 91 41 0b 	lds	r28, 0x0B41
    1244:	d0 91 42 0b 	lds	r29, 0x0B42
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	39 f4       	brne	.+14     	; 0x125c <atomSched+0x34>
         * Dequeue the next ready to run thread. There will always be
         * at least the idle thread waiting. Note that this could
         * actually be the suspending thread if it was unsuspended
         * before the scheduler was called.
         */
        new_tcb = tcbDequeueHead (&tcbReadyQ);
    124e:	8e e3       	ldi	r24, 0x3E	; 62
    1250:	9b e0       	ldi	r25, 0x0B	; 11
    1252:	0e 94 56 08 	call	0x10ac	; 0x10ac <tcbDequeueHead>
    1256:	bc 01       	movw	r22, r24
         * sitting on a suspend queue or similar within one of the OS
         * primitive libraries (e.g. semaphore).
         */

        /* Switch to the new thread */
        atomThreadSwitch (curr_tcb, new_tcb);		
    1258:	ce 01       	movw	r24, r28
    125a:	1a c0       	rjmp	.+52     	; 0x1290 <atomSched+0x68>
    125c:	6a 81       	ldd	r22, Y+2	; 0x02
     * if any other threads are ready.
     */
    else
    {
        /* Calculate which priority is allowed to be scheduled in */
        if (timer_tick == TRUE)
    125e:	91 30       	cpi	r25, 0x01	; 1
    1260:	49 f0       	breq	.+18     	; 0x1274 <atomSched+0x4c>
        {
            /* Same priority or higher threads can preempt */
            lowest_pri = (int16_t)curr_tcb->priority;
        }
        else if (curr_tcb->priority > 0)
    1262:	66 23       	and	r22, r22
    1264:	b9 f0       	breq	.+46     	; 0x1294 <atomSched+0x6c>
        {
            /* Only higher priority threads can preempt, invalid for 0 (highest) */
            lowest_pri = (int16_t)(curr_tcb->priority - 1);
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	61 50       	subi	r22, 0x01	; 1
    126a:	70 40       	sbci	r23, 0x00	; 0
             */
            lowest_pri = -1;
        }

        /* Check if a reschedule is allowed */
        if (lowest_pri >= 0)
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	6f 3f       	cpi	r22, 0xFF	; 255
    1270:	78 07       	cpc	r23, r24
    1272:	81 f0       	breq	.+32     	; 0x1294 <atomSched+0x6c>
        {
            /* Check for a thread at the given minimum priority level or higher */
            new_tcb = tcbDequeuePriority (&tcbReadyQ, (uint8_t)lowest_pri);
    1274:	8e e3       	ldi	r24, 0x3E	; 62
    1276:	9b e0       	ldi	r25, 0x0B	; 11
    1278:	0e 94 b5 08 	call	0x116a	; 0x116a <tcbDequeuePriority>
    127c:	8c 01       	movw	r16, r24
            /* If a thread was found, schedule it in */
            if (new_tcb)
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	49 f0       	breq	.+18     	; 0x1294 <atomSched+0x6c>
            {

                /* Add the current thread to the ready queue */
                (void)tcbEnqueuePriority (&tcbReadyQ, curr_tcb);
    1282:	8e e3       	ldi	r24, 0x3E	; 62
    1284:	9b e0       	ldi	r25, 0x0B	; 11
    1286:	be 01       	movw	r22, r28
    1288:	0e 94 12 08 	call	0x1024	; 0x1024 <tcbEnqueuePriority>

                /* Switch to the new thread */
			
                atomThreadSwitch (curr_tcb, new_tcb);	
    128c:	ce 01       	movw	r24, r28
    128e:	b8 01       	movw	r22, r16
    1290:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <atomThreadSwitch>
            }
        }
    }

    /* Exit critical section */
    CRITICAL_END ();
    1294:	ff be       	out	0x3f, r15	; 63
}
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	ff 90       	pop	r15
    12a0:	08 95       	ret

000012a2 <atomIntExit>:
 * @return None
 */
void atomIntExit (uint8_t timer_tick)
{
    /* Decrement the interrupt count */
    atomIntCnt--;
    12a2:	20 91 43 0b 	lds	r18, 0x0B43
    12a6:	30 91 44 0b 	lds	r19, 0x0B44
    12aa:	21 50       	subi	r18, 0x01	; 1
    12ac:	30 40       	sbci	r19, 0x00	; 0
    12ae:	30 93 44 0b 	sts	0x0B44, r19
    12b2:	20 93 43 0b 	sts	0x0B43, r18
    /* Call the scheduler */
    atomSched (timer_tick);
    12b6:	0e 94 14 09 	call	0x1228	; 0x1228 <atomSched>
}
    12ba:	08 95       	ret

000012bc <atomThreadCreate>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 * @retval ATOM_ERR_QUEUE Error putting the thread on the ready queue
 */
uint8_t atomThreadCreate (ATOM_TCB *tcb_ptr, uint8_t priority, void (*entry_point)(uint32_t), uint32_t entry_param, void *stack_bottom, uint32_t stack_size, uint8_t stack_check)
{
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	4c 01       	movw	r8, r24
    uint8_t *stack_top;
#ifdef ATOM_STACK_CHECKING
	int32_t count;
#endif

    if ((tcb_ptr == NULL) || (entry_point == NULL) || (stack_bottom == NULL)
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <atomThreadCreate+0x24>
    12de:	4c c0       	rjmp	.+152    	; 0x1378 <atomThreadCreate+0xbc>
    12e0:	41 15       	cp	r20, r1
    12e2:	51 05       	cpc	r21, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <atomThreadCreate+0x2c>
    12e6:	48 c0       	rjmp	.+144    	; 0x1378 <atomThreadCreate+0xbc>
    12e8:	e1 14       	cp	r14, r1
    12ea:	f1 04       	cpc	r15, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <atomThreadCreate+0x34>
    12ee:	44 c0       	rjmp	.+136    	; 0x1378 <atomThreadCreate+0xbc>
    12f0:	a1 14       	cp	r10, r1
    12f2:	b1 04       	cpc	r11, r1
    12f4:	c1 04       	cpc	r12, r1
    12f6:	d1 04       	cpc	r13, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <atomThreadCreate+0x40>
    12fa:	3e c0       	rjmp	.+124    	; 0x1378 <atomThreadCreate+0xbc>
    }
    else
    {

        /* Set up the TCB initial values */
        tcb_ptr->suspended = FALSE;
    12fc:	fc 01       	movw	r30, r24
    12fe:	15 86       	std	Z+13, r1	; 0x0d
        tcb_ptr->priority = priority;
    1300:	62 83       	std	Z+2, r22	; 0x02
        tcb_ptr->prev_tcb = NULL;
    1302:	12 86       	std	Z+10, r1	; 0x0a
    1304:	11 86       	std	Z+9, r1	; 0x09
        tcb_ptr->next_tcb = NULL;
    1306:	14 86       	std	Z+12, r1	; 0x0c
    1308:	13 86       	std	Z+11, r1	; 0x0b
        tcb_ptr->suspend_timo_cb = NULL;
    130a:	10 8a       	std	Z+16, r1	; 0x10
    130c:	17 86       	std	Z+15, r1	; 0x0f
        /**
         * Store the thread entry point and parameter in the TCB. This may
         * not be necessary for all architecture ports if they put all of
         * this information in the initial thread stack.
         */
        tcb_ptr->entry_point = entry_point;
    130e:	54 83       	std	Z+4, r21	; 0x04
    1310:	43 83       	std	Z+3, r20	; 0x03
        tcb_ptr->entry_param = entry_param;
    1312:	05 83       	std	Z+5, r16	; 0x05
    1314:	16 83       	std	Z+6, r17	; 0x06
    1316:	27 83       	std	Z+7, r18	; 0x07
    1318:	30 87       	std	Z+8, r19	; 0x08
         * archContextSwitch() call when this thread gets scheduled in the
         * first time will then restore the program counter to the thread
         * entry point, and any other necessary register values ready for
         * it to start running.
         */
        archThreadContextInit (tcb_ptr, stack_top, entry_point, entry_param);
    131a:	b5 01       	movw	r22, r10
    131c:	61 50       	subi	r22, 0x01	; 1
    131e:	70 40       	sbci	r23, 0x00	; 0
    1320:	6e 0d       	add	r22, r14
    1322:	7f 1d       	adc	r23, r15
    1324:	0e 94 15 07 	call	0xe2a	; 0xe2a <archThreadContextInit>

        /* Protect access to the OS queue */
        CRITICAL_START ();
    1328:	1f b7       	in	r17, 0x3f	; 63
    132a:	f8 94       	cli

        /* Put this thread on the ready queue */
        if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    132c:	8e e3       	ldi	r24, 0x3E	; 62
    132e:	9b e0       	ldi	r25, 0x0B	; 11
    1330:	b4 01       	movw	r22, r8
    1332:	0e 94 12 08 	call	0x1024	; 0x1024 <tcbEnqueuePriority>
    1336:	88 23       	and	r24, r24
    1338:	19 f0       	breq	.+6      	; 0x1340 <atomThreadCreate+0x84>
        {
            /* Exit critical region */
            CRITICAL_END ();
    133a:	1f bf       	out	0x3f, r17	; 63
    133c:	8c ec       	ldi	r24, 0xCC	; 204
    133e:	1d c0       	rjmp	.+58     	; 0x137a <atomThreadCreate+0xbe>
            status = ATOM_ERR_QUEUE;
        }
        else
        {
            /* Exit critical region */
            CRITICAL_END ();
    1340:	1f bf       	out	0x3f, r17	; 63

            /**
             * If the OS is started and we're in thread context, check if we
             * should be scheduled in now.
             */
            if ((atomOSStarted == TRUE) && atomCurrentContext())
    1342:	80 91 40 0b 	lds	r24, 0x0B40
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	79 f4       	brne	.+30     	; 0x1368 <atomThreadCreate+0xac>
 * @retval Pointer to current thread's TCB, NULL if in interrupt context
 */
ATOM_TCB *atomCurrentContext (void)
{
    /* Return the current thread's TCB or NULL if in interrupt context */
    if (atomIntCnt == 0)
    134a:	80 91 43 0b 	lds	r24, 0x0B43
    134e:	90 91 44 0b 	lds	r25, 0x0B44
    1352:	89 2b       	or	r24, r25
    1354:	49 f4       	brne	.+18     	; 0x1368 <atomThreadCreate+0xac>

            /**
             * If the OS is started and we're in thread context, check if we
             * should be scheduled in now.
             */
            if ((atomOSStarted == TRUE) && atomCurrentContext())
    1356:	80 91 41 0b 	lds	r24, 0x0B41
    135a:	90 91 42 0b 	lds	r25, 0x0B42
    135e:	89 2b       	or	r24, r25
    1360:	19 f0       	breq	.+6      	; 0x1368 <atomThreadCreate+0xac>
                atomSched (FALSE);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0e 94 14 09 	call	0x1228	; 0x1228 <atomSched>

            /* Success */
            status = ATOM_OK;
			
			//Trace the task created event 
			TaskCreated(tcb_ptr);
    1368:	c4 01       	movw	r24, r8
    136a:	0e 94 80 0c 	call	0x1900	; 0x1900 <TaskCreated>
			TaskArrived(tcb_ptr);
    136e:	c4 01       	movw	r24, r8
    1370:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <TaskArrived>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	01 c0       	rjmp	.+2      	; 0x137a <atomThreadCreate+0xbe>
    1378:	89 ec       	ldi	r24, 0xC9	; 201
	



    return (status);
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	9f 90       	pop	r9
    1390:	8f 90       	pop	r8
    1392:	08 95       	ret

00001394 <atomOSInit>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERROR Initialisation error
 */
uint8_t atomOSInit (void *idle_thread_stack_bottom, uint32_t idle_thread_stack_size, uint8_t idle_thread_stack_check)
{
    1394:	8f 92       	push	r8
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	7c 01       	movw	r14, r24
    13a8:	5a 01       	movw	r10, r20
    13aa:	6b 01       	movw	r12, r22
    13ac:	82 2e       	mov	r8, r18
    uint8_t status;

    /* Initialise data */
    curr_tcb = NULL;
    13ae:	10 92 42 0b 	sts	0x0B42, r1
    13b2:	10 92 41 0b 	sts	0x0B41, r1
    tcbReadyQ = NULL;
    13b6:	10 92 3f 0b 	sts	0x0B3F, r1
    13ba:	10 92 3e 0b 	sts	0x0B3E, r1
    atomOSStarted = FALSE;
    13be:	10 92 40 0b 	sts	0x0B40, r1

    /* Create the idle thread */
    status = atomThreadCreate(&idle_tcb,
    13c2:	85 e4       	ldi	r24, 0x45	; 69
    13c4:	9b e0       	ldi	r25, 0x0B	; 11
    13c6:	6e ef       	ldi	r22, 0xFE	; 254
    13c8:	41 e1       	ldi	r20, 0x11	; 17
    13ca:	58 e0       	ldi	r21, 0x08	; 8
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	10 e0       	ldi	r17, 0x00	; 0
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <atomThreadCreate>
				 idle_thread_stack_check);

    /* Return status */
    return (status);

}
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	8f 90       	pop	r8
    13ea:	08 95       	ret

000013ec <atomMutexDelete>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout on a woken thread
 */
uint8_t atomMutexDelete (ATOM_MUTEX *mutex)
{
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr;
    uint8_t woken_threads = FALSE;

    /* Parameter check */
    if (mutex == NULL)
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	11 f4       	brne	.+4      	; 0x1402 <atomMutexDelete+0x16>
    13fe:	19 ec       	ldi	r17, 0xC9	; 201
    1400:	32 c0       	rjmp	.+100    	; 0x1466 <atomMutexDelete+0x7a>
        {
            /* Enter critical region */
            CRITICAL_START ();

            /* Check if any threads are suspended */
            tcb_ptr = tcbDequeueHead (&mutex->suspQ);
    1402:	7c 01       	movw	r14, r24
    1404:	00 e0       	ldi	r16, 0x00	; 0

            /* A thread is suspended on the mutex */
            if (tcb_ptr)
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    1406:	8a ec       	ldi	r24, 0xCA	; 202
    1408:	d8 2e       	mov	r13, r24

        /* Wake up all suspended tasks */
        while (1)
        {
            /* Enter critical region */
            CRITICAL_START ();
    140a:	1f b7       	in	r17, 0x3f	; 63
    140c:	f8 94       	cli

            /* Check if any threads are suspended */
            tcb_ptr = tcbDequeueHead (&mutex->suspQ);
    140e:	c7 01       	movw	r24, r14
    1410:	0e 94 56 08 	call	0x10ac	; 0x10ac <tcbDequeueHead>
    1414:	ec 01       	movw	r28, r24

            /* A thread is suspended on the mutex */
            if (tcb_ptr)
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	d9 f0       	breq	.+54     	; 0x1450 <atomMutexDelete+0x64>
            {
                /* Return error status to the waiting thread */
                tcb_ptr->suspend_wake_status = ATOM_ERR_DELETED;
    141a:	de 86       	std	Y+14, r13	; 0x0e

                /* Put the thread on the ready queue */
                if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    141c:	8e e3       	ldi	r24, 0x3E	; 62
    141e:	9b e0       	ldi	r25, 0x0B	; 11
    1420:	be 01       	movw	r22, r28
    1422:	0e 94 12 08 	call	0x1024	; 0x1024 <tcbEnqueuePriority>
    1426:	88 23       	and	r24, r24
    1428:	19 f0       	breq	.+6      	; 0x1430 <atomMutexDelete+0x44>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    142a:	1f bf       	out	0x3f, r17	; 63
    142c:	1c ec       	ldi	r17, 0xCC	; 204
    142e:	12 c0       	rjmp	.+36     	; 0x1454 <atomMutexDelete+0x68>
                    status = ATOM_ERR_QUEUE;
                    break;
                }

                /* If there's a timeout on this suspension, cancel it */
                if (tcb_ptr->suspend_timo_cb)
    1430:	8f 85       	ldd	r24, Y+15	; 0x0f
    1432:	98 89       	ldd	r25, Y+16	; 0x10
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	49 f0       	breq	.+18     	; 0x144a <atomMutexDelete+0x5e>
                {
                    /* Cancel the callback */
                    if (atomTimerCancel (tcb_ptr->suspend_timo_cb) != ATOM_OK)
    1438:	0e 94 8e 0b 	call	0x171c	; 0x171c <atomTimerCancel>
    143c:	88 23       	and	r24, r24
    143e:	19 f0       	breq	.+6      	; 0x1446 <atomMutexDelete+0x5a>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    1440:	1f bf       	out	0x3f, r17	; 63
    1442:	1d ec       	ldi	r17, 0xCD	; 205
    1444:	07 c0       	rjmp	.+14     	; 0x1454 <atomMutexDelete+0x68>
                        status = ATOM_ERR_TIMER;
                        break;
                    }

                    /* Flag as no timeout registered */
                    tcb_ptr->suspend_timo_cb = NULL;
    1446:	18 8a       	std	Y+16, r1	; 0x10
    1448:	1f 86       	std	Y+15, r1	; 0x0f

                }

                /* Exit critical region */
                CRITICAL_END ();
    144a:	1f bf       	out	0x3f, r17	; 63
    144c:	01 e0       	ldi	r16, 0x01	; 1
    144e:	dd cf       	rjmp	.-70     	; 0x140a <atomMutexDelete+0x1e>

            /* No more suspended threads */
            else
            {
                /* Exit critical region and quit the loop */
                CRITICAL_END ();
    1450:	1f bf       	out	0x3f, r17	; 63
    1452:	10 e0       	ldi	r17, 0x00	; 0
                break;
            }
        }

        /* Call scheduler if any threads were woken up */
        if (woken_threads == TRUE)
    1454:	01 30       	cpi	r16, 0x01	; 1
    1456:	39 f4       	brne	.+14     	; 0x1466 <atomMutexDelete+0x7a>
        {
            /**
             * Only call the scheduler if we are in thread context, otherwise
             * it will be called on exiting the ISR by atomIntExit().
             */
            if (atomCurrentContext())
    1458:	0e 94 02 08 	call	0x1004	; 0x1004 <atomCurrentContext>
    145c:	89 2b       	or	r24, r25
    145e:	19 f0       	breq	.+6      	; 0x1466 <atomMutexDelete+0x7a>
                atomSched (FALSE);
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	0e 94 14 09 	call	0x1228	; 0x1228 <atomSched>
        }
    }

    return (status);
}
    1466:	81 2f       	mov	r24, r17
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	08 95       	ret

00001478 <atomMutexPut>:
 * @retval ATOM_ERR_QUEUE Problem putting a woken thread on the ready queue
 * @retval ATOM_ERR_TIMER Problem cancelling a timeout for a woken thread
 * @retval ATOM_ERR_OWNERSHIP Attempt to unlock mutex not owned by this thread
 */
uint8_t atomMutexPut (ATOM_MUTEX * mutex)
{
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	7c 01       	movw	r14, r24
    uint8_t status;
    CRITICAL_STORE;
    ATOM_TCB *tcb_ptr, *curr_tcb_ptr;

    /* Check parameters */
    if (mutex == NULL)
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	11 f4       	brne	.+4      	; 0x1492 <atomMutexPut+0x1a>
    148e:	19 ec       	ldi	r17, 0xC9	; 201
    1490:	44 c0       	rjmp	.+136    	; 0x151a <atomMutexPut+0xa2>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Get the current TCB */
        curr_tcb_ptr = atomCurrentContext();
    1492:	0e 94 02 08 	call	0x1004	; 0x1004 <atomCurrentContext>
    1496:	6c 01       	movw	r12, r24

        /* Protect access to the mutex object and OS queues */
        CRITICAL_START ();
    1498:	0f b7       	in	r16, 0x3f	; 63
    149a:	f8 94       	cli

        /* Check if the calling thread owns this mutex */
        if (mutex->owner != curr_tcb_ptr)
    149c:	f7 01       	movw	r30, r14
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	8c 15       	cp	r24, r12
    14a4:	9d 05       	cpc	r25, r13
    14a6:	19 f0       	breq	.+6      	; 0x14ae <atomMutexPut+0x36>
        {
            /* Exit critical region */
            CRITICAL_END ();
    14a8:	0f bf       	out	0x3f, r16	; 63
    14aa:	1f ec       	ldi	r17, 0xCF	; 207
    14ac:	32 c0       	rjmp	.+100    	; 0x1512 <atomMutexPut+0x9a>
            status = ATOM_ERR_OWNERSHIP;
        }
        else
        {
            /* Lock is owned by this thread, decrement the recursive lock count */
            mutex->count--;
    14ae:	f7 01       	movw	r30, r14
    14b0:	84 81       	ldd	r24, Z+4	; 0x04
    14b2:	81 50       	subi	r24, 0x01	; 1
    14b4:	84 83       	std	Z+4, r24	; 0x04

            /* Once recursive lock count reaches zero, we relinquish ownership */
            if (mutex->count == 0)
    14b6:	88 23       	and	r24, r24
    14b8:	51 f5       	brne	.+84     	; 0x150e <atomMutexPut+0x96>
            {
                /* Relinquish ownership */
                mutex->owner = NULL;
    14ba:	13 82       	std	Z+3, r1	; 0x03
    14bc:	12 82       	std	Z+2, r1	; 0x02

                /* If any threads are blocking on this mutex, wake them now */
                if (mutex->suspQ)
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	89 2b       	or	r24, r25
    14c4:	21 f1       	breq	.+72     	; 0x150e <atomMutexPut+0x96>
                    /**
                     * Threads are woken up in priority order, with a FIFO system
                     * used on same priority threads. We always take the head,
                     * ordering is taken care of by an ordered list enqueue.
                     */
                    tcb_ptr = tcbDequeueHead (&mutex->suspQ);
    14c6:	c7 01       	movw	r24, r14
    14c8:	0e 94 56 08 	call	0x10ac	; 0x10ac <tcbDequeueHead>
    14cc:	ec 01       	movw	r28, r24
                    if (tcbEnqueuePriority (&tcbReadyQ, tcb_ptr) != ATOM_OK)
    14ce:	8e e3       	ldi	r24, 0x3E	; 62
    14d0:	9b e0       	ldi	r25, 0x0B	; 11
    14d2:	be 01       	movw	r22, r28
    14d4:	0e 94 12 08 	call	0x1024	; 0x1024 <tcbEnqueuePriority>
    14d8:	88 23       	and	r24, r24
    14da:	19 f0       	breq	.+6      	; 0x14e2 <atomMutexPut+0x6a>
                    {
                        /* Exit critical region */
                        CRITICAL_END ();
    14dc:	0f bf       	out	0x3f, r16	; 63
    14de:	1c ec       	ldi	r17, 0xCC	; 204
    14e0:	18 c0       	rjmp	.+48     	; 0x1512 <atomMutexPut+0x9a>
                        status = ATOM_ERR_QUEUE;
                    }
                    else
                    {
                        /* Set OK status to be returned to the waiting thread */
                        tcb_ptr->suspend_wake_status = ATOM_OK;
    14e2:	1e 86       	std	Y+14, r1	; 0x0e

                        /* Set this thread as the new owner of the mutex */
                        mutex->owner = tcb_ptr;
    14e4:	f7 01       	movw	r30, r14
    14e6:	d3 83       	std	Z+3, r29	; 0x03
    14e8:	c2 83       	std	Z+2, r28	; 0x02

                        /* If there's a timeout on this suspension, cancel it */
                        if ((tcb_ptr->suspend_timo_cb != NULL)
    14ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ec:	98 89       	ldd	r25, Y+16	; 0x10
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	31 f0       	breq	.+12     	; 0x14fe <atomMutexPut+0x86>
    14f2:	0e 94 8e 0b 	call	0x171c	; 0x171c <atomTimerCancel>
    14f6:	88 23       	and	r24, r24
    14f8:	11 f0       	breq	.+4      	; 0x14fe <atomMutexPut+0x86>
    14fa:	1d ec       	ldi	r17, 0xCD	; 205
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <atomMutexPut+0x8c>
                            status = ATOM_ERR_TIMER;
                        }
                        else
                        {
                            /* Flag as no timeout registered */
                            tcb_ptr->suspend_timo_cb = NULL;
    14fe:	18 8a       	std	Y+16, r1	; 0x10
    1500:	1f 86       	std	Y+15, r1	; 0x0f
    1502:	10 e0       	ldi	r17, 0x00	; 0
                            /* Successful */
                            status = ATOM_OK;
                        }

                        /* Exit critical region */
                        CRITICAL_END ();
    1504:	0f bf       	out	0x3f, r16	; 63
                        /**
                         * The scheduler may now make a policy decision to
                         * thread switch. We already know we are in thread
                         * context so can call the scheduler from here.
                         */
                        atomSched (FALSE);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	0e 94 14 09 	call	0x1228	; 0x1228 <atomSched>
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <atomMutexPut+0x9a>
                 * Decremented lock but still retain ownership due to
                 * recursion. Nothing to do.
                 */

                /* Exit critical region */
                CRITICAL_END ();
    150e:	0f bf       	out	0x3f, r16	; 63
    1510:	10 e0       	ldi	r17, 0x00	; 0

                /* Successful */
                status = ATOM_OK;
            }
        }	
		MutexPutted(mutex,curr_tcb_ptr);
    1512:	c7 01       	movw	r24, r14
    1514:	b6 01       	movw	r22, r12
    1516:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <MutexPutted>
    }

    return (status);
}
    151a:	81 2f       	mov	r24, r17
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	08 95       	ret

0000152e <atomMutexTimerCallback>:
 * mutex details.
 *
 * @param[in] cb_data Pointer to a MUTEX_TIMER object
 */
static void atomMutexTimerCallback (POINTER cb_data)
{
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    MUTEX_TIMER *timer_data_ptr;
    CRITICAL_STORE;

    /* Get the MUTEX_TIMER structure pointer */
    timer_data_ptr = (MUTEX_TIMER *)cb_data;
    1534:	ec 01       	movw	r28, r24

    /* Check parameter is valid */
    if (timer_data_ptr)
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	b1 f0       	breq	.+44     	; 0x1566 <atomMutexTimerCallback+0x38>
    {
        /* Enter critical region */
        CRITICAL_START ();
    153a:	1f b7       	in	r17, 0x3f	; 63
    153c:	f8 94       	cli

        /* Set status to indicate to the waiting thread that it timed out */
        timer_data_ptr->tcb_ptr->suspend_wake_status = ATOM_TIMEOUT;
    153e:	e8 81       	ld	r30, Y
    1540:	f9 81       	ldd	r31, Y+1	; 0x01
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	86 87       	std	Z+14, r24	; 0x0e

        /* Flag as no timeout registered */
        timer_data_ptr->tcb_ptr->suspend_timo_cb = NULL;
    1546:	e8 81       	ld	r30, Y
    1548:	f9 81       	ldd	r31, Y+1	; 0x01
    154a:	10 8a       	std	Z+16, r1	; 0x10
    154c:	17 86       	std	Z+15, r1	; 0x0f

        /* Remove this thread from the mutex's suspend list */
        (void)tcbDequeueEntry (&timer_data_ptr->mutex_ptr->suspQ, timer_data_ptr->tcb_ptr);
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	9b 81       	ldd	r25, Y+3	; 0x03
    1552:	bf 01       	movw	r22, r30
    1554:	0e 94 74 08 	call	0x10e8	; 0x10e8 <tcbDequeueEntry>

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    1558:	68 81       	ld	r22, Y
    155a:	79 81       	ldd	r23, Y+1	; 0x01
    155c:	8e e3       	ldi	r24, 0x3E	; 62
    155e:	9b e0       	ldi	r25, 0x0B	; 11
    1560:	0e 94 12 08 	call	0x1024	; 0x1024 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    1564:	1f bf       	out	0x3f, r17	; 63
        /**
         * Note that we don't call the scheduler now as it will be called
         * when we exit the ISR by atomIntExit().
         */
    }
}
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	08 95       	ret

0000156e <atomMutexGet>:
 * @retval ATOM_ERR_QUEUE Problem putting the thread on the suspend queue
 * @retval ATOM_ERR_TIMER Problem registering the timeout
 * @retval ATOM_ERR_OVF The recursive lock count would have overflowed (>255)
 */
uint8_t atomMutexGet (ATOM_MUTEX *mutex, int32_t timeout)
{
    156e:	8f 92       	push	r8
    1570:	9f 92       	push	r9
    1572:	af 92       	push	r10
    1574:	bf 92       	push	r11
    1576:	cf 92       	push	r12
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	2e 97       	sbiw	r28, 0x0e	; 14
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	7c 01       	movw	r14, r24
    1598:	4a 01       	movw	r8, r20
    159a:	5b 01       	movw	r10, r22
    MUTEX_TIMER timer_data;
    ATOM_TIMER timer_cb;
    ATOM_TCB *curr_tcb_ptr;

    /* Check parameters */
    if (mutex == NULL)
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	11 f4       	brne	.+4      	; 0x15a4 <atomMutexGet+0x36>
    15a0:	19 ec       	ldi	r17, 0xC9	; 201
    15a2:	75 c0       	rjmp	.+234    	; 0x168e <atomMutexGet+0x120>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Get the current TCB */
        curr_tcb_ptr = atomCurrentContext();
    15a4:	0e 94 02 08 	call	0x1004	; 0x1004 <atomCurrentContext>
    15a8:	6c 01       	movw	r12, r24

        /* Protect access to the mutex object and OS queues */
        CRITICAL_START ();
    15aa:	0f b7       	in	r16, 0x3f	; 63
    15ac:	f8 94       	cli
		/**
         * Check we are at thread context. Because mutexes have the concept of
         * owner threads, it is never valid to call here from an ISR,
         * regardless of whether we will block.
         */
        if (curr_tcb_ptr == NULL)
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <atomMutexGet+0x4a>
        {
            /* Exit critical region */
            CRITICAL_END ();
    15b2:	0f bf       	out	0x3f, r16	; 63
    15b4:	18 ec       	ldi	r17, 0xC8	; 200
    15b6:	67 c0       	rjmp	.+206    	; 0x1686 <atomMutexGet+0x118>
            /* Not currently in thread context, can't suspend */
            status = ATOM_ERR_CONTEXT;
        }

        /* Otherwise if mutex is owned by another thread, block the calling thread */
        else if ((mutex->owner != NULL) && (mutex->owner != curr_tcb_ptr))
    15b8:	f7 01       	movw	r30, r14
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <atomMutexGet+0x56>
    15c2:	4f c0       	rjmp	.+158    	; 0x1662 <atomMutexGet+0xf4>
    15c4:	8c 15       	cp	r24, r12
    15c6:	9d 05       	cpc	r25, r13
    15c8:	09 f4       	brne	.+2      	; 0x15cc <atomMutexGet+0x5e>
    15ca:	4b c0       	rjmp	.+150    	; 0x1662 <atomMutexGet+0xf4>
        {
            /* If called with timeout >= 0, we should block */
            if (timeout >= 0)
    15cc:	b7 fc       	sbrc	r11, 7
    15ce:	46 c0       	rjmp	.+140    	; 0x165c <atomMutexGet+0xee>
            {
                /* Add current thread to the suspend list on this mutex */
                if (tcbEnqueuePriority (&mutex->suspQ, curr_tcb_ptr) != ATOM_OK)
    15d0:	c7 01       	movw	r24, r14
    15d2:	b6 01       	movw	r22, r12
    15d4:	0e 94 12 08 	call	0x1024	; 0x1024 <tcbEnqueuePriority>
    15d8:	88 23       	and	r24, r24
    15da:	19 f0       	breq	.+6      	; 0x15e2 <atomMutexGet+0x74>
                {
                    /* Exit critical region */
                    CRITICAL_END ();
    15dc:	0f bf       	out	0x3f, r16	; 63
    15de:	1c ec       	ldi	r17, 0xCC	; 204
    15e0:	52 c0       	rjmp	.+164    	; 0x1686 <atomMutexGet+0x118>
                    status = ATOM_ERR_QUEUE;
                }
                else
                {
                    /* Set suspended status for the current thread */
                    curr_tcb_ptr->suspended = TRUE;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	f6 01       	movw	r30, r12
    15e6:	85 87       	std	Z+13, r24	; 0x0d

                    /* Track errors */
                    status = ATOM_OK;

                    /* Register a timer callback if requested */
                    if (timeout)
    15e8:	81 14       	cp	r8, r1
    15ea:	91 04       	cpc	r9, r1
    15ec:	a1 04       	cpc	r10, r1
    15ee:	b1 04       	cpc	r11, r1
    15f0:	11 f1       	breq	.+68     	; 0x1636 <atomMutexGet+0xc8>
                    {
                        /* Fill out the data needed by the callback to wake us up */
                        timer_data.tcb_ptr = curr_tcb_ptr;
    15f2:	da 82       	std	Y+2, r13	; 0x02
    15f4:	c9 82       	std	Y+1, r12	; 0x01
                        timer_data.mutex_ptr = mutex;
    15f6:	fc 82       	std	Y+4, r15	; 0x04
    15f8:	eb 82       	std	Y+3, r14	; 0x03

                        /* Fill out the timer callback request structure */
                        timer_cb.cb_func = atomMutexTimerCallback;
    15fa:	87 e9       	ldi	r24, 0x97	; 151
    15fc:	9a e0       	ldi	r25, 0x0A	; 10
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
                        timer_cb.cb_data = (POINTER)&timer_data;
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	98 87       	std	Y+8, r25	; 0x08
    1608:	8f 83       	std	Y+7, r24	; 0x07
                        timer_cb.cb_ticks = timeout;
    160a:	89 86       	std	Y+9, r8	; 0x09
    160c:	9a 86       	std	Y+10, r9	; 0x0a
    160e:	ab 86       	std	Y+11, r10	; 0x0b
    1610:	bc 86       	std	Y+12, r11	; 0x0c
                        /**
                         * Store the timer details in the TCB so that we can
                         * cancel the timer callback if the mutex is put
                         * before the timeout occurs.
                         */
                        curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    1612:	ce 01       	movw	r24, r28
    1614:	05 96       	adiw	r24, 0x05	; 5
    1616:	90 8b       	std	Z+16, r25	; 0x10
    1618:	87 87       	std	Z+15, r24	; 0x0f

                        /* Register a callback on timeout */
                        if (atomTimerRegister (&timer_cb) != ATOM_OK)
    161a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <atomTimerRegister>
    161e:	88 23       	and	r24, r24
    1620:	69 f0       	breq	.+26     	; 0x163c <atomMutexGet+0xce>
                        {
                            /* Timer registration failed */
                            status = ATOM_ERR_TIMER;

                            /* Clean up and return to the caller */
                            (void)tcbDequeueEntry (&mutex->suspQ, curr_tcb_ptr);
    1622:	c7 01       	movw	r24, r14
    1624:	b6 01       	movw	r22, r12
    1626:	0e 94 74 08 	call	0x10e8	; 0x10e8 <tcbDequeueEntry>
                            curr_tcb_ptr->suspended = FALSE;
    162a:	f6 01       	movw	r30, r12
    162c:	15 86       	std	Z+13, r1	; 0x0d
                            curr_tcb_ptr->suspend_timo_cb = NULL;
    162e:	10 8a       	std	Z+16, r1	; 0x10
    1630:	17 86       	std	Z+15, r1	; 0x0f
    1632:	1d ec       	ldi	r17, 0xCD	; 205
    1634:	04 c0       	rjmp	.+8      	; 0x163e <atomMutexGet+0xd0>

                    /* Set no timeout requested */
                    else
                    {
                        /* No need to cancel timeouts on this one */
                        curr_tcb_ptr->suspend_timo_cb = NULL;
    1636:	f6 01       	movw	r30, r12
    1638:	10 8a       	std	Z+16, r1	; 0x10
    163a:	17 86       	std	Z+15, r1	; 0x0f
    163c:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    /* Exit critical region */
                    CRITICAL_END ();
    163e:	0f bf       	out	0x3f, r16	; 63

                    /* Check no errors have occurred */
                    if (status == ATOM_OK)
    1640:	11 23       	and	r17, r17
    1642:	09 f5       	brne	.+66     	; 0x1686 <atomMutexGet+0x118>
                        /**
                         * Current thread now blocking, schedule in a new
                         * one. We already know we are in thread context
                         * so can call the scheduler from here.
                         */
                        atomSched (FALSE);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	0e 94 14 09 	call	0x1228	; 0x1228 <atomSched>

                        /**
                         * Normal atomMutexPut() wakeups will set ATOM_OK status,
                         * while timeouts will set ATOM_TIMEOUT and mutex
                         * deletions will set ATOM_ERR_DELETED. */
                        status = curr_tcb_ptr->suspend_wake_status;
    164a:	f6 01       	movw	r30, r12
    164c:	16 85       	ldd	r17, Z+14	; 0x0e
                         * owner before waking the thread ensures that no other
                         * thread can preempt and take ownership of the mutex
                         * between this thread being made ready to run, and
                         * actually being scheduled back in here.
                         */
                        if (status == ATOM_OK)
    164e:	11 23       	and	r17, r17
    1650:	d1 f4       	brne	.+52     	; 0x1686 <atomMutexGet+0x118>
                            /**
                             * Since this thread has just gained ownership, the
                             * lock count is zero and should be incremented
                             * once for this call.
                             */
                            mutex->count++;
    1652:	f7 01       	movw	r30, r14
    1654:	84 81       	ldd	r24, Z+4	; 0x04
    1656:	8f 5f       	subi	r24, 0xFF	; 255
    1658:	84 83       	std	Z+4, r24	; 0x04
    165a:	15 c0       	rjmp	.+42     	; 0x1686 <atomMutexGet+0x118>
                }
            }
            else
            {
                /* timeout == -1, requested not to block and mutex is owned by another thread */
                CRITICAL_END();
    165c:	0f bf       	out	0x3f, r16	; 63
    165e:	13 e0       	ldi	r17, 0x03	; 3
    1660:	12 c0       	rjmp	.+36     	; 0x1686 <atomMutexGet+0x118>
        else
        {
            /* Thread is not owned or is owned by us, we can claim ownership */

            /* Increment the lock count, checking for count overflow */
            if (mutex->count == 255)
    1662:	f7 01       	movw	r30, r14
    1664:	84 81       	ldd	r24, Z+4	; 0x04
    1666:	8f 3f       	cpi	r24, 0xFF	; 255
    1668:	11 f4       	brne	.+4      	; 0x166e <atomMutexGet+0x100>
    166a:	1b ec       	ldi	r17, 0xCB	; 203
    166c:	0b c0       	rjmp	.+22     	; 0x1684 <atomMutexGet+0x116>
                status = ATOM_ERR_OVF;
            }
            else
            {
                /* Increment the count and return to the calling thread */
                mutex->count++;
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	f7 01       	movw	r30, r14
    1672:	84 83       	std	Z+4, r24	; 0x04

                /* If the mutex is not locked, mark the calling thread as the new owner */
                if (mutex->owner == NULL)
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	89 2b       	or	r24, r25
    167a:	19 f4       	brne	.+6      	; 0x1682 <atomMutexGet+0x114>
                {
                    mutex->owner = curr_tcb_ptr;
    167c:	f7 01       	movw	r30, r14
    167e:	d3 82       	std	Z+3, r13	; 0x03
    1680:	c2 82       	std	Z+2, r12	; 0x02
    1682:	10 e0       	ldi	r17, 0x00	; 0


            }

            /* Exit critical region */
            CRITICAL_END ();
    1684:	0f bf       	out	0x3f, r16	; 63
        }
		MutexGetted(mutex,curr_tcb_ptr);
    1686:	c7 01       	movw	r24, r14
    1688:	b6 01       	movw	r22, r12
    168a:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <MutexGetted>
    }
	return (status);
}
    168e:	81 2f       	mov	r24, r17
    1690:	2e 96       	adiw	r28, 0x0e	; 14
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
    16aa:	cf 90       	pop	r12
    16ac:	bf 90       	pop	r11
    16ae:	af 90       	pop	r10
    16b0:	9f 90       	pop	r9
    16b2:	8f 90       	pop	r8
    16b4:	08 95       	ret

000016b6 <atomMutexCreate>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomMutexCreate (ATOM_MUTEX *mutex)
{
    16b6:	fc 01       	movw	r30, r24
    uint8_t status;

    /* Parameter check */
    if (mutex == NULL)
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	11 f4       	brne	.+4      	; 0x16c0 <atomMutexCreate+0xa>
    16bc:	89 ec       	ldi	r24, 0xC9	; 201
    16be:	08 95       	ret
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Start with no owner (unlocked) */
        mutex->owner = NULL;
    16c0:	13 82       	std	Z+3, r1	; 0x03
    16c2:	12 82       	std	Z+2, r1	; 0x02

        /* Reset the initial lock count */
        mutex->count = 0;
    16c4:	14 82       	std	Z+4, r1	; 0x04

        /* Initialise the suspended threads queue */
        mutex->suspQ = NULL;
    16c6:	11 82       	std	Z+1, r1	; 0x01
    16c8:	10 82       	st	Z, r1

        /* Successful */
        status = ATOM_OK;
		MutexCreated(mutex);
    16ca:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <MutexCreated>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    }
	
    return (status);
}
    16d0:	08 95       	ret

000016d2 <atomTimerRegister>:
 *
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 */
uint8_t atomTimerRegister (ATOM_TIMER *timer_ptr)
{
    16d2:	fc 01       	movw	r30, r24
    uint8_t status;
    CRITICAL_STORE;

    /* Parameter check */
    if ((timer_ptr == NULL) || (timer_ptr->cb_func == NULL)
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	01 f1       	breq	.+64     	; 0x1718 <atomTimerRegister+0x46>
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	89 2b       	or	r24, r25
    16de:	e1 f0       	breq	.+56     	; 0x1718 <atomTimerRegister+0x46>
    16e0:	84 81       	ldd	r24, Z+4	; 0x04
    16e2:	95 81       	ldd	r25, Z+5	; 0x05
    16e4:	a6 81       	ldd	r26, Z+6	; 0x06
    16e6:	b7 81       	ldd	r27, Z+7	; 0x07
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	a1 05       	cpc	r26, r1
    16ec:	b1 05       	cpc	r27, r1
    16ee:	a1 f0       	breq	.+40     	; 0x1718 <atomTimerRegister+0x46>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect the list */
        CRITICAL_START ();
    16f0:	2f b7       	in	r18, 0x3f	; 63
    16f2:	f8 94       	cli
         * of the list. On each system tick increment the list is walked
         * and the remaining ticks count for that timer is decremented.
         * Once the remaining ticks reaches zero, the timer callback is
         * made.
         */
        if (timer_queue == NULL)
    16f4:	80 91 5a 0b 	lds	r24, 0x0B5A
    16f8:	90 91 5b 0b 	lds	r25, 0x0B5B
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	19 f4       	brne	.+6      	; 0x1706 <atomTimerRegister+0x34>
        {
            /* List is empty, insert new head */
            timer_ptr->next_timer = NULL;
    1700:	11 86       	std	Z+9, r1	; 0x09
    1702:	10 86       	std	Z+8, r1	; 0x08
    1704:	02 c0       	rjmp	.+4      	; 0x170a <atomTimerRegister+0x38>
            timer_queue = timer_ptr;
        }
        else
        {
            /* List has at least one entry, enqueue new timer before */
            timer_ptr->next_timer = timer_queue;
    1706:	91 87       	std	Z+9, r25	; 0x09
    1708:	80 87       	std	Z+8, r24	; 0x08
            timer_queue = timer_ptr;
    170a:	f0 93 5b 0b 	sts	0x0B5B, r31
    170e:	e0 93 5a 0b 	sts	0x0B5A, r30
        }

        /* End of list protection */
        CRITICAL_END ();
    1712:	2f bf       	out	0x3f, r18	; 63
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret
    1718:	89 ec       	ldi	r24, 0xC9	; 201
        /* Successful */
        status = ATOM_OK;
    }

    return (status);
}
    171a:	08 95       	ret

0000171c <atomTimerCancel>:
 * @retval ATOM_OK Success
 * @retval ATOM_ERR_PARAM Bad parameters
 * @retval ATOM_ERR_NOT_FOUND Timer registration was not found
 */
uint8_t atomTimerCancel (ATOM_TIMER *timer_ptr)
{
    171c:	1f 93       	push	r17
    171e:	bc 01       	movw	r22, r24
    uint8_t status = ATOM_ERR_NOT_FOUND;
    ATOM_TIMER *prev_ptr, *next_ptr;
    CRITICAL_STORE;

    /* Parameter check */
    if (timer_ptr == NULL)
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	11 f4       	brne	.+4      	; 0x1728 <atomTimerCancel+0xc>
    1724:	89 ec       	ldi	r24, 0xC9	; 201
    1726:	25 c0       	rjmp	.+74     	; 0x1772 <atomTimerCancel+0x56>
        status = ATOM_ERR_PARAM;
    }
    else
    {
        /* Protect the list */
        CRITICAL_START ();
    1728:	1f b7       	in	r17, 0x3f	; 63
    172a:	f8 94       	cli

        /* Walk the list to find the relevant timer */
        prev_ptr = next_ptr = timer_queue;
    172c:	40 91 5a 0b 	lds	r20, 0x0B5A
    1730:	50 91 5b 0b 	lds	r21, 0x0B5B
    1734:	da 01       	movw	r26, r20
    1736:	fa 01       	movw	r30, r20
    1738:	18 c0       	rjmp	.+48     	; 0x176a <atomTimerCancel+0x4e>
        while (next_ptr)
        {
            /* Is this entry the one we're looking for? */
            if (next_ptr == timer_ptr)
    173a:	e6 17       	cp	r30, r22
    173c:	f7 07       	cpc	r31, r23
    173e:	81 f4       	brne	.+32     	; 0x1760 <atomTimerCancel+0x44>
    1740:	80 85       	ldd	r24, Z+8	; 0x08
    1742:	91 85       	ldd	r25, Z+9	; 0x09
            {
                if (next_ptr == timer_queue)
    1744:	e4 17       	cp	r30, r20
    1746:	f5 07       	cpc	r31, r21
    1748:	29 f4       	brne	.+10     	; 0x1754 <atomTimerCancel+0x38>
                {
                    /* We're removing the list head */
                    timer_queue = next_ptr->next_timer;
    174a:	90 93 5b 0b 	sts	0x0B5B, r25
    174e:	80 93 5a 0b 	sts	0x0B5A, r24
    1752:	04 c0       	rjmp	.+8      	; 0x175c <atomTimerCancel+0x40>
                }
                else
                {
                    /* We're removing a mid or tail TCB */
                    prev_ptr->next_timer = next_ptr->next_timer;
    1754:	19 96       	adiw	r26, 0x09	; 9
    1756:	9c 93       	st	X, r25
    1758:	8e 93       	st	-X, r24
    175a:	18 97       	sbiw	r26, 0x08	; 8
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <atomTimerCancel+0x54>
                break;
            }

            /* Move on to the next in the list */
            prev_ptr = next_ptr;
            next_ptr = next_ptr->next_timer;
    1760:	df 01       	movw	r26, r30
    1762:	80 85       	ldd	r24, Z+8	; 0x08
    1764:	91 85       	ldd	r25, Z+9	; 0x09
    1766:	9c 01       	movw	r18, r24
    1768:	f9 01       	movw	r30, r18
        /* Protect the list */
        CRITICAL_START ();

        /* Walk the list to find the relevant timer */
        prev_ptr = next_ptr = timer_queue;
        while (next_ptr)
    176a:	30 97       	sbiw	r30, 0x00	; 0
    176c:	31 f7       	brne	.-52     	; 0x173a <atomTimerCancel+0x1e>
    176e:	8e ec       	ldi	r24, 0xCE	; 206
            next_ptr = next_ptr->next_timer;

        }

        /* End of list protection */
        CRITICAL_END ();
    1770:	1f bf       	out	0x3f, r17	; 63
     }

    return (status);
}
    1772:	1f 91       	pop	r17
    1774:	08 95       	ret

00001776 <atomTimeGet>:
 *
 * @retval Current system tick count

 */
uint32_t atomTimeGet(void)
{
    1776:	60 91 56 0b 	lds	r22, 0x0B56
    177a:	70 91 57 0b 	lds	r23, 0x0B57
    return (system_ticks);
}
    177e:	80 91 58 0b 	lds	r24, 0x0B58
    1782:	90 91 59 0b 	lds	r25, 0x0B59
    1786:	08 95       	ret

00001788 <atomTimeSet>:
 *
 * @return None
 */
void atomTimeSet(uint32_t new_time)
{
    system_ticks = new_time;
    1788:	60 93 56 0b 	sts	0x0B56, r22
    178c:	70 93 57 0b 	sts	0x0B57, r23
    1790:	80 93 58 0b 	sts	0x0B58, r24
    1794:	90 93 59 0b 	sts	0x0B59, r25
}
    1798:	08 95       	ret

0000179a <atomTimerTick>:
 *  2. Call back to any registered timer callbacks
 *
 * @return None
 */
void atomTimerTick (void)
{
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    /* Only do anything if the OS is started */
    if (atomOSStarted)
    17a2:	80 91 40 0b 	lds	r24, 0x0B40
    17a6:	88 23       	and	r24, r24
    17a8:	09 f4       	brne	.+2      	; 0x17ac <atomTimerTick+0x12>
    17aa:	47 c0       	rjmp	.+142    	; 0x183a <atomTimerTick+0xa0>
    {
        /* Increment the system tick count */
        system_ticks++;
    17ac:	80 91 56 0b 	lds	r24, 0x0B56
    17b0:	90 91 57 0b 	lds	r25, 0x0B57
    17b4:	a0 91 58 0b 	lds	r26, 0x0B58
    17b8:	b0 91 59 0b 	lds	r27, 0x0B59
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	a1 1d       	adc	r26, r1
    17c0:	b1 1d       	adc	r27, r1
    17c2:	80 93 56 0b 	sts	0x0B56, r24
    17c6:	90 93 57 0b 	sts	0x0B57, r25
    17ca:	a0 93 58 0b 	sts	0x0B58, r26
    17ce:	b0 93 59 0b 	sts	0x0B59, r27

    /*
     * Walk the list decrementing each timer's remaining ticks count and
     * looking for due callbacks.
     */
    prev_ptr = next_ptr = timer_queue;
    17d2:	c0 91 5a 0b 	lds	r28, 0x0B5A
    17d6:	d0 91 5b 0b 	lds	r29, 0x0B5B
    17da:	8e 01       	movw	r16, r28
    17dc:	2c c0       	rjmp	.+88     	; 0x1836 <atomTimerTick+0x9c>
    while (next_ptr)
    {
        /* Is this entry due? */
        if (--(next_ptr->cb_ticks) == 0)
    17de:	8c 81       	ldd	r24, Y+4	; 0x04
    17e0:	9d 81       	ldd	r25, Y+5	; 0x05
    17e2:	ae 81       	ldd	r26, Y+6	; 0x06
    17e4:	bf 81       	ldd	r27, Y+7	; 0x07
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	a1 09       	sbc	r26, r1
    17ea:	b1 09       	sbc	r27, r1
    17ec:	8c 83       	std	Y+4, r24	; 0x04
    17ee:	9d 83       	std	Y+5, r25	; 0x05
    17f0:	ae 83       	std	Y+6, r26	; 0x06
    17f2:	bf 83       	std	Y+7, r27	; 0x07
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	a1 05       	cpc	r26, r1
    17f8:	b1 05       	cpc	r27, r1
    17fa:	11 f0       	breq	.+4      	; 0x1800 <atomTimerTick+0x66>
    17fc:	8e 01       	movw	r16, r28
    17fe:	18 c0       	rjmp	.+48     	; 0x1830 <atomTimerTick+0x96>
        {
            /* Remove the entry from the timer list */
            if (next_ptr == timer_queue)
    1800:	80 91 5a 0b 	lds	r24, 0x0B5A
    1804:	90 91 5b 0b 	lds	r25, 0x0B5B
    1808:	28 85       	ldd	r18, Y+8	; 0x08
    180a:	39 85       	ldd	r19, Y+9	; 0x09
    180c:	c8 17       	cp	r28, r24
    180e:	d9 07       	cpc	r29, r25
    1810:	29 f4       	brne	.+10     	; 0x181c <atomTimerTick+0x82>
            {
                /* We're removing the list head */
                timer_queue = next_ptr->next_timer;
    1812:	30 93 5b 0b 	sts	0x0B5B, r19
    1816:	20 93 5a 0b 	sts	0x0B5A, r18
    181a:	03 c0       	rjmp	.+6      	; 0x1822 <atomTimerTick+0x88>
            }
            else
            {
                /* We're removing a mid or tail timer */
                prev_ptr->next_timer = next_ptr->next_timer;
    181c:	f8 01       	movw	r30, r16
    181e:	31 87       	std	Z+9, r19	; 0x09
    1820:	20 87       	std	Z+8, r18	; 0x08
            }

            /* Call the registered callback */
            if (next_ptr->cb_func)
    1822:	e8 81       	ld	r30, Y
    1824:	f9 81       	ldd	r31, Y+1	; 0x01
    1826:	30 97       	sbiw	r30, 0x00	; 0
    1828:	19 f0       	breq	.+6      	; 0x1830 <atomTimerTick+0x96>
            {
                next_ptr->cb_func (next_ptr->cb_data);
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	9b 81       	ldd	r25, Y+3	; 0x03
    182e:	19 95       	eicall
             */
            prev_ptr = next_ptr;
        }

        /* Move on to the next in the list */
        next_ptr = next_ptr->next_timer;
    1830:	08 84       	ldd	r0, Y+8	; 0x08
    1832:	d9 85       	ldd	r29, Y+9	; 0x09
    1834:	c0 2d       	mov	r28, r0
    /*
     * Walk the list decrementing each timer's remaining ticks count and
     * looking for due callbacks.
     */
    prev_ptr = next_ptr = timer_queue;
    while (next_ptr)
    1836:	20 97       	sbiw	r28, 0x00	; 0
    1838:	91 f6       	brne	.-92     	; 0x17de <atomTimerTick+0x44>
        system_ticks++;

        /* Check for any callbacks that are due */
        atomTimerCallbacks ();
    }
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	08 95       	ret

00001844 <atomTimerDelay>:
 * @retval ATOM_OK Successful delay
 * @retval ATOM_ERR_PARAM Bad parameter (ticks must be non-zero)
 * @retval ATOM_ERR_CONTEXT Not called from thread context
 */
uint8_t atomTimerDelay (uint32_t ticks)
{
    1844:	df 92       	push	r13
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	2c 97       	sbiw	r28, 0x0c	; 12
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	7b 01       	movw	r14, r22
    1864:	8c 01       	movw	r16, r24
    DELAY_TIMER timer_data;
    CRITICAL_STORE;
    uint8_t status;

    /* Get the current TCB  */
    curr_tcb_ptr = atomCurrentContext();
    1866:	0e 94 02 08 	call	0x1004	; 0x1004 <atomCurrentContext>
    186a:	fc 01       	movw	r30, r24

    /* Parameter check */
    if (ticks == 0)
    186c:	e1 14       	cp	r14, r1
    186e:	f1 04       	cpc	r15, r1
    1870:	01 05       	cpc	r16, r1
    1872:	11 05       	cpc	r17, r1
    1874:	11 f4       	brne	.+4      	; 0x187a <atomTimerDelay+0x36>
    1876:	89 ec       	ldi	r24, 0xC9	; 201
    1878:	26 c0       	rjmp	.+76     	; 0x18c6 <atomTimerDelay+0x82>
        /* Return error */
        status = ATOM_ERR_PARAM;
    }

    /* Check we are actually in thread context */
    else if (curr_tcb_ptr == NULL)
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	11 f4       	brne	.+4      	; 0x1882 <atomTimerDelay+0x3e>
    187e:	88 ec       	ldi	r24, 0xC8	; 200
    1880:	22 c0       	rjmp	.+68     	; 0x18c6 <atomTimerDelay+0x82>

    /* Otherwise safe to proceed */
    else
    {
        /* Protect the system queues */
        CRITICAL_START ();
    1882:	df b6       	in	r13, 0x3f	; 63
    1884:	f8 94       	cli

        /* Set suspended status for the current thread */
        curr_tcb_ptr->suspended = TRUE;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	85 87       	std	Z+13, r24	; 0x0d

        /* Register the timer callback */

        /* Fill out the data needed by the callback to wake us up */
        timer_data.tcb_ptr = curr_tcb_ptr;
    188a:	fa 83       	std	Y+2, r31	; 0x02
    188c:	e9 83       	std	Y+1, r30	; 0x01

        /* Fill out the timer callback request structure */
        timer_cb.cb_func = atomTimerDelayCallback;
    188e:	81 e7       	ldi	r24, 0x71	; 113
    1890:	9c e0       	ldi	r25, 0x0C	; 12
    1892:	9c 83       	std	Y+4, r25	; 0x04
    1894:	8b 83       	std	Y+3, r24	; 0x03
        timer_cb.cb_data = (POINTER)&timer_data;
    1896:	ce 01       	movw	r24, r28
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
        timer_cb.cb_ticks = ticks;
    189e:	ef 82       	std	Y+7, r14	; 0x07
    18a0:	f8 86       	std	Y+8, r15	; 0x08
    18a2:	09 87       	std	Y+9, r16	; 0x09
    18a4:	1a 87       	std	Y+10, r17	; 0x0a

        /* Store the timeout callback details, though we don't use it */
        curr_tcb_ptr->suspend_timo_cb = &timer_cb;
    18a6:	ce 01       	movw	r24, r28
    18a8:	03 96       	adiw	r24, 0x03	; 3
    18aa:	90 8b       	std	Z+16, r25	; 0x10
    18ac:	87 87       	std	Z+15, r24	; 0x0f

        /* Register the callback */
        if (atomTimerRegister (&timer_cb) != ATOM_OK)
    18ae:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <atomTimerRegister>
    18b2:	88 23       	and	r24, r24
    18b4:	19 f0       	breq	.+6      	; 0x18bc <atomTimerDelay+0x78>
        {
            /* Exit critical region */
            CRITICAL_END ();
    18b6:	df be       	out	0x3f, r13	; 63
    18b8:	8d ec       	ldi	r24, 0xCD	; 205
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <atomTimerDelay+0x82>
            status = ATOM_ERR_TIMER;
        }
        else
        {
            /* Exit critical region */
            CRITICAL_END ();
    18bc:	df be       	out	0x3f, r13	; 63

            /* Successful timer registration */
            status = ATOM_OK;

            /* Current thread should now block, schedule in another */
            atomSched (FALSE);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0e 94 14 09 	call	0x1228	; 0x1228 <atomSched>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
        }
    }

    return (status);
}
    18c6:	2c 96       	adiw	r28, 0x0c	; 12
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	df 90       	pop	r13
    18e0:	08 95       	ret

000018e2 <atomTimerDelayCallback>:
 * @param[in] cb_data Callback parameter (DELAY_TIMER ptr for sleeping thread)
 *
 * @return None
 */
static void atomTimerDelayCallback (POINTER cb_data)
{
    18e2:	1f 93       	push	r17
    DELAY_TIMER *timer_data_ptr;
    CRITICAL_STORE;

    /* Get the DELAY_TIMER structure pointer */
    timer_data_ptr = (DELAY_TIMER *)cb_data;
    18e4:	fc 01       	movw	r30, r24

    /* Check parameter is valid */
    if (timer_data_ptr)
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	49 f0       	breq	.+18     	; 0x18fc <atomTimerDelayCallback+0x1a>
    {
        /* Enter critical region */
        CRITICAL_START ();
    18ea:	1f b7       	in	r17, 0x3f	; 63
    18ec:	f8 94       	cli

        /* Put the thread on the ready queue */
        (void)tcbEnqueuePriority (&tcbReadyQ, timer_data_ptr->tcb_ptr);
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	8e e3       	ldi	r24, 0x3E	; 62
    18f4:	9b e0       	ldi	r25, 0x0B	; 11
    18f6:	0e 94 12 08 	call	0x1024	; 0x1024 <tcbEnqueuePriority>

        /* Exit critical region */
        CRITICAL_END ();
    18fa:	1f bf       	out	0x3f, r17	; 63
         * Don't call the scheduler yet. The ISR exit routine will do this
         * in case there are other callbacks to be made, which may also make
         * threads ready.
         */
    }
}
    18fc:	1f 91       	pop	r17
    18fe:	08 95       	ret

00001900 <TaskCreated>:


//Tasks Event

void TaskCreated(TASK * task)
{
    1900:	9c 01       	movw	r18, r24
    1902:	a8 ee       	ldi	r26, 0xE8	; 232
    1904:	b0 e2       	ldi	r27, 0x20	; 32
    1906:	e0 e0       	ldi	r30, 0x00	; 0
    1908:	f0 e0       	ldi	r31, 0x00	; 0
	int i;
	for(i=0;i<MAX_TASKS;i++)
	{
		if(TaskBuffer[i]==NULL)
    190a:	8d 91       	ld	r24, X+
    190c:	9c 91       	ld	r25, X
    190e:	11 97       	sbiw	r26, 0x01	; 1
    1910:	89 2b       	or	r24, r25
    1912:	39 f4       	brne	.+14     	; 0x1922 <TaskCreated+0x22>
		{
			TaskBuffer[i]=task;
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	e8 51       	subi	r30, 0x18	; 24
    191a:	ff 4d       	sbci	r31, 0xDF	; 223
    191c:	31 83       	std	Z+1, r19	; 0x01
    191e:	20 83       	st	Z, r18
    1920:	08 95       	ret
//Tasks Event

void TaskCreated(TASK * task)
{
	int i;
	for(i=0;i<MAX_TASKS;i++)
    1922:	31 96       	adiw	r30, 0x01	; 1
    1924:	12 96       	adiw	r26, 0x02	; 2
    1926:	e4 31       	cpi	r30, 0x14	; 20
    1928:	f1 05       	cpc	r31, r1
    192a:	79 f7       	brne	.-34     	; 0x190a <TaskCreated+0xa>
    192c:	08 95       	ret

0000192e <RecordEvent>:
#include "Tracer.h"
#include "StopWatch.h"
void RecordEvent(EventType Type,void* arg1,void* arg2,void* arg3)
{
    192e:	af 92       	push	r10
    1930:	bf 92       	push	r11
    1932:	cf 92       	push	r12
    1934:	df 92       	push	r13
    1936:	ef 92       	push	r14
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	b8 2e       	mov	r11, r24
    1944:	eb 01       	movw	r28, r22
    1946:	7a 01       	movw	r14, r20
    1948:	69 01       	movw	r12, r18
		CRITICAL_STORE;
		CRITICAL_START();
    194a:	af b6       	in	r10, 0x3f	; 63
    194c:	f8 94       	cli
		EventIndex = (EventIndex+1) % MAX_EVENT;
    194e:	80 91 5e 0b 	lds	r24, 0x0B5E
    1952:	90 91 5f 0b 	lds	r25, 0x0B5F
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	68 ec       	ldi	r22, 0xC8	; 200
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__divmodhi4>
    1960:	8c 01       	movw	r16, r24
    1962:	90 93 5f 0b 	sts	0x0B5F, r25
    1966:	80 93 5e 0b 	sts	0x0B5E, r24
		EventBuffer[EventIndex].timestamp = GetTime();
    196a:	0e 94 be 07 	call	0xf7c	; 0xf7c <GetTime>
    196e:	2b e0       	ldi	r18, 0x0B	; 11
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	02 9f       	mul	r16, r18
    1974:	f0 01       	movw	r30, r0
    1976:	03 9f       	mul	r16, r19
    1978:	f0 0d       	add	r31, r0
    197a:	12 9f       	mul	r17, r18
    197c:	f0 0d       	add	r31, r0
    197e:	11 24       	eor	r1, r1
    1980:	e0 5a       	subi	r30, 0xA0	; 160
    1982:	f4 4f       	sbci	r31, 0xF4	; 244
    1984:	60 83       	st	Z, r22
    1986:	71 83       	std	Z+1, r23	; 0x01
    1988:	82 83       	std	Z+2, r24	; 0x02
    198a:	93 83       	std	Z+3, r25	; 0x03
		
		if(EventBuffer[EventIndex].event==Empty||EventBuffer[EventIndex].event==NULL)
    198c:	80 91 5e 0b 	lds	r24, 0x0B5E
    1990:	90 91 5f 0b 	lds	r25, 0x0B5F
    1994:	82 9f       	mul	r24, r18
    1996:	f0 01       	movw	r30, r0
    1998:	83 9f       	mul	r24, r19
    199a:	f0 0d       	add	r31, r0
    199c:	92 9f       	mul	r25, r18
    199e:	f0 0d       	add	r31, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	e0 5a       	subi	r30, 0xA0	; 160
    19a4:	f4 4f       	sbci	r31, 0xF4	; 244
    19a6:	84 81       	ldd	r24, Z+4	; 0x04
    19a8:	88 23       	and	r24, r24
    19aa:	81 f4       	brne	.+32     	; 0x19cc <RecordEvent+0x9e>
		{

			EventBuffer[EventIndex].event = Type;
    19ac:	b4 82       	std	Z+4, r11	; 0x04
			EventBuffer[EventIndex].arg1 = arg1;
    19ae:	d6 83       	std	Z+6, r29	; 0x06
    19b0:	c5 83       	std	Z+5, r28	; 0x05
			EventBuffer[EventIndex].arg2 = arg2;
    19b2:	f0 86       	std	Z+8, r15	; 0x08
    19b4:	e7 82       	std	Z+7, r14	; 0x07
			EventBuffer[EventIndex].arg3 = arg3;
    19b6:	d2 86       	std	Z+10, r13	; 0x0a
    19b8:	c1 86       	std	Z+9, r12	; 0x09
			EventNumbers++;
    19ba:	80 91 5c 0b 	lds	r24, 0x0B5C
    19be:	90 91 5d 0b 	lds	r25, 0x0B5D
    19c2:	01 96       	adiw	r24, 0x01	; 1
    19c4:	90 93 5d 0b 	sts	0x0B5D, r25
    19c8:	80 93 5c 0b 	sts	0x0B5C, r24
		}
		CRITICAL_END();
    19cc:	af be       	out	0x3f, r10	; 63
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	bf 90       	pop	r11
    19e0:	af 90       	pop	r10
    19e2:	08 95       	ret

000019e4 <MutexPutted>:
	{
		RecordEvent(EMutexGetted,mutex,task,NULL);
	}
}
void MutexPutted(void * mutex,TASK * task)
{
    19e4:	9c 01       	movw	r18, r24
    19e6:	fb 01       	movw	r30, r22
	if(task->priority!=250)
    19e8:	82 81       	ldd	r24, Z+2	; 0x02
    19ea:	8a 3f       	cpi	r24, 0xFA	; 250
    19ec:	39 f0       	breq	.+14     	; 0x19fc <MutexPutted+0x18>
	{
		RecordEvent(EMutexPutted,mutex,task,NULL);
    19ee:	87 e0       	ldi	r24, 0x07	; 7
    19f0:	b9 01       	movw	r22, r18
    19f2:	af 01       	movw	r20, r30
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
    19fc:	08 95       	ret

000019fe <MutexGetted>:
void MutexDeleted(void * mutex)
{
	RecordEvent(EMutexDeleted,mutex,NULL,NULL);
}
void MutexGetted(void * mutex,TASK * task)
{
    19fe:	9c 01       	movw	r18, r24
    1a00:	fb 01       	movw	r30, r22
	if(task->priority!=250)
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	8a 3f       	cpi	r24, 0xFA	; 250
    1a06:	39 f0       	breq	.+14     	; 0x1a16 <MutexGetted+0x18>
	{
		RecordEvent(EMutexGetted,mutex,task,NULL);
    1a08:	86 e0       	ldi	r24, 0x06	; 6
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	af 01       	movw	r20, r30
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
    1a16:	08 95       	ret

00001a18 <MutexDeleted>:
void MutexCreated(void * mutex)
{
	RecordEvent(EMutexCreated,mutex,NULL,NULL);
}
void MutexDeleted(void * mutex)
{
    1a18:	bc 01       	movw	r22, r24
	RecordEvent(EMutexDeleted,mutex,NULL,NULL);
    1a1a:	88 e0       	ldi	r24, 0x08	; 8
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
}
    1a28:	08 95       	ret

00001a2a <MutexCreated>:
	}
}


void MutexCreated(void * mutex)
{
    1a2a:	bc 01       	movw	r22, r24
	RecordEvent(EMutexCreated,mutex,NULL,NULL);
    1a2c:	85 e0       	ldi	r24, 0x05	; 5
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
}
    1a3a:	08 95       	ret

00001a3c <TaskCompleted>:
		RecordEvent(ETaskResumed,task,NULL,NULL);
	}
}

void TaskCompleted(TASK * task)
{
    1a3c:	fc 01       	movw	r30, r24
	if(task->priority!=250)
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	8a 3f       	cpi	r24, 0xFA	; 250
    1a42:	41 f0       	breq	.+16     	; 0x1a54 <TaskCompleted+0x18>
		RecordEvent(ETaskCompleted,task,NULL,NULL);
    1a44:	84 e0       	ldi	r24, 0x04	; 4
    1a46:	bf 01       	movw	r22, r30
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
    1a54:	08 95       	ret

00001a56 <TaskResumed>:
		RecordEvent(ETaskArrived,task,NULL,NULL);
	}
}

void TaskResumed(TASK * task)
{
    1a56:	fc 01       	movw	r30, r24
	if(task->priority!=250)
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	8a 3f       	cpi	r24, 0xFA	; 250
    1a5c:	41 f0       	breq	.+16     	; 0x1a6e <TaskResumed+0x18>
	{
		RecordEvent(ETaskResumed,task,NULL,NULL);
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	bf 01       	movw	r22, r30
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
    1a6e:	08 95       	ret

00001a70 <TaskPreempted>:


TASK * OldTask;
TASK * NewTask;
void TaskPreempted(TASK * OriginalTask,TASK * TargetTask)
{
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	fc 01       	movw	r30, r24
    1a76:	eb 01       	movw	r28, r22
	
	if(OriginalTask->priority==250||TargetTask->priority==250)
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	8a 3f       	cpi	r24, 0xFA	; 250
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <TaskPreempted+0x1e>
    1a80:	9a 3f       	cpi	r25, 0xFA	; 250
    1a82:	81 f5       	brne	.+96     	; 0x1ae4 <TaskPreempted+0x74>
	{
		if(OriginalTask->priority!=250)
		{
			OldTask=OriginalTask;
    1a84:	f0 93 11 21 	sts	0x2111, r31
    1a88:	e0 93 10 21 	sts	0x2110, r30
    1a8c:	06 c0       	rjmp	.+12     	; 0x1a9a <TaskPreempted+0x2a>

		}
		else if(TargetTask->priority!=250)
    1a8e:	9a 3f       	cpi	r25, 0xFA	; 250
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <TaskPreempted+0x2a>
		{
			NewTask=TargetTask;
    1a92:	70 93 13 21 	sts	0x2113, r23
    1a96:	60 93 12 21 	sts	0x2112, r22
			
		}
		if(OldTask!=NewTask)
    1a9a:	60 91 10 21 	lds	r22, 0x2110
    1a9e:	70 91 11 21 	lds	r23, 0x2111
    1aa2:	40 91 12 21 	lds	r20, 0x2112
    1aa6:	50 91 13 21 	lds	r21, 0x2113
    1aaa:	64 17       	cp	r22, r20
    1aac:	75 07       	cpc	r23, r21
    1aae:	89 f0       	breq	.+34     	; 0x1ad2 <TaskPreempted+0x62>
		{
			if(OldTask!=NULL&&NewTask!=NULL)
    1ab0:	61 15       	cp	r22, r1
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	49 f1       	breq	.+82     	; 0x1b08 <TaskPreempted+0x98>
    1ab6:	41 15       	cp	r20, r1
    1ab8:	51 05       	cpc	r21, r1
    1aba:	31 f1       	breq	.+76     	; 0x1b08 <TaskPreempted+0x98>
			{
				RecordEvent(ETaskPreempted,OldTask,NewTask,NULL);
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
				TaskResumed(NewTask);
    1ac6:	80 91 12 21 	lds	r24, 0x2112
    1aca:	90 91 13 21 	lds	r25, 0x2113
    1ace:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <TaskResumed>
				NewTask=NULL;
			}
		}
		else
		{
			OldTask=NULL;
    1ad2:	10 92 11 21 	sts	0x2111, r1
    1ad6:	10 92 10 21 	sts	0x2110, r1
			NewTask=NULL;
    1ada:	10 92 13 21 	sts	0x2113, r1
    1ade:	10 92 12 21 	sts	0x2112, r1
    1ae2:	12 c0       	rjmp	.+36     	; 0x1b08 <TaskPreempted+0x98>
	}
	
	else
	
	{
		OldTask=NULL;
    1ae4:	10 92 11 21 	sts	0x2111, r1
    1ae8:	10 92 10 21 	sts	0x2110, r1
		NewTask=NULL;
    1aec:	10 92 13 21 	sts	0x2113, r1
    1af0:	10 92 12 21 	sts	0x2112, r1
		RecordEvent(ETaskPreempted,OriginalTask,TargetTask,NULL);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	bf 01       	movw	r22, r30
    1af8:	ae 01       	movw	r20, r28
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
		TaskResumed(TargetTask);
    1b02:	ce 01       	movw	r24, r28
    1b04:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <TaskResumed>
	}
}
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <TaskArrived>:

	}
}

void TaskArrived(TASK * task)
{
    1b0e:	fc 01       	movw	r30, r24
	if(task->priority!=250)
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	8a 3f       	cpi	r24, 0xFA	; 250
    1b14:	41 f0       	breq	.+16     	; 0x1b26 <TaskArrived+0x18>
	{
		RecordEvent(ETaskArrived,task,NULL,NULL);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	bf 01       	movw	r22, r30
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	0e 94 97 0c 	call	0x192e	; 0x192e <RecordEvent>
    1b26:	08 95       	ret

00001b28 <SendString>:
#include "SerialManager.h"
void SendString(char * StringBuffer)
{
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	03 c0       	rjmp	.+6      	; 0x1b36 <SendString+0xe>
	while(*StringBuffer)
	{
		SendChar(*StringBuffer++);
    1b30:	21 96       	adiw	r28, 0x01	; 1
    1b32:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
#include "SerialManager.h"
void SendString(char * StringBuffer)
{
	while(*StringBuffer)
    1b36:	88 81       	ld	r24, Y
    1b38:	88 23       	and	r24, r24
    1b3a:	d1 f7       	brne	.-12     	; 0x1b30 <SendString+0x8>
	{
		SendChar(*StringBuffer++);
	}
	SendChar('\n');
    1b3c:	8a e0       	ldi	r24, 0x0A	; 10
    1b3e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
}
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <uart_print>:


void uart_print(const char * format, ...)
{
    1b48:	af 92       	push	r10
    1b4a:	bf 92       	push	r11
    1b4c:	cf 92       	push	r12
    1b4e:	df 92       	push	r13
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	64 97       	sbiw	r28, 0x14	; 20
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	82 e2       	ldi	r24, 0x22	; 34
    1b6e:	e8 2e       	mov	r14, r24
    1b70:	f1 2c       	mov	r15, r1
    1b72:	ec 0e       	add	r14, r28
    1b74:	fd 1e       	adc	r15, r29
    1b76:	f7 01       	movw	r30, r14
    1b78:	c1 90       	ld	r12, Z+
    1b7a:	d1 90       	ld	r13, Z+
    1b7c:	7f 01       	movw	r14, r30
			else if(*(format+1) == 'u' && *(format+2) == 'l' )
            {
				char store[20];
                unsigned long i = va_arg(arg,unsigned long);
                char * str = store;
                ultoa(i, store,10);
    1b7e:	5e 01       	movw	r10, r28
    1b80:	08 94       	sec
    1b82:	a1 1c       	adc	r10, r1
    1b84:	b1 1c       	adc	r11, r1
    1b86:	9f c0       	rjmp	.+318    	; 0x1cc6 <uart_print+0x17e>

    va_start (arg, format);

	while( *format != '\0')
	{
		if( *format == '%')
    1b88:	85 32       	cpi	r24, 0x25	; 37
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <uart_print+0x46>
    1b8c:	97 c0       	rjmp	.+302    	; 0x1cbc <uart_print+0x174>
        {
		 	if( *(format+1) == 'c' )
    1b8e:	f6 01       	movw	r30, r12
    1b90:	81 81       	ldd	r24, Z+1	; 0x01
    1b92:	83 36       	cpi	r24, 0x63	; 99
    1b94:	41 f4       	brne	.+16     	; 0x1ba6 <uart_print+0x5e>
			{
				char c = (char)va_arg(arg, int);
    1b96:	87 01       	movw	r16, r14
    1b98:	0e 5f       	subi	r16, 0xFE	; 254
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
				SendChar(c);
    1b9c:	f7 01       	movw	r30, r14
    1b9e:	80 81       	ld	r24, Z
    1ba0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
    1ba4:	64 c0       	rjmp	.+200    	; 0x1c6e <uart_print+0x126>
				format+=2;
			}
			else if(*(format+1) == 'u'&& *(format+2) == 'd')
    1ba6:	85 37       	cpi	r24, 0x75	; 117
    1ba8:	e1 f4       	brne	.+56     	; 0x1be2 <uart_print+0x9a>
    1baa:	f6 01       	movw	r30, r12
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	84 36       	cpi	r24, 0x64	; 100
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <uart_print+0x6c>
    1bb2:	62 c0       	rjmp	.+196    	; 0x1c78 <uart_print+0x130>
			{
				char store[20];
                unsigned int i = va_arg(arg,unsigned int);
    1bb4:	87 01       	movw	r16, r14
    1bb6:	0e 5f       	subi	r16, 0xFE	; 254
    1bb8:	1f 4f       	sbci	r17, 0xFF	; 255
                char * str = store;
                itoa(i, store,10);
    1bba:	f7 01       	movw	r30, r14
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	b5 01       	movw	r22, r10
    1bc2:	4a e0       	ldi	r20, 0x0A	; 10
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <itoa>
    1bca:	75 01       	movw	r14, r10
    1bcc:	05 c0       	rjmp	.+10     	; 0x1bd8 <uart_print+0x90>
				while( *str != '\0') 
					SendChar(*str++); 
    1bce:	08 94       	sec
    1bd0:	e1 1c       	adc	r14, r1
    1bd2:	f1 1c       	adc	r15, r1
    1bd4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
			{
				char store[20];
                unsigned int i = va_arg(arg,unsigned int);
                char * str = store;
                itoa(i, store,10);
				while( *str != '\0') 
    1bd8:	f7 01       	movw	r30, r14
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 23       	and	r24, r24
    1bde:	b9 f7       	brne	.-18     	; 0x1bce <uart_print+0x86>
    1be0:	67 c0       	rjmp	.+206    	; 0x1cb0 <uart_print+0x168>
					SendChar(*str++); 
				format+=3;
			}
			else if( *(format+1) == 'x')
    1be2:	88 37       	cpi	r24, 0x78	; 120
    1be4:	b9 f4       	brne	.+46     	; 0x1c14 <uart_print+0xcc>
			{
				char store[20];
				int i = va_arg(arg, int);
    1be6:	87 01       	movw	r16, r14
    1be8:	0e 5f       	subi	r16, 0xFE	; 254
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
                char * str = store;
                itoa(i, store, 16);
    1bec:	f7 01       	movw	r30, r14
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	b5 01       	movw	r22, r10
    1bf4:	40 e1       	ldi	r20, 0x10	; 16
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <itoa>
    1bfc:	75 01       	movw	r14, r10
    1bfe:	05 c0       	rjmp	.+10     	; 0x1c0a <uart_print+0xc2>
                while( *str != '\0') 
					SendChar(*str++); 
    1c00:	08 94       	sec
    1c02:	e1 1c       	adc	r14, r1
    1c04:	f1 1c       	adc	r15, r1
    1c06:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
			{
				char store[20];
				int i = va_arg(arg, int);
                char * str = store;
                itoa(i, store, 16);
                while( *str != '\0') 
    1c0a:	f7 01       	movw	r30, r14
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 23       	and	r24, r24
    1c10:	b9 f7       	brne	.-18     	; 0x1c00 <uart_print+0xb8>
    1c12:	2d c0       	rjmp	.+90     	; 0x1c6e <uart_print+0x126>
					SendChar(*str++); 
				format+=2;
			}
			else if( *(format+1) == 'p')
    1c14:	80 37       	cpi	r24, 0x70	; 112
    1c16:	c9 f4       	brne	.+50     	; 0x1c4a <uart_print+0x102>
			{
				char store[20];
				long i = va_arg(arg, long);
    1c18:	87 01       	movw	r16, r14
    1c1a:	0c 5f       	subi	r16, 0xFC	; 252
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
                char * str = store;
                ltoa(i, store, 16);
    1c1e:	f7 01       	movw	r30, r14
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	a5 01       	movw	r20, r10
    1c2a:	20 e1       	ldi	r18, 0x10	; 16
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <ltoa>
    1c32:	75 01       	movw	r14, r10
    1c34:	05 c0       	rjmp	.+10     	; 0x1c40 <uart_print+0xf8>
                while( *str != '\0') 
					SendChar(*str++); 
    1c36:	08 94       	sec
    1c38:	e1 1c       	adc	r14, r1
    1c3a:	f1 1c       	adc	r15, r1
    1c3c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
			{
				char store[20];
				long i = va_arg(arg, long);
                char * str = store;
                ltoa(i, store, 16);
                while( *str != '\0') 
    1c40:	f7 01       	movw	r30, r14
    1c42:	80 81       	ld	r24, Z
    1c44:	88 23       	and	r24, r24
    1c46:	b9 f7       	brne	.-18     	; 0x1c36 <uart_print+0xee>
    1c48:	12 c0       	rjmp	.+36     	; 0x1c6e <uart_print+0x126>
					SendChar(*str++); 
				format+=2;
			}
			else if( *(format+1) == 's' )
    1c4a:	83 37       	cpi	r24, 0x73	; 115
    1c4c:	99 f4       	brne	.+38     	; 0x1c74 <uart_print+0x12c>
            {
                char* str = va_arg(arg, char*);
    1c4e:	87 01       	movw	r16, r14
    1c50:	0e 5f       	subi	r16, 0xFE	; 254
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	f7 01       	movw	r30, r14
    1c56:	e0 80       	ld	r14, Z
    1c58:	f1 80       	ldd	r15, Z+1	; 0x01
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <uart_print+0x11e>
                while( *str != '\0') 
					SendChar(*str++);
    1c5c:	08 94       	sec
    1c5e:	e1 1c       	adc	r14, r1
    1c60:	f1 1c       	adc	r15, r1
    1c62:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
				format+=2;
			}
			else if( *(format+1) == 's' )
            {
                char* str = va_arg(arg, char*);
                while( *str != '\0') 
    1c66:	f7 01       	movw	r30, r14
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 23       	and	r24, r24
    1c6c:	b9 f7       	brne	.-18     	; 0x1c5c <uart_print+0x114>
					SendChar(*str++);
				format+=2;
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	20 c0       	rjmp	.+64     	; 0x1cb4 <uart_print+0x16c>
            }
			else if(*(format+1) == 'u' && *(format+2) == 'l' )
    1c74:	85 37       	cpi	r24, 0x75	; 117
    1c76:	39 f5       	brne	.+78     	; 0x1cc6 <uart_print+0x17e>
    1c78:	f6 01       	movw	r30, r12
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	8c 36       	cpi	r24, 0x6C	; 108
    1c7e:	19 f5       	brne	.+70     	; 0x1cc6 <uart_print+0x17e>
            {
				char store[20];
                unsigned long i = va_arg(arg,unsigned long);
    1c80:	87 01       	movw	r16, r14
    1c82:	0c 5f       	subi	r16, 0xFC	; 252
    1c84:	1f 4f       	sbci	r17, 0xFF	; 255
                char * str = store;
                ultoa(i, store,10);
    1c86:	f7 01       	movw	r30, r14
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	a5 01       	movw	r20, r10
    1c92:	2a e0       	ldi	r18, 0x0A	; 10
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <ultoa>
    1c9a:	75 01       	movw	r14, r10
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <uart_print+0x160>
				while( *str != '\0') 
					SendChar(*str++); 
    1c9e:	08 94       	sec
    1ca0:	e1 1c       	adc	r14, r1
    1ca2:	f1 1c       	adc	r15, r1
    1ca4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
            {
				char store[20];
                unsigned long i = va_arg(arg,unsigned long);
                char * str = store;
                ultoa(i, store,10);
				while( *str != '\0') 
    1ca8:	f7 01       	movw	r30, r14
    1caa:	80 81       	ld	r24, Z
    1cac:	88 23       	and	r24, r24
    1cae:	b9 f7       	brne	.-18     	; 0x1c9e <uart_print+0x156>
					SendChar(*str++); 
				format+=3;
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	c8 0e       	add	r12, r24
    1cb6:	d9 1e       	adc	r13, r25
    1cb8:	78 01       	movw	r14, r16
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <uart_print+0x17e>
            }
		}
		else
		{
			SendChar(*format++);
    1cbc:	08 94       	sec
    1cbe:	c1 1c       	adc	r12, r1
    1cc0:	d1 1c       	adc	r13, r1
    1cc2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <USART_Transmit>
	va_list arg;
    //int done = 0;

    va_start (arg, format);

	while( *format != '\0')
    1cc6:	f6 01       	movw	r30, r12
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <uart_print+0x188>
    1cce:	5c cf       	rjmp	.-328    	; 0x1b88 <uart_print+0x40>
			SendChar(*format++);
		}
	}
 	va_end(arg);   

}
    1cd0:	64 96       	adiw	r28, 0x14	; 20
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	df 90       	pop	r13
    1cea:	cf 90       	pop	r12
    1cec:	bf 90       	pop	r11
    1cee:	af 90       	pop	r10
    1cf0:	08 95       	ret

00001cf2 <archContextSwitch>:
    1cf2:	2f 92       	push	r2
    1cf4:	3f 92       	push	r3
    1cf6:	4f 92       	push	r4
    1cf8:	5f 92       	push	r5
    1cfa:	6f 92       	push	r6
    1cfc:	7f 92       	push	r7
    1cfe:	8f 92       	push	r8
    1d00:	9f 92       	push	r9
    1d02:	af 92       	push	r10
    1d04:	bf 92       	push	r11
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	0b b6       	in	r0, 0x3b	; 59
    1d18:	0f 92       	push	r0
    1d1a:	0c b6       	in	r0, 0x3c	; 60
    1d1c:	0f 92       	push	r0
    1d1e:	0d b7       	in	r16, 0x3d	; 61
    1d20:	1e b7       	in	r17, 0x3e	; 62
    1d22:	c8 2f       	mov	r28, r24
    1d24:	d9 2f       	mov	r29, r25
    1d26:	08 83       	st	Y, r16
    1d28:	19 83       	std	Y+1, r17	; 0x01
    1d2a:	c6 2f       	mov	r28, r22
    1d2c:	d7 2f       	mov	r29, r23
    1d2e:	08 81       	ld	r16, Y
    1d30:	19 81       	ldd	r17, Y+1	; 0x01
    1d32:	0d bf       	out	0x3d, r16	; 61
    1d34:	1e bf       	out	0x3e, r17	; 62
    1d36:	0f 90       	pop	r0
    1d38:	0c b6       	in	r0, 0x3c	; 60
    1d3a:	0f 90       	pop	r0
    1d3c:	0b b6       	in	r0, 0x3b	; 59
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	bf 90       	pop	r11
    1d50:	af 90       	pop	r10
    1d52:	9f 90       	pop	r9
    1d54:	8f 90       	pop	r8
    1d56:	7f 90       	pop	r7
    1d58:	6f 90       	pop	r6
    1d5a:	5f 90       	pop	r5
    1d5c:	4f 90       	pop	r4
    1d5e:	3f 90       	pop	r3
    1d60:	2f 90       	pop	r2
    1d62:	08 95       	ret

00001d64 <archFirstThreadRestore>:
    1d64:	c8 2f       	mov	r28, r24
    1d66:	d9 2f       	mov	r29, r25
    1d68:	08 81       	ld	r16, Y
    1d6a:	19 81       	ldd	r17, Y+1	; 0x01
    1d6c:	0d bf       	out	0x3d, r16	; 61
    1d6e:	1e bf       	out	0x3e, r17	; 62
    1d70:	0f 90       	pop	r0
    1d72:	0c b6       	in	r0, 0x3c	; 60
    1d74:	0f 90       	pop	r0
    1d76:	0b b6       	in	r0, 0x3b	; 59
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	bf 90       	pop	r11
    1d8a:	af 90       	pop	r10
    1d8c:	9f 90       	pop	r9
    1d8e:	8f 90       	pop	r8
    1d90:	7f 90       	pop	r7
    1d92:	6f 90       	pop	r6
    1d94:	5f 90       	pop	r5
    1d96:	4f 90       	pop	r4
    1d98:	3f 90       	pop	r3
    1d9a:	2f 90       	pop	r2
    1d9c:	18 95       	reti

00001d9e <__mulsi3>:
    1d9e:	62 9f       	mul	r22, r18
    1da0:	d0 01       	movw	r26, r0
    1da2:	73 9f       	mul	r23, r19
    1da4:	f0 01       	movw	r30, r0
    1da6:	82 9f       	mul	r24, r18
    1da8:	e0 0d       	add	r30, r0
    1daa:	f1 1d       	adc	r31, r1
    1dac:	64 9f       	mul	r22, r20
    1dae:	e0 0d       	add	r30, r0
    1db0:	f1 1d       	adc	r31, r1
    1db2:	92 9f       	mul	r25, r18
    1db4:	f0 0d       	add	r31, r0
    1db6:	83 9f       	mul	r24, r19
    1db8:	f0 0d       	add	r31, r0
    1dba:	74 9f       	mul	r23, r20
    1dbc:	f0 0d       	add	r31, r0
    1dbe:	65 9f       	mul	r22, r21
    1dc0:	f0 0d       	add	r31, r0
    1dc2:	99 27       	eor	r25, r25
    1dc4:	72 9f       	mul	r23, r18
    1dc6:	b0 0d       	add	r27, r0
    1dc8:	e1 1d       	adc	r30, r1
    1dca:	f9 1f       	adc	r31, r25
    1dcc:	63 9f       	mul	r22, r19
    1dce:	b0 0d       	add	r27, r0
    1dd0:	e1 1d       	adc	r30, r1
    1dd2:	f9 1f       	adc	r31, r25
    1dd4:	bd 01       	movw	r22, r26
    1dd6:	cf 01       	movw	r24, r30
    1dd8:	11 24       	eor	r1, r1
    1dda:	08 95       	ret

00001ddc <__udivmodqi4>:
    1ddc:	99 1b       	sub	r25, r25
    1dde:	79 e0       	ldi	r23, 0x09	; 9
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <__udivmodqi4_ep>

00001de2 <__udivmodqi4_loop>:
    1de2:	99 1f       	adc	r25, r25
    1de4:	96 17       	cp	r25, r22
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <__udivmodqi4_ep>
    1de8:	96 1b       	sub	r25, r22

00001dea <__udivmodqi4_ep>:
    1dea:	88 1f       	adc	r24, r24
    1dec:	7a 95       	dec	r23
    1dee:	c9 f7       	brne	.-14     	; 0x1de2 <__udivmodqi4_loop>
    1df0:	80 95       	com	r24
    1df2:	08 95       	ret

00001df4 <__divmodhi4>:
    1df4:	97 fb       	bst	r25, 7
    1df6:	09 2e       	mov	r0, r25
    1df8:	07 26       	eor	r0, r23
    1dfa:	0a d0       	rcall	.+20     	; 0x1e10 <__divmodhi4_neg1>
    1dfc:	77 fd       	sbrc	r23, 7
    1dfe:	04 d0       	rcall	.+8      	; 0x1e08 <__divmodhi4_neg2>
    1e00:	2e d0       	rcall	.+92     	; 0x1e5e <__udivmodhi4>
    1e02:	06 d0       	rcall	.+12     	; 0x1e10 <__divmodhi4_neg1>
    1e04:	00 20       	and	r0, r0
    1e06:	1a f4       	brpl	.+6      	; 0x1e0e <__divmodhi4_exit>

00001e08 <__divmodhi4_neg2>:
    1e08:	70 95       	com	r23
    1e0a:	61 95       	neg	r22
    1e0c:	7f 4f       	sbci	r23, 0xFF	; 255

00001e0e <__divmodhi4_exit>:
    1e0e:	08 95       	ret

00001e10 <__divmodhi4_neg1>:
    1e10:	f6 f7       	brtc	.-4      	; 0x1e0e <__divmodhi4_exit>
    1e12:	90 95       	com	r25
    1e14:	81 95       	neg	r24
    1e16:	9f 4f       	sbci	r25, 0xFF	; 255
    1e18:	08 95       	ret

00001e1a <__udivmodsi4>:
    1e1a:	a1 e2       	ldi	r26, 0x21	; 33
    1e1c:	1a 2e       	mov	r1, r26
    1e1e:	aa 1b       	sub	r26, r26
    1e20:	bb 1b       	sub	r27, r27
    1e22:	fd 01       	movw	r30, r26
    1e24:	0d c0       	rjmp	.+26     	; 0x1e40 <__udivmodsi4_ep>

00001e26 <__udivmodsi4_loop>:
    1e26:	aa 1f       	adc	r26, r26
    1e28:	bb 1f       	adc	r27, r27
    1e2a:	ee 1f       	adc	r30, r30
    1e2c:	ff 1f       	adc	r31, r31
    1e2e:	a2 17       	cp	r26, r18
    1e30:	b3 07       	cpc	r27, r19
    1e32:	e4 07       	cpc	r30, r20
    1e34:	f5 07       	cpc	r31, r21
    1e36:	20 f0       	brcs	.+8      	; 0x1e40 <__udivmodsi4_ep>
    1e38:	a2 1b       	sub	r26, r18
    1e3a:	b3 0b       	sbc	r27, r19
    1e3c:	e4 0b       	sbc	r30, r20
    1e3e:	f5 0b       	sbc	r31, r21

00001e40 <__udivmodsi4_ep>:
    1e40:	66 1f       	adc	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	88 1f       	adc	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	1a 94       	dec	r1
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <__udivmodsi4_loop>
    1e4c:	60 95       	com	r22
    1e4e:	70 95       	com	r23
    1e50:	80 95       	com	r24
    1e52:	90 95       	com	r25
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	bd 01       	movw	r22, r26
    1e5a:	cf 01       	movw	r24, r30
    1e5c:	08 95       	ret

00001e5e <__udivmodhi4>:
    1e5e:	aa 1b       	sub	r26, r26
    1e60:	bb 1b       	sub	r27, r27
    1e62:	51 e1       	ldi	r21, 0x11	; 17
    1e64:	07 c0       	rjmp	.+14     	; 0x1e74 <__udivmodhi4_ep>

00001e66 <__udivmodhi4_loop>:
    1e66:	aa 1f       	adc	r26, r26
    1e68:	bb 1f       	adc	r27, r27
    1e6a:	a6 17       	cp	r26, r22
    1e6c:	b7 07       	cpc	r27, r23
    1e6e:	10 f0       	brcs	.+4      	; 0x1e74 <__udivmodhi4_ep>
    1e70:	a6 1b       	sub	r26, r22
    1e72:	b7 0b       	sbc	r27, r23

00001e74 <__udivmodhi4_ep>:
    1e74:	88 1f       	adc	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	5a 95       	dec	r21
    1e7a:	a9 f7       	brne	.-22     	; 0x1e66 <__udivmodhi4_loop>
    1e7c:	80 95       	com	r24
    1e7e:	90 95       	com	r25
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	08 95       	ret

00001e86 <itoa>:
    1e86:	fb 01       	movw	r30, r22
    1e88:	9f 01       	movw	r18, r30
    1e8a:	e8 94       	clt
    1e8c:	42 30       	cpi	r20, 0x02	; 2
    1e8e:	c4 f0       	brlt	.+48     	; 0x1ec0 <itoa+0x3a>
    1e90:	45 32       	cpi	r20, 0x25	; 37
    1e92:	b4 f4       	brge	.+44     	; 0x1ec0 <itoa+0x3a>
    1e94:	4a 30       	cpi	r20, 0x0A	; 10
    1e96:	29 f4       	brne	.+10     	; 0x1ea2 <itoa+0x1c>
    1e98:	97 fb       	bst	r25, 7
    1e9a:	1e f4       	brtc	.+6      	; 0x1ea2 <itoa+0x1c>
    1e9c:	90 95       	com	r25
    1e9e:	81 95       	neg	r24
    1ea0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea2:	64 2f       	mov	r22, r20
    1ea4:	77 27       	eor	r23, r23
    1ea6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <__udivmodhi4>
    1eaa:	80 5d       	subi	r24, 0xD0	; 208
    1eac:	8a 33       	cpi	r24, 0x3A	; 58
    1eae:	0c f0       	brlt	.+2      	; 0x1eb2 <itoa+0x2c>
    1eb0:	89 5d       	subi	r24, 0xD9	; 217
    1eb2:	81 93       	st	Z+, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	a1 f7       	brne	.-24     	; 0x1ea2 <itoa+0x1c>
    1eba:	16 f4       	brtc	.+4      	; 0x1ec0 <itoa+0x3a>
    1ebc:	5d e2       	ldi	r21, 0x2D	; 45
    1ebe:	51 93       	st	Z+, r21
    1ec0:	10 82       	st	Z, r1
    1ec2:	c9 01       	movw	r24, r18
    1ec4:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <strrev>

00001ec8 <ltoa>:
    1ec8:	fa 01       	movw	r30, r20
    1eca:	cf 93       	push	r28
    1ecc:	ff 93       	push	r31
    1ece:	ef 93       	push	r30
    1ed0:	22 30       	cpi	r18, 0x02	; 2
    1ed2:	44 f1       	brlt	.+80     	; 0x1f24 <ltoa+0x5c>
    1ed4:	25 32       	cpi	r18, 0x25	; 37
    1ed6:	34 f5       	brge	.+76     	; 0x1f24 <ltoa+0x5c>
    1ed8:	c2 2f       	mov	r28, r18
    1eda:	e8 94       	clt
    1edc:	ca 30       	cpi	r28, 0x0A	; 10
    1ede:	49 f4       	brne	.+18     	; 0x1ef2 <ltoa+0x2a>
    1ee0:	97 fb       	bst	r25, 7
    1ee2:	3e f4       	brtc	.+14     	; 0x1ef2 <ltoa+0x2a>
    1ee4:	90 95       	com	r25
    1ee6:	80 95       	com	r24
    1ee8:	70 95       	com	r23
    1eea:	61 95       	neg	r22
    1eec:	7f 4f       	sbci	r23, 0xFF	; 255
    1eee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	2c 2f       	mov	r18, r28
    1ef4:	33 27       	eor	r19, r19
    1ef6:	44 27       	eor	r20, r20
    1ef8:	55 27       	eor	r21, r21
    1efa:	ff 93       	push	r31
    1efc:	ef 93       	push	r30
    1efe:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__udivmodsi4>
    1f02:	ef 91       	pop	r30
    1f04:	ff 91       	pop	r31
    1f06:	60 5d       	subi	r22, 0xD0	; 208
    1f08:	6a 33       	cpi	r22, 0x3A	; 58
    1f0a:	0c f0       	brlt	.+2      	; 0x1f0e <ltoa+0x46>
    1f0c:	69 5d       	subi	r22, 0xD9	; 217
    1f0e:	61 93       	st	Z+, r22
    1f10:	b9 01       	movw	r22, r18
    1f12:	ca 01       	movw	r24, r20
    1f14:	60 50       	subi	r22, 0x00	; 0
    1f16:	70 40       	sbci	r23, 0x00	; 0
    1f18:	80 40       	sbci	r24, 0x00	; 0
    1f1a:	90 40       	sbci	r25, 0x00	; 0
    1f1c:	51 f7       	brne	.-44     	; 0x1ef2 <ltoa+0x2a>
    1f1e:	16 f4       	brtc	.+4      	; 0x1f24 <ltoa+0x5c>
    1f20:	cd e2       	ldi	r28, 0x2D	; 45
    1f22:	c1 93       	st	Z+, r28
    1f24:	10 82       	st	Z, r1
    1f26:	8f 91       	pop	r24
    1f28:	9f 91       	pop	r25
    1f2a:	cf 91       	pop	r28
    1f2c:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <strrev>

00001f30 <ultoa>:
    1f30:	fa 01       	movw	r30, r20
    1f32:	cf 93       	push	r28
    1f34:	ff 93       	push	r31
    1f36:	ef 93       	push	r30
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	cc f0       	brlt	.+50     	; 0x1f6e <ultoa+0x3e>
    1f3c:	25 32       	cpi	r18, 0x25	; 37
    1f3e:	bc f4       	brge	.+46     	; 0x1f6e <ultoa+0x3e>
    1f40:	c2 2f       	mov	r28, r18
    1f42:	2c 2f       	mov	r18, r28
    1f44:	33 27       	eor	r19, r19
    1f46:	44 27       	eor	r20, r20
    1f48:	55 27       	eor	r21, r21
    1f4a:	ff 93       	push	r31
    1f4c:	ef 93       	push	r30
    1f4e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <__udivmodsi4>
    1f52:	ef 91       	pop	r30
    1f54:	ff 91       	pop	r31
    1f56:	60 5d       	subi	r22, 0xD0	; 208
    1f58:	6a 33       	cpi	r22, 0x3A	; 58
    1f5a:	0c f0       	brlt	.+2      	; 0x1f5e <ultoa+0x2e>
    1f5c:	69 5d       	subi	r22, 0xD9	; 217
    1f5e:	61 93       	st	Z+, r22
    1f60:	b9 01       	movw	r22, r18
    1f62:	ca 01       	movw	r24, r20
    1f64:	60 50       	subi	r22, 0x00	; 0
    1f66:	70 40       	sbci	r23, 0x00	; 0
    1f68:	80 40       	sbci	r24, 0x00	; 0
    1f6a:	90 40       	sbci	r25, 0x00	; 0
    1f6c:	51 f7       	brne	.-44     	; 0x1f42 <ultoa+0x12>
    1f6e:	10 82       	st	Z, r1
    1f70:	8f 91       	pop	r24
    1f72:	9f 91       	pop	r25
    1f74:	cf 91       	pop	r28
    1f76:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <strrev>

00001f7a <strrev>:
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	67 2f       	mov	r22, r23
    1f80:	71 91       	ld	r23, Z+
    1f82:	77 23       	and	r23, r23
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <strrev+0x4>
    1f86:	32 97       	sbiw	r30, 0x02	; 2
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <strrev+0x18>
    1f8a:	7c 91       	ld	r23, X
    1f8c:	6d 93       	st	X+, r22
    1f8e:	70 83       	st	Z, r23
    1f90:	62 91       	ld	r22, -Z
    1f92:	ae 17       	cp	r26, r30
    1f94:	bf 07       	cpc	r27, r31
    1f96:	c8 f3       	brcs	.-14     	; 0x1f8a <strrev+0x10>
    1f98:	08 95       	ret

00001f9a <_exit>:
    1f9a:	f8 94       	cli

00001f9c <__stop_program>:
    1f9c:	ff cf       	rjmp	.-2      	; 0x1f9c <__stop_program>
